{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog • All posts by \"frida\" tag",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/8117.html",
            "url": "https://haysalan.github.io/posts/8117.html",
            "title": "Frida三板斧的安装配置与基本使用",
            "date_published": "2023-12-18T07:59:47.000Z",
            "content_html": "<h1 id=\"frida\"><a class=\"markdownIt-Anchor\" href=\"#frida\">#</a> Frida</h1>\n<p>面向开发人员、逆向工程师和安全研究人员的动态检测工具包。<br>\nfrida 文档：<a href=\"https://frida.re/docs/home/\">https://frida.re/docs/home/</a></p>\n<h2 id=\"对应版本\"><a class=\"markdownIt-Anchor\" href=\"#对应版本\">#</a> 对应版本</h2>\n<p>frida&amp;frida-tools 版本对应查看 ：<a href=\"https://github.com/frida/frida/releases\">frida-releases</a><br>\n 找到你使用 frida 的版本，查看其版本下<strong> frida-tools</strong> 的版本，它们就是对应版本。（建议多准备几个 Python 与 firda 的版本，因为它并不稳定）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install frida==14.2.13</span><br><span class=\"line\">pip install frida-tools==9.2.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702889862515-455c0fb7-9dc7-4854-a6d6-c94c36b24e9e.gif#averageHue=%23fcfbfb&amp;clientId=ua9a61f28-e353-4&amp;from=drop&amp;id=u694dfb9e&amp;originHeight=1363&amp;originWidth=2038&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=5812512&amp;status=done&amp;style=none&amp;taskId=u5b43f4cc-ded4-442f-9e7d-b7f790a8823&amp;title=\" alt=\"PixPin_2023-12-18_16-57-12.gif\"></p>\n<h2 id=\"frida-server\"><a class=\"markdownIt-Anchor\" href=\"#frida-server\">#</a> frida-server</h2>\n<p>安卓手机需要安装 frida-server，版本与 frida<strong> 版本需一致</strong>，根据<strong>设备架构</strong>选择 x86 或 arm 等。<br>\n<strong>解压文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7x x frida-server.xz</span><br></pre></td></tr></table></figure>\n<p><strong>启动 frida-server</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb root</span><br><span class=\"line\">adb push frida-server /data/local/tmp/</span><br><span class=\"line\">adb shell &quot;chmod 755 /data/local/tmp/frida-server&quot;</span><br><span class=\"line\">adb shell &quot;/data/local/tmp/frida-server&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>测试服务</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida-ps -U  // 查看正在运行进程</span><br></pre></td></tr></table></figure>\n<p>显示如下内容则表示服务启动，手机<strong>重启</strong>后<strong>需</strong>要<strong>再次</strong>执行命令<strong>启动</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  PID NAME</span><br><span class=\"line\"> 1590 com.xxx.xxx</span><br><span class=\"line\">13194 com.xxxx.xxxxx</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida -FU packagename -l hookscript.js</span><br></pre></td></tr></table></figure>\n<h1 id=\"jnitrace\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace\">#</a> Jnitrace</h1>\n<p>JNItrace 是一个基于 Frida 框架的<strong> Hook jni</strong> 方法的库。<a href=\"https://github.com/chame1eon/jnitrace\">https://github.com/chame1eon/jnitrace</a><br>\nPython <strong>安装</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jnitrace   <span class=\"comment\">// 需要frida版本14以上</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a class=\"markdownIt-Anchor\" href=\"#依赖\">#</a> 依赖：</h2>\n<ul>\n<li>arm、arm64、x86 或 x64 Android 设备</li>\n<li>Frida 安装在 Android 设备上</li>\n<li>Frida 支持 &gt; 14</li>\n<li>使用 Python 3 和 pip 的 Linux、Mac 或 Windows 主机</li>\n</ul>\n<h2 id=\"启动命令\"><a class=\"markdownIt-Anchor\" href=\"#启动命令\">#</a> 启动命令：</h2>\n<p>两个参数分别为<strong>待分析的 SO</strong> 与<strong> APP 包名</strong>。-l 参数可以多次使用  <code>-l libname.so -l libname1.so ...</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<p>默认使用  <code>spawn</code>  启动，可以通过  <code>-m attach</code>  设置通过  <code>attach</code>  启。</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -m attach -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>&gt;&gt;</code>  导出 log 日志保存至文件，控制台将不输出 log。<br>\n例： <code>jnitrace -l libname packagename &gt;&gt; jnitrace.txt</code></p>\n</blockquote>\n<h1 id=\"objection\"><a class=\"markdownIt-Anchor\" href=\"#objection\">#</a> objection</h1>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>官方安装教程：<a href=\"https://github.com/sensepost/objection/wiki/Installation\">https://github.com/sensepost/objection/wiki/Installation</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U objection</span><br></pre></td></tr></table></figure>\n<p>在内存中所有已加载的类中搜索包含特定关键词的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking search classes</span><br></pre></td></tr></table></figure>\n<p>hook java 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class_method &lt;methodName&gt;</span><br></pre></td></tr></table></figure>\n<p>hook java 类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class &lt;classname&gt;</span><br></pre></td></tr></table></figure>\n<p>列出进程所有的 activity</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking list activities</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida",
                "jnitrace",
                "objection"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/41869.html",
            "url": "https://haysalan.github.io/posts/41869.html",
            "title": "Frida相关API介绍",
            "date_published": "2023-12-18T02:41:22.000Z",
            "content_html": "<h1 id=\"静态实例方法-hook\"><a class=\"markdownIt-Anchor\" href=\"#静态实例方法-hook\">#</a> 静态 &amp; 实例方法 Hook</h1>\n<p>静态和实例方法的 hook 代码一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> className = <span class=\"string\">&quot;com.xxxx.xx&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"string\">&quot;func&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(className);</span><br><span class=\"line\"><span class=\"comment\">// 静态和实例方法的hook代码一致</span></span><br><span class=\"line\">classObject[funcName].<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call <span class=\"subst\">$&#123;funcName&#125;</span> - param: `</span>, x);</span><br><span class=\"line\">  x = <span class=\"string\">&quot;param&quot;</span>; <span class=\"comment\">// 修改参数 除基础类型外其他类型需要自行构造。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"variable language_\">this</span>[funcName](x);</span><br><span class=\"line\">  <span class=\"comment\">// result = &quot;param&quot;;  // 修改返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造方法的-hook-init\"><a class=\"markdownIt-Anchor\" href=\"#构造方法的-hook-init\">#</a> 构造方法的 hook ($init)</h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.xxx.xx&quot;</span>);</span><br><span class=\"line\">classObject.<span class=\"property\">$init</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call $init - param: `</span>, a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.$init(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/26899.html",
            "url": "https://haysalan.github.io/posts/26899.html",
            "title": "小破站老版本（入门级）SO层Native方法分析",
            "date_published": "2023-12-09T01:25:03.000Z",
            "content_html": "<h1 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<p>APK：哔哩哔哩 6.13.0<br>\n 首先通过 charles 抓包（<a href=\"/2023/12/14/yuque/charles%E7%A7%BB%E5%8A%A8&amp;PC%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/\">charles 抓包配置</a>）发现加密参数是 sign（32 位）。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702545110875-4f85f617-f9b8-41f3-a026-5225f1ecb6fa.png#averageHue=%23efebe7&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=182&amp;id=ud746971e&amp;originHeight=273&amp;originWidth=699&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=27817&amp;status=done&amp;style=none&amp;taskId=u0382f2ee-b150-43bf-8767-3f42b87f7c9&amp;title=&amp;width=466\" alt=\"image.png\"></p>\n<p>使用 ajdx 打开 apk 后搜索 &quot;sign&quot; 并没有想要的数据，接着试着搜索 &quot;sign=&quot; 经过分析发现是 <code>com.bilibili.nativelibrary.LibBili.s</code>  生成。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702546159027-aa401add-1412-4a36-85ec-25f0ed79ab6b.png#averageHue=%23fdf8f6&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=341&amp;id=ubff81967&amp;originHeight=512&amp;originWidth=873&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=36640&amp;status=done&amp;style=none&amp;taskId=ua7d5337b-80c2-4ec6-9747-241d38418ae&amp;title=&amp;width=582\" alt=\"image.png\"></p>\n<h1 id=\"验证加密\"><a class=\"markdownIt-Anchor\" href=\"#验证加密\">#</a> 验证加密</h1>\n<p>使用 frida 来 hook 验证以下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hookSign</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title class_\">LibBili</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">LibBili</span>[<span class=\"string\">&quot;s&quot;</span>].<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">sortedMap</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">        <span class=\"string\">`LibBili.s is called: sortedMap=<span class=\"subst\">$&#123;sortedMap.entrySet().toArray()&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"variable language_\">this</span>[<span class=\"string\">&quot;s&quot;</span>](sortedMap);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`LibBili.s result=<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(hookSign);</span><br></pre></td></tr></table></figure>\n<p>frida hook 日志，很明显 sign 就是在这里面生成的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MI 8 Pro::tv.danmaku.bili ]-&gt; LibBili.s is called: sortedMap=access_key=null,appkey=1d8b6e7d45233436,build=6130400,c_locale=zh-Hans_CN,channel=xxl_wyyd_001,mVersion=71,mallVersion=6130400,mobi_app=android,platform=android,s_locale=zh-Hans_CN,statistics=&#123;&quot;appId&quot;:1,&quot;platform&quot;:3,&quot;version&quot;:&quot;6.13.0&quot;,&quot;abtest&quot;:&quot;&quot;&#125;</span><br><span class=\"line\">LibBili.s result=access_key=&amp;appkey=1d8b6e7d45233436&amp;build=6130400&amp;c_locale=zh-Hans_CN&amp;channel=xxl_wyyd_001&amp;mVersion=71&amp;mallVersion=6130400&amp;mobi_app=android&amp;platform=android&amp;s_locale=zh-Hans_CN&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.13.0%22%2C%22abtest%22%3A%22%22%7D&amp;ts=1702547190&amp;sign=83c0620895711a111a4fc8f046b76d9d</span><br></pre></td></tr></table></figure>\n<h1 id=\"定位-so\"><a class=\"markdownIt-Anchor\" href=\"#定位-so\">#</a> 定位 SO</h1>\n<p>使用大佬的<a href=\"https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_RegisterNatives.js\"> hook 脚本</a>并作了点修改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hook_RegisterNatives</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> symbols = <span class=\"title class_\">Module</span>.<span class=\"title function_\">enumerateSymbolsSync</span>(<span class=\"string\">&quot;libart.so&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> addrRegisterNatives = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; symbols.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> symbol = symbols[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;art&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;JNI&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;RegisterNatives&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;CheckJNI&quot;</span>) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      addrRegisterNatives = symbol.<span class=\"property\">address</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;RegisterNatives is at &quot;</span>, symbol.<span class=\"property\">address</span>, symbol.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (addrRegisterNatives != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(addrRegisterNatives, &#123;</span><br><span class=\"line\">          <span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> env = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> java_class = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> class_name = <span class=\"title class_\">Java</span>.<span class=\"property\">vm</span>.<span class=\"title function_\">tryGetEnv</span>().<span class=\"title function_\">getClassName</span>(java_class);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(class_name);</span></span><br><span class=\"line\">            <span class=\"comment\">// 筛选类</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> taget_class = <span class=\"string\">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (class_name === taget_class) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n[RegisterNatives] method_count:&quot;</span>, args[<span class=\"number\">3</span>]);</span><br><span class=\"line\">              <span class=\"keyword\">var</span> methods_ptr = <span class=\"title function_\">ptr</span>(args[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> method_count = <span class=\"built_in\">parseInt</span>(args[<span class=\"number\">3</span>]);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; method_count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> name_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">var</span> sig_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(</span><br><span class=\"line\">                    i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span> + <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span></span><br><span class=\"line\">                  )</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fnPtr_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(</span><br><span class=\"line\">                    i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span> + <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">2</span></span><br><span class=\"line\">                  )</span><br><span class=\"line\">                );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> name = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readCString</span>(name_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> sig = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readCString</span>(sig_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> find_module = <span class=\"title class_\">Process</span>.<span class=\"title function_\">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                  <span class=\"string\">&quot;[RegisterNatives] java_class:&quot;</span>,</span><br><span class=\"line\">                  class_name,</span><br><span class=\"line\">                  <span class=\"string\">&quot;name:&quot;</span>,</span><br><span class=\"line\">                  name,</span><br><span class=\"line\">                  <span class=\"string\">&quot;sig:&quot;</span>,</span><br><span class=\"line\">                  sig,</span><br><span class=\"line\">                  <span class=\"string\">&quot;fnPtr:&quot;</span>,</span><br><span class=\"line\">                  fnPtr_ptr,</span><br><span class=\"line\">                  <span class=\"string\">&quot;module_name:&quot;</span>,</span><br><span class=\"line\">                  find_module.<span class=\"property\">name</span>,</span><br><span class=\"line\">                  <span class=\"string\">&quot;module_base:&quot;</span>,</span><br><span class=\"line\">                  find_module.<span class=\"property\">base</span>,</span><br><span class=\"line\">                  <span class=\"string\">&quot;offset:&quot;</span>,</span><br><span class=\"line\">                  <span class=\"title function_\">ptr</span>(fnPtr_ptr).<span class=\"title function_\">sub</span>(find_module.<span class=\"property\">base</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(hook_RegisterNatives);</span><br></pre></td></tr></table></figure>\n<p>添加筛选条件后输出的结果不多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spawning `tv.danmaku.bili`...</span><br><span class=\"line\">RegisterNatives is at  0xf0b3cbd9 _ZN3art3JNIILb0EE15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span><br><span class=\"line\">RegisterNatives is at  0xf0b910d5 _ZN3art3JNIILb1EE15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span><br><span class=\"line\">Spawned `tv.danmaku.bili`. Resuming main thread!</span><br><span class=\"line\">[MI 8 Pro::tv.danmaku.bili ]-&gt;</span><br><span class=\"line\">[RegisterNatives] method_count: 0x7</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: a sig: (Ljava/lang/String;)Ljava/lang/String; fnPtr: 0xb8369c35 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c35</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: ao sig: (Ljava/lang/String;II)Ljava/lang/String; fnPtr: 0xb8369c3b module_name: libbili.so module_base: 0xb8368000 offset: 0x1c3b</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: b sig: (Ljava/lang/String;)Ljavax/crypto/spec/IvParameterSpec; fnPtr: 0xb8369c49 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c49</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: s sig: (Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c4f module_name: libbili.so module_base: 0xb8368000 offset: 0x1c4f</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: so sig: (Ljava/util/SortedMap;II)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c55 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c55</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: getCpuCount sig: ()I fnPtr: 0xb8369c63 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c63</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: getCpuId sig: ()I fnPtr: 0xb8369c67 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c67</span><br></pre></td></tr></table></figure>\n<p>这就是我们需要的结果，module_name: <a href=\"http://libbili.so\">libbili.so</a> 表示 s 函数在 <strong><a href=\"http://libbili.so\">libbili.so</a></strong> 中。<br>\noffset: 0x1c4f 偏移量为 0x1c4f 可以理解为函数起始地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: s sig: (Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c4f module_name: libbili.so module_base: 0xb8368000 offset: 0x1c4f</span><br></pre></td></tr></table></figure>\n<h1 id=\"分析-so\"><a class=\"markdownIt-Anchor\" href=\"#分析-so\">#</a> 分析 SO</h1>\n<p>使用<strong> file</strong> 命令查看 so 的位数是多少位，可以看到是 32 位的，那么使用 32 位的 ida 打开。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702545860250-d8c98fed-5255-4a16-947a-c16016a59d92.png#averageHue=%232e3039&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=72&amp;id=u4365b7e2&amp;originHeight=108&amp;originWidth=1195&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31218&amp;status=done&amp;style=none&amp;taskId=uae38cbac-a117-4898-9e10-2e4569eeff4&amp;title=&amp;width=796.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"偏移量地址定位函数\"><a class=\"markdownIt-Anchor\" href=\"#偏移量地址定位函数\">#</a> 偏移量地址定位函数</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550208616-9e78b5a6-c72b-4f48-bd9f-75b6684b755b.gif#averageHue=%23f7f7f6&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u1e1c6921&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=454668&amp;status=done&amp;style=none&amp;taskId=ua43a4d49-06e5-478f-ac28-235419421ac&amp;title=\" alt=\"PixPin_2023-12-14_18-36-22.gif\"></p>\n<h2 id=\"jni_onload-定位-s-函数\"><a class=\"markdownIt-Anchor\" href=\"#jni_onload-定位-s-函数\">#</a> JNI_OnLoad 定位 s 函数</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550232510-9c4a4843-75f5-4fce-a183-770783c0dddb.gif#averageHue=%23f6f6f5&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u5aefa470&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=792808&amp;status=done&amp;style=none&amp;taskId=u3e2d9528-de56-415e-9185-2b963fb96eb&amp;title=\" alt=\"PixPin_2023-12-14_18-32-47.gif\"></p>\n",
            "tags": [
                "frida",
                "SO",
                "Native",
                "入门级"
            ]
        }
    ]
}