{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog • All posts by \"思路\" tag",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/60184.html",
            "url": "https://haysalan.github.io/posts/60184.html",
            "title": "学习逆向过程中的一些问题与其解决办法",
            "date_published": "2023-12-25T08:59:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>学习逆向过程中的一些问题与其解决办法，当然还有大佬们文章内提到的，整理出来方便翻阅，持续更新。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip key %&#125;当然大家有什么问题也可在下方评论，如有解决本文问题的方法还请不吝赐教，在此感谢鞠躬！&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_38851536/category_11102404.html?spm=1001.2014.3001.5482\">白龙 - SO 逆向实战十三篇</a></li>\n</ul>\n<h1 id=\"资源工具\"><a class=\"markdownIt-Anchor\" href=\"#资源工具\">#</a> 资源工具</h1>\n<ul>\n<li><a href=\"https://gchq.github.io/CyberChef\">CyberChef - 用于加密，编码，压缩和数据分析</a></li>\n<li><a href=\"https://armconverter.com/\">armconverter - ARM-HEX 转换器</a></li>\n<li><a href=\"https://github.com/r0ysue/r0capture\">r0capture - 安卓应用层抓包通杀脚本</a></li>\n<li><a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\">ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a></li>\n<li><a href=\"https://github.com/Pr0214/findhash\">findhash - IDA 脚本 可以检测出哈希算法</a></li>\n<li><a href=\"https://github.com/sml2h3/ddddocr\">ddddocr - Python 库 通用验证码识别库</a></li>\n</ul>\n<h1 id=\"ida\"><a class=\"markdownIt-Anchor\" href=\"#ida\">#</a> IDA</h1>\n<h2 id=\"通过-jni_onload-定位-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#通过-jni_onload-定位-native-函数\">#</a> 通过 JNI_OnLoad 定位 Native 函数</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip info %&#125;仅限没有经过混淆或加密处理的样本&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550232510-9c4a4843-75f5-4fce-a183-770783c0dddb.gif#averageHue=%23f6f6f5&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u5aefa470&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=792808&amp;status=done&amp;style=none&amp;taskId=u3e2d9528-de56-415e-9185-2b963fb96eb&amp;title=\" alt=\"PixPin_2023-12-14_18-32-47.gif\"></p>\n<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<h2 id=\"python-能不能调用-so-文件的-native-方法\"><a class=\"markdownIt-Anchor\" href=\"#python-能不能调用-so-文件的-native-方法\">#</a> Python 能不能调用 so 文件的 Native 方法？</h2>\n<p>Python 也有类似 Unidbg 的工具<a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\"> ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a>，但是仅限于对<strong> JAVA 层的交互极少</strong>，一旦涉及到 JNI 交互，则需要果断选择 Unidbg，在 Python 中补 JAVA 的逻辑，简直不是人该受的委屈。</p>\n<h1 id=\"密码学\"><a class=\"markdownIt-Anchor\" href=\"#密码学\">#</a> 密码学</h1>\n<h2 id=\"加密算法大概率是开源或者魔改算法有没有快速验证的方法\"><a class=\"markdownIt-Anchor\" href=\"#加密算法大概率是开源或者魔改算法有没有快速验证的方法\">#</a> 加密算法大概率是开源或者魔改算法有没有快速验证的方法？</h2>\n<p>当在分析过程中有猜测或怀疑是某加密算法时可以使用类似<a href=\"https://github.com/Pr0214/findhash\"> findhash - IDA 脚本 可以检测出哈希算法</a>的脚本，此脚本可检测无论是否魔改常数的 hash 算法 MD5，SHA1、SHA2。</p>\n<h1 id=\"汇编指令\"><a class=\"markdownIt-Anchor\" href=\"#汇编指令\">#</a> 汇编指令</h1>\n<h2 id=\"arm32-有-thumb-和-arm-两种指令模式如何确定\"><a class=\"markdownIt-Anchor\" href=\"#arm32-有-thumb-和-arm-两种指令模式如何确定\">#</a> ARM32 有 Thumb 和 ARM 两种指令模式如何确定？</h2>\n<p>最粗暴的方式就是试错法 module.callFunction 时不加 1 会报错非法指令则表示是 Thumb 模式<br>\n第二个办法是从知识角度出发，ARM 模式指令总是 4 字节长度，Thumb 指令长度多数为 2 字节，少部分指令是 4 字节。</p>\n<h1 id=\"unidbg\"><a class=\"markdownIt-Anchor\" href=\"#unidbg\">#</a> Unidbg</h1>\n<h2 id=\"unidbg-的-jnionload-加载出的类是乱码\"><a class=\"markdownIt-Anchor\" href=\"#unidbg-的-jnionload-加载出的类是乱码\">#</a> Unidbg 的 Jnionload 加载出的类是乱码？</h2>\n<p>so 做了字符串的混淆或加密，以此来对抗分析人员，但字符串总是要解密的，不然怎么用呢？这个解密一般发生在 Init array 节或者 JNI OnLoad 中，又或者是该字符串使用前的任何一个时机</p>\n<h2 id=\"对虚拟内存进行修改\"><a class=\"markdownIt-Anchor\" href=\"#对虚拟内存进行修改\">#</a> 对虚拟内存进行修改</h2>\n<p>Unidbg 提供了两种方法打 Patch，简单的需求可以调用 Unicorn 对虚拟内存进行修改，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void patchVerify()&#123;</span><br><span class=\"line\">    int patchCode = 0x4FF00100; //</span><br><span class=\"line\">    emulator.getMemory().pointer(module.base + 0x1E86).setInt(0,patchCode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning %&#125;需要注意的是，这儿地址可别+1了，Thumb的+1只在运行和Hook时需要考虑，打Patch可别想。&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补环境怎么补补什么\"><a class=\"markdownIt-Anchor\" href=\"#补环境怎么补补什么\">#</a> 补环境怎么补补什么？</h2>\n<p>我们既可以根据报错提示，在 AbstractJni 对应的函数体内，依葫芦画瓢，case &quot;xxx“。<br>\n也可以在我们的 zuiyou 类中补，因为 zuiyou 类继承了 AbstractJNI。<br>\n关于补法，有两种实践方法都很有道理</p>\n<ul>\n<li>全部在用户类中补，防止项目迁移或者 Unidbg 更新带来什么问题，这样做代码的移植性比较好。</li>\n<li>自定义 JAVA 方法在用户类中补，通用的方法在 AbstractJNI 中补，这样做的好处是，之后运行的项目如果调用通用方法，就不用做重复的修补工作。</li>\n</ul>\n<h2 id=\"如何主动调用一个-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#如何主动调用一个-native-函数\">#</a> 如何主动调用一个 Native 函数</h2>\n<p>在 Frida 中可以使用 NativeFunction API 主动调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function call_65540(base_addr)&#123;</span><br><span class=\"line\">    // 函数在内存中的地址</span><br><span class=\"line\">    var real_addr = base_addr.add(0x65541)</span><br><span class=\"line\">    var md5_function = new NativeFunction(real_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;int&quot;, &quot;pointer&quot;])</span><br><span class=\"line\">    // 参数1 明文字符串的指针</span><br><span class=\"line\">    var input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    var arg1 = Memory.allocUtf8String(input);</span><br><span class=\"line\">    // 参数2 明文长度</span><br><span class=\"line\">    var arg2 = input.length;</span><br><span class=\"line\">    // 参数3，存放结果的buffer</span><br><span class=\"line\">    var arg3 = Memory.alloc(16);</span><br><span class=\"line\">    md5_function(arg1, arg2, arg3);</span><br><span class=\"line\">    console.log(hexdump(arg3,&#123;length:0x10&#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function callMd5()&#123;</span><br><span class=\"line\">    // 确定SO 的基地址</span><br><span class=\"line\">    var base_addr = Module.findBaseAddress(&quot;libnet_crypto.so&quot;);</span><br><span class=\"line\">    call_65540(base_addr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// frida -UF -l path\\hookright.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Unidbg 也是类似的，只不过换一下 API 罢了，让我们来看一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void callMd5()&#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg1</span><br><span class=\"line\">    String input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    // malloc memory</span><br><span class=\"line\">    MemoryBlock memoryBlock1 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    // get memory pointer</span><br><span class=\"line\">    UnidbgPointer input_ptr=memoryBlock1.getPointer();</span><br><span class=\"line\">    // write plainText on it</span><br><span class=\"line\">    input_ptr.write(input.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg2</span><br><span class=\"line\">    int input_length = input.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg3 -- buffer</span><br><span class=\"line\">    MemoryBlock memoryBlock2 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    UnidbgPointer output_buffer=memoryBlock2.getPointer();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 填入参入</span><br><span class=\"line\">    list.add(input_ptr);</span><br><span class=\"line\">    list.add(input_length);</span><br><span class=\"line\">    list.add(output_buffer);</span><br><span class=\"line\">    // run</span><br><span class=\"line\">    module.callFunction(emulator, 0x65540 + 1, list.toArray());</span><br><span class=\"line\"></span><br><span class=\"line\">    // print arg3</span><br><span class=\"line\">    Inspector.inspect(output_buffer.getByteArray(0, 0x10), &quot;output&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要注意，在 Unidbg 中，同样的功能有至少两种实现和写法 ——Unicorn 的原生方法以及 Unidbg 封装后的方法，在阅读别人代码时需要灵活变通。就好比 <strong>getR0long</strong> 和<strong> emulator.getBackend ().reg_read (ArmConst.UC_ARM_REG_R0)</strong>，它们都是获取寄存器 R0 的数值。</p>\n<h2 id=\"jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\">#</a> JNItrace trace 我们在参数还没完全转换完的情况下，Unidbg 就退出了</h2>\n<p>这种情况下，可能的原因有很多，但可能性较大的是两个</p>\n<ul>\n<li>上下文环境缺失</li>\n<li>样本使用某种手段检测或反制了 Unidbg</li>\n</ul>\n<p>先看一下是否是上下文的问题，假设是上下文缺失，通俗的讲就是在 SO 加载后到我们的 main 函数调用前的这段时间里，样本需要调用一些函数对 SO 进行初始化，而我们没有注意也没做这个事，这导致了 Unidbg 无法顺利运行。</p>\n<h1 id=\"抓包\"><a class=\"markdownIt-Anchor\" href=\"#抓包\">#</a> 抓包</h1>\n<h2 id=\"对于服务器校验证书如何抓包\"><a class=\"markdownIt-Anchor\" href=\"#对于服务器校验证书如何抓包\">#</a> 对于服务器校验证书如何抓包？</h2>\n<p>安卓可以使用<a href=\"https://github.com/r0ysue/r0capture\"> r0capture - 安卓应用层抓包通杀脚本</a>进行抓包分析。</p>\n<h1 id=\"验证码\"><a class=\"markdownIt-Anchor\" href=\"#验证码\">#</a> 验证码</h1>\n<h2 id=\"遇到验证码验证怎么办\"><a class=\"markdownIt-Anchor\" href=\"#遇到验证码验证怎么办\">#</a> 遇到验证码验证怎么办？</h2>\n<p>可以使用<a href=\"https://github.com/sml2h3/ddddocr\"> ddddocr - Python 库 通用验证码识别库</a>进行识别，支持老版验证码，当前验证码支持部分滑块文字点选等。</p>\n",
            "tags": [
                "思路"
            ]
        }
    ]
}