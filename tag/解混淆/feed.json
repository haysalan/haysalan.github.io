{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog • All posts by \"解混淆\" tag",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/59917.html",
            "url": "https://haysalan.github.io/posts/59917.html",
            "title": "加速乐逆向",
            "date_published": "2023-11-08T09:00:04.000Z",
            "content_html": "<h1 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h1>\n<p>本逆向文章仅为学术交流和学习探讨之用，不代表任何官方立场或观点。文章内容仅供参考，读者应自行判断其真实性和可靠性。因使用本逆向文章而产生的任何直接或间接后果，本网站及作者不承担任何法律责任。请在使用本逆向文章前仔细阅读相关法律法规和条款，并确保您理解并接受本免责声明的全部内容。如有侵权行为或不当使用，请及时联系我们，我们将尽快处理。</p>\n<h1 id=\"逻辑分析\"><a class=\"markdownIt-Anchor\" href=\"#逻辑分析\">#</a> 逻辑分析</h1>\n<p>1.index.html 请求中有如下图两个 cookies。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435260379-8d57aed7-a002-4c53-900a-8e901924ed55.png#averageHue=%23eecd94&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=361&amp;id=ub58af60e&amp;originHeight=541&amp;originWidth=1211&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=56461&amp;status=done&amp;style=none&amp;taskId=u407de983-9f7e-4f3f-9701-d447caf96f7&amp;title=&amp;width=807.3333333333334\" alt=\"image.png\"> 2. 使用 charles 或其他抓包工具进行抓包，看到 index.html 进过三次加载，前两次是 521 状态。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435667713-255995fd-4aff-406e-ac33-4affeb7e17de.png#averageHue=%23f7e1de&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=136&amp;id=u23357e78&amp;originHeight=204&amp;originWidth=865&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31079&amp;status=done&amp;style=none&amp;taskId=u60a45c58-ce2e-4a95-b867-0424086eb04&amp;title=&amp;width=576.6666666666666\" alt=\"image.png\"> 3. 第一次请求的  <code>&lt;script&gt;</code>  标签中进行了 cookie 设置，cookie 值如图是被混淆的。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435810175-43c64164-fe6d-4413-8154-30811e494725.png#averageHue=%23f6efee&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=325&amp;id=ufda357d2&amp;originHeight=487&amp;originWidth=1180&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=45801&amp;status=done&amp;style=none&amp;taskId=ue94fa2eb-52a9-4c17-8129-1701b682529&amp;title=&amp;width=786.6666666666666\" alt=\"image.png\"><br>\n 放到浏览器控制台中执行得到如下结果，发现 cookie 的 name 和成功响应带的 cookie 一致。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436504827-0fb474f3-f3eb-4741-8d17-d1b5599d2edb.png#averageHue=%23faf7f4&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=102&amp;id=ud13a1a5c&amp;originHeight=153&amp;originWidth=1214&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28179&amp;status=done&amp;style=none&amp;taskId=u3aaeb1cd-a0c5-40f1-bcd0-174321fdc63&amp;title=&amp;width=809.3333333333334\" alt=\"image.png\"> 4. 第二次请求带上来第一次请求的 cookies-**jsl_clearance_s, 返回结果应该经过 ob 混淆的代码。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436659042-6623654a-c89e-417c-b09b-a69ac47db90e.png#averageHue=%23f5efed&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=468&amp;id=u24249c79&amp;originHeight=702&amp;originWidth=1434&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=104332&amp;status=done&amp;style=none&amp;taskId=u5a8a3feb-42d2-41de-8ac6-e2571ee4df5&amp;title=&amp;width=956\" alt=\"image.png\"> 5. 第三次成功响应，对比 cookies 发现，**jsl_clearance_s 变了，大概率是 ob 混淆文件对它做了修改。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436842758-691796cb-f12c-49cf-b8da-52cc6d5694cc.png#averageHue=%23f7f2f1&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=411&amp;id=u95876b19&amp;originHeight=616&amp;originWidth=1418&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=81899&amp;status=done&amp;style=none&amp;taskId=u50247f49-082d-40ec-be6f-152b6dcebad&amp;title=&amp;width=945.3333333333334\" alt=\"image.png\"></p>\n<h1 id=\"请求实现\"><a class=\"markdownIt-Anchor\" href=\"#请求实现\">#</a> 请求实现</h1>\n<p>解完混淆代码逻辑清晰可见<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699457082391-e396b4e4-0e34-4777-92d8-863d062d2dcb.png#averageHue=%23292e36&amp;clientId=u797940c7-3ac3-4&amp;from=paste&amp;height=614&amp;id=u6af0785e&amp;originHeight=767&amp;originWidth=1102&amp;originalType=binary%E2%88%B6=1.25&amp;rotation=0&amp;showTitle=false&amp;size=131952&amp;status=done&amp;style=none&amp;taskId=u2c86d18d-ec14-47c7-86c5-e9540582e6e&amp;title=&amp;width=881.6\" alt=\"image.png\"></p>\n<h2 id=\"python-请求代码\"><a class=\"markdownIt-Anchor\" href=\"#python-请求代码\">#</a> python 请求代码</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699463090349-47df0f08-cc99-4b35-8fd4-294c07c81c4f.png#averageHue=%232d2c2c&amp;clientId=u797940c7-3ac3-4&amp;from=paste&amp;height=515&amp;id=u996c474e&amp;originHeight=644&amp;originWidth=772&amp;originalType=binary%E2%88%B6=1.25&amp;rotation=0&amp;showTitle=false&amp;size=77500&amp;status=done&amp;style=none&amp;taskId=u3f430bd5-7c7c-4867-9ee6-e759fdfc7f9&amp;title=&amp;width=617.6\" alt=\"image.png\"></p>\n<p>完整代码仓库: <a href=\"https://github.com/Alanhays/crawler/tree/main/SCDN_JSL\">https://github.com/Alanhays/crawler</a></p>\n",
            "tags": [
                "解混淆",
                "加速乐"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/6066.html",
            "url": "https://haysalan.github.io/posts/6066.html",
            "title": "400行代码解混淆猿人学第二届第三题然后进行完美反编译",
            "date_published": "2023-10-16T02:43:09.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>猿人学 2023 届第三题 <a href=\"https://match2023.yuanrenxue.cn/topic/3\">点击跳转</a></p>\n<h2 id=\"0x01-降维打击\"><a class=\"markdownIt-Anchor\" href=\"#0x01-降维打击\">#</a> 0x01 降维打击</h2>\n<p>这里 if 都是多层嵌套的，非常影响阅读体验，直接一步将它变为一维结构吧！</p>\n<p>还原前先手动还原小部分代码，接着写反混淆脚本批量修改。<br>\n我们单看  <code>if (o &lt; 2)</code>  这个 if 块，很明显 <code>o &lt; 1</code>  其实就是 <code>o==0</code>  而 else 就是  <code>o==1</code> , 以此类推。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">88</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">        o += <span class=\"number\">226</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">243</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">        o += <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 手动还原一下 还原如下</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      o += <span class=\"number\">88</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">      o += <span class=\"number\">226</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      o += <span class=\"number\">243</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">      o += <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这是我写的插件，将<strong>多层嵌套的 if</strong> 转换为<strong> Switch</strong> 语法，可以方便我们后续调试。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToCase</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; name, cases &#125; = state;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 test 不是 o &lt; 数字，则不进行处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;&lt;&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(test.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isNumericLiteral</span>(test.<span class=\"property\">right</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// alternate.body.push(types.BreakStatement());</span></span><br><span class=\"line\">      <span class=\"comment\">// consequent.body.push(types.BreakStatement());</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> right = test.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (right % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 else 不是 if 节点的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>])) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        cases.<span class=\"title function_\">push</span>(types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 构建 case 节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> case1 = types.<span class=\"title class_\">SwitchCase</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">valueToNode</span>(right - <span class=\"number\">1</span>),</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">const</span> case2 = types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      cases.<span class=\"title function_\">push</span>(case1, case2);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; init, test, update, body &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prev = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIfStatement</span>(body)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> discriminant = prev.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">IfToCase</span>, &#123; <span class=\"attr\">name</span>: discriminant.<span class=\"property\">name</span>, <span class=\"attr\">cases</span>: cases &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> switchNode = types.<span class=\"title class_\">SwitchStatement</span>(discriminant, cases);</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body&quot;</span>).<span class=\"title function_\">replaceInline</span>(switchNode);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529594404-f77481eb-28cb-4bd3-a926-b635f89cec30.png#averageHue=%232d2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=600&amp;id=u3da4d467&amp;originHeight=900&amp;originWidth=793&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=85853&amp;status=done&amp;style=none&amp;taskId=u014f1895-cac3-4715-9e8f-d28dfece6e6&amp;title=&amp;width=528.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x02-打回原形\"><a class=\"markdownIt-Anchor\" href=\"#0x02-打回原形\">#</a> 0x02 打回原形</h2>\n<p>经过上一步还原后发现有很多  <code>o += xx | o -= xx</code>  的代码，这里的 o 其实就是 case 的条件，那么简化一下吧！ <code>o = o - xxx</code>  其中  <code>o - xxx </code> 部分我们计算出来。<br>\n下面插件来喽！又香又脆，嘎嘎香！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RestoreJump</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">AssignmentExpression</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; operator, left, right &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(operator[<span class=\"number\">1</span>] === <span class=\"string\">&quot;=&quot;</span> &amp;&amp; types.<span class=\"title function_\">isNumericLiteral</span>(right))) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> caseNode = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isSwitchCase</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, test &#125; = caseNode.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 构建 ast 节点  o -= xxx  改为 o - xxx ,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _node = types.<span class=\"title function_\">assignmentExpression</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;=&quot;</span>,</span><br><span class=\"line\">      left,</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(</span><br><span class=\"line\">        operator[<span class=\"number\">0</span>] === <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\">          ? test.<span class=\"property\">value</span> - right.<span class=\"property\">value</span></span><br><span class=\"line\">          : test.<span class=\"property\">value</span> + right.<span class=\"property\">value</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(_node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529672556-f653bcaa-08df-4fb3-b4ab-8d5a3c43d8cc.png#averageHue=%232e2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=596&amp;id=u2d646e55&amp;originHeight=894&amp;originWidth=703&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=60103&amp;status=done&amp;style=none&amp;taskId=uef9a602b-f747-4522-8474-fa12e9ce0bc&amp;title=&amp;width=468.6666666666667\" alt=\"image.png\"></p>\n<h2 id=\"0x03-迷阵寻踪\"><a class=\"markdownIt-Anchor\" href=\"#0x03-迷阵寻踪\">#</a> 0x03 迷阵寻踪</h2>\n<p>经过上面还原后 发现很多 case 块只做 o 的修改，那我就知道它下一步要到那个 case 块，唉！我们是不是可以将他们合并起来，插件如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJump</span>(<span class=\"params\">node, name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isExpressionStatement</span>(node)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; expression &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isAssignmentExpression</span>(expression)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (expression.<span class=\"property\">left</span>.<span class=\"property\">name</span> !== name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expression.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCaseJump</span>(<span class=\"params\">map, name, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; test, consequent &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> con = consequent[consequent.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(con, name);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(con)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, alternate &#125; = con;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(consequent, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getJump</span>(alternate, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map[test.<span class=\"property\">value</span>] = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicates</span>(<span class=\"params\">arr1, arr2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []; <span class=\"comment\">// 存储删除的元素的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr2.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(arr1[i]); <span class=\"comment\">// 将相同的元素存储到结果数组中</span></span><br><span class=\"line\">        arr2.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr2中的相同元素</span></span><br><span class=\"line\">        found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (found) &#123;</span><br><span class=\"line\">      arr1.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr1中的相同元素</span></span><br><span class=\"line\">      i--; <span class=\"comment\">// 由于删除了元素，需要调整索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">controlFlowStructure</span>(<span class=\"params\">si, map, cases, stack = [], body = []</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!map.<span class=\"property\">loop</span>) map.<span class=\"property\">loop</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (stack.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">indexOf</span>(si) === -<span class=\"number\">1</span>) map.<span class=\"property\">loop</span>.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = map[si];</span><br><span class=\"line\">  body = body.<span class=\"title function_\">concat</span>(cases[si].<span class=\"property\">consequent</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (item.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, body);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">      body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">        <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, [])</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; test, consequent &#125; = body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>] = types.<span class=\"title function_\">whileStatement</span>(test, consequent);</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">removeDuplicates</span>(</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>,</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MergeCases</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">SwitchStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; discriminant, cases &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = discriminant.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = binding.<span class=\"property\">path</span>.<span class=\"property\">node</span>.<span class=\"property\">init</span>.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cases.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getCaseJump</span>(map, name, cases[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(<span class=\"title function_\">controlFlowStructure</span>(start, map, cases));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比图如下，都有实质的代码了。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450260705-b76c8b0a-fafb-4898-b521-5585ee9afd08.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=580&amp;id=u70489b23&amp;originHeight=870&amp;originWidth=982&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72814&amp;status=done&amp;style=none&amp;taskId=uf6a01b16-e0e2-4689-b78b-590527a8fe4&amp;title=&amp;width=654.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x04-移除污秽\"><a class=\"markdownIt-Anchor\" href=\"#0x04-移除污秽\">#</a> 0x04 移除污秽</h2>\n<p>将指针修改的代码去除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleaningUpGarbage</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = p.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">traverse</span>(path.<span class=\"property\">scope</span>.<span class=\"property\">block</span>, &#123;</span><br><span class=\"line\">      <span class=\"title class_\">AssignmentExpression</span>(_path) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(_path.<span class=\"property\">node</span>.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>移除无关代码<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450286996-5f3bb3ba-428f-44a6-b967-0193166a5738.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=583&amp;id=ua6aaac7e&amp;originHeight=875&amp;originWidth=997&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=77990&amp;status=done&amp;style=none&amp;taskId=uff6ec970-1dac-4d57-9924-5237cb19abd&amp;title=&amp;width=664.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x05-结构优化\"><a class=\"markdownIt-Anchor\" href=\"#0x05-结构优化\">#</a> 0x05 结构优化</h2>\n<p>优化 ifelse 结构，使其更便于阅读。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isEndNode</span>(<span class=\"params\">nodes</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> typeList = [<span class=\"string\">&quot;ReturnStatement&quot;</span>, <span class=\"string\">&quot;ThrowStatement&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (typeList.<span class=\"title function_\">includes</span>(nodes[i].<span class=\"property\">type</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ifOptimization = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!alternate) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(alternate.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(consequent.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">ifStatement</span>(types.<span class=\"title function_\">unaryExpression</span>(<span class=\"string\">&quot;!&quot;</span>, test), alternate, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      types.<span class=\"title function_\">isIfStatement</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>]).<span class=\"property\">code</span> ===</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">          .<span class=\"property\">code</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        path.<span class=\"title function_\">insertAfter</span>(</span><br><span class=\"line\">          consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>处理后逻辑尽现。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450320593-e2b95e6e-9e76-4844-b667-6eec93d04bd7.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=588&amp;id=u230434df&amp;originHeight=882&amp;originWidth=1014&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=76020&amp;status=done&amp;style=none&amp;taskId=u0b9addc3-37d0-4bd2-86a2-c9edb2476e6&amp;title=&amp;width=676\" alt=\"image.png\"></p>\n<h2 id=\"0x06-答辩还原\"><a class=\"markdownIt-Anchor\" href=\"#0x06-答辩还原\">#</a> 0x06 答辩还原</h2>\n<p>这里其实就是嵌套的三元表达式，先手动还原几条能发现他本质是 switch</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ConditionalExpression</span>(path, &#123; cases, _name &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; right, left &#125; = test;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(right) || !types.<span class=\"title function_\">isNumericLiteral</span>(left)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases[right.<span class=\"property\">name</span>]) &#123;</span><br><span class=\"line\">      cases[right.<span class=\"property\">name</span>] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = [</span><br><span class=\"line\">      types.<span class=\"title function_\">expressionStatement</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">assignmentExpression</span>(<span class=\"string\">&quot;=&quot;</span>, types.<span class=\"title function_\">identifier</span>(_name), consequent)</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    body.<span class=\"title function_\">push</span>(types.<span class=\"title function_\">breakStatement</span>());</span><br><span class=\"line\">    cases[right.<span class=\"property\">name</span>].<span class=\"title function_\">push</span>(types.<span class=\"title function_\">switchCase</span>(test.<span class=\"property\">left</span>, body));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryReturn</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ReturnStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; argument &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isConditionalExpression</span>(argument)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(argument.<span class=\"property\">test</span>, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = argument.<span class=\"property\">test</span>.<span class=\"property\">right</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _name = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span><span class=\"subst\">$&#123;path.node.start&#125;</span>`</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">TernaryToSwitch</span>, &#123; <span class=\"attr\">cases</span>: cases, <span class=\"attr\">_name</span>: _name &#125;);</span><br><span class=\"line\">    path.<span class=\"title function_\">insertBefore</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">        types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(_name), <span class=\"literal\">null</span>),</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">switchStatement</span>(types.<span class=\"title function_\">identifier</span>(name), cases[name])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>(types.<span class=\"title function_\">returnStatement</span>(types.<span class=\"title function_\">identifier</span>(_name)));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后犹如拨云见日，茅塞顿开。（还原它主要是为了反编译 jsvmp）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450426324-2d914a7e-900f-43bc-bf20-8a9354955a72.png#averageHue=%232c313a&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=448&amp;id=u07f8273d&amp;originHeight=672&amp;originWidth=1775&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=229439&amp;status=done&amp;style=none&amp;taskId=u9bf7aed3-541a-42df-964a-21462f220ef&amp;title=&amp;width=1183.3333333333333\" alt=\"image.png\"></p>\n<h2 id=\"0x07-窥探本源\"><a class=\"markdownIt-Anchor\" href=\"#0x07-窥探本源\">#</a> 0x07 窥探本源</h2>\n<p>反编译后魔改点与环境检测清晰可见<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451095343-fda949dc-020d-4397-9c0e-9d372de2e24b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=731&amp;id=ubf805d6c&amp;originHeight=1096&amp;originWidth=1907&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=242373&amp;status=done&amp;style=none&amp;taskId=u75d2dc46-b601-49b0-8235-27796f97c3a&amp;title=&amp;width=1271.3333333333333\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451229487-9bdf0c20-397c-428f-8fe4-0bc1250ebc6b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=219&amp;id=uac3d94c8&amp;originHeight=329&amp;originWidth=1127&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=46466&amp;status=done&amp;style=none&amp;taskId=u6f65b94a-3b3f-458a-98e4-5292b347083&amp;title=&amp;width=751.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451251011-f97b6dac-f961-4a76-bf51-5d4661a47d64.png#averageHue=%23282d35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=605&amp;id=u8d9ac5cb&amp;originHeight=907&amp;originWidth=962&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112361&amp;status=done&amp;style=none&amp;taskId=ude973f5a-0882-4236-8fbb-c9ec825411d&amp;title=&amp;width=641.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451267059-47cac11c-8d64-43fe-859a-8aee47d83335.png#averageHue=%23282d36&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=763&amp;id=u201636c1&amp;originHeight=1144&amp;originWidth=1310&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=160926&amp;status=done&amp;style=none&amp;taskId=ucee3950c-1f24-4cd7-8a6e-642435ff9aa&amp;title=&amp;width=873.3333333333334\" alt=\"image.png\"></p>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/14781.html",
            "url": "https://haysalan.github.io/posts/14781.html",
            "title": "AST解混淆插件函数",
            "date_published": "2023-10-08T07:46:52.000Z",
            "content_html": "<p><strong>存在复用性的插件与函数，不定期补充。</strong></p>\n<h2 id=\"字面量解混淆\"><a class=\"markdownIt-Anchor\" href=\"#字面量解混淆\">#</a> 字面量解混淆</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> simplifyLiteral = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NumericLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/^0[obx]/i</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//特征匹配</span></span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">StringLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/\\\\[ux]/gi</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"规范块语句\"><a class=\"markdownIt-Anchor\" href=\"#规范块语句\">#</a> 规范块语句</h2>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>插件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BlockSyntax</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;ForStatement|WhileStatement|ForInStatement|ForOfStatement&quot;</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBlockStatement</span>(node.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">body</span> = types.<span class=\"title class_\">BlockStatement</span>([node.<span class=\"property\">body</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = [<span class=\"string\">&quot;consequent&quot;</span>, <span class=\"string\">&quot;alternate&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _path = path.<span class=\"title function_\">get</span>(nodes[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_path.<span class=\"property\">node</span> &amp;&amp; !_path.<span class=\"title function_\">isBlockStatement</span>()) &#123;</span><br><span class=\"line\">        _path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title class_\">BlockStatement</span>([_path.<span class=\"property\">node</span>]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        }
    ]
}