{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog • All posts by \"ast\" tag",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/6066.html",
            "url": "https://haysalan.github.io/posts/6066.html",
            "title": "400行代码解混淆猿人学第二届第三题然后进行完美反编译",
            "date_published": "2023-10-16T02:43:09.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>猿人学 2023 届第三题 <a href=\"https://match2023.yuanrenxue.cn/topic/3\">点击跳转</a></p>\n<h2 id=\"0x01-降维打击\"><a class=\"markdownIt-Anchor\" href=\"#0x01-降维打击\">#</a> 0x01 降维打击</h2>\n<p>这里 if 都是多层嵌套的，非常影响阅读体验，直接一步将它变为一维结构吧！</p>\n<p>还原前先手动还原小部分代码，接着写反混淆脚本批量修改。<br>\n我们单看  <code>if (o &lt; 2)</code>  这个 if 块，很明显 <code>o &lt; 1</code>  其实就是 <code>o==0</code>  而 else 就是  <code>o==1</code> , 以此类推。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">88</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">        o += <span class=\"number\">226</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">243</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">        o += <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 手动还原一下 还原如下</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      o += <span class=\"number\">88</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">      o += <span class=\"number\">226</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      o += <span class=\"number\">243</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">      o += <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这是我写的插件，将<strong>多层嵌套的 if</strong> 转换为<strong> Switch</strong> 语法，可以方便我们后续调试。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToCase</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; name, cases &#125; = state;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 test 不是 o &lt; 数字，则不进行处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;&lt;&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(test.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isNumericLiteral</span>(test.<span class=\"property\">right</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// alternate.body.push(types.BreakStatement());</span></span><br><span class=\"line\">      <span class=\"comment\">// consequent.body.push(types.BreakStatement());</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> right = test.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (right % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 else 不是 if 节点的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>])) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        cases.<span class=\"title function_\">push</span>(types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 构建 case 节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> case1 = types.<span class=\"title class_\">SwitchCase</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">valueToNode</span>(right - <span class=\"number\">1</span>),</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">const</span> case2 = types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      cases.<span class=\"title function_\">push</span>(case1, case2);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; init, test, update, body &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prev = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIfStatement</span>(body)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> discriminant = prev.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">IfToCase</span>, &#123; <span class=\"attr\">name</span>: discriminant.<span class=\"property\">name</span>, <span class=\"attr\">cases</span>: cases &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> switchNode = types.<span class=\"title class_\">SwitchStatement</span>(discriminant, cases);</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body&quot;</span>).<span class=\"title function_\">replaceInline</span>(switchNode);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529594404-f77481eb-28cb-4bd3-a926-b635f89cec30.png#averageHue=%232d2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=600&amp;id=u3da4d467&amp;originHeight=900&amp;originWidth=793&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=85853&amp;status=done&amp;style=none&amp;taskId=u014f1895-cac3-4715-9e8f-d28dfece6e6&amp;title=&amp;width=528.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x02-打回原形\"><a class=\"markdownIt-Anchor\" href=\"#0x02-打回原形\">#</a> 0x02 打回原形</h2>\n<p>经过上一步还原后发现有很多  <code>o += xx | o -= xx</code>  的代码，这里的 o 其实就是 case 的条件，那么简化一下吧！ <code>o = o - xxx</code>  其中  <code>o - xxx </code> 部分我们计算出来。<br>\n下面插件来喽！又香又脆，嘎嘎香！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RestoreJump</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">AssignmentExpression</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; operator, left, right &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(operator[<span class=\"number\">1</span>] === <span class=\"string\">&quot;=&quot;</span> &amp;&amp; types.<span class=\"title function_\">isNumericLiteral</span>(right))) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> caseNode = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isSwitchCase</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, test &#125; = caseNode.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 构建 ast 节点  o -= xxx  改为 o - xxx ,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _node = types.<span class=\"title function_\">assignmentExpression</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;=&quot;</span>,</span><br><span class=\"line\">      left,</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(</span><br><span class=\"line\">        operator[<span class=\"number\">0</span>] === <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\">          ? test.<span class=\"property\">value</span> - right.<span class=\"property\">value</span></span><br><span class=\"line\">          : test.<span class=\"property\">value</span> + right.<span class=\"property\">value</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(_node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529672556-f653bcaa-08df-4fb3-b4ab-8d5a3c43d8cc.png#averageHue=%232e2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=596&amp;id=u2d646e55&amp;originHeight=894&amp;originWidth=703&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=60103&amp;status=done&amp;style=none&amp;taskId=uef9a602b-f747-4522-8474-fa12e9ce0bc&amp;title=&amp;width=468.6666666666667\" alt=\"image.png\"></p>\n<h2 id=\"0x03-迷阵寻踪\"><a class=\"markdownIt-Anchor\" href=\"#0x03-迷阵寻踪\">#</a> 0x03 迷阵寻踪</h2>\n<p>经过上面还原后 发现很多 case 块只做 o 的修改，那我就知道它下一步要到那个 case 块，唉！我们是不是可以将他们合并起来，插件如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJump</span>(<span class=\"params\">node, name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isExpressionStatement</span>(node)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; expression &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isAssignmentExpression</span>(expression)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (expression.<span class=\"property\">left</span>.<span class=\"property\">name</span> !== name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expression.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCaseJump</span>(<span class=\"params\">map, name, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; test, consequent &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> con = consequent[consequent.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(con, name);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(con)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, alternate &#125; = con;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(consequent, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getJump</span>(alternate, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map[test.<span class=\"property\">value</span>] = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicates</span>(<span class=\"params\">arr1, arr2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []; <span class=\"comment\">// 存储删除的元素的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr2.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(arr1[i]); <span class=\"comment\">// 将相同的元素存储到结果数组中</span></span><br><span class=\"line\">        arr2.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr2中的相同元素</span></span><br><span class=\"line\">        found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (found) &#123;</span><br><span class=\"line\">      arr1.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr1中的相同元素</span></span><br><span class=\"line\">      i--; <span class=\"comment\">// 由于删除了元素，需要调整索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">controlFlowStructure</span>(<span class=\"params\">si, map, cases, stack = [], body = []</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!map.<span class=\"property\">loop</span>) map.<span class=\"property\">loop</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (stack.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">indexOf</span>(si) === -<span class=\"number\">1</span>) map.<span class=\"property\">loop</span>.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = map[si];</span><br><span class=\"line\">  body = body.<span class=\"title function_\">concat</span>(cases[si].<span class=\"property\">consequent</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (item.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, body);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">      body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">        <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, [])</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; test, consequent &#125; = body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>] = types.<span class=\"title function_\">whileStatement</span>(test, consequent);</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">removeDuplicates</span>(</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>,</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MergeCases</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">SwitchStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; discriminant, cases &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = discriminant.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = binding.<span class=\"property\">path</span>.<span class=\"property\">node</span>.<span class=\"property\">init</span>.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cases.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getCaseJump</span>(map, name, cases[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(<span class=\"title function_\">controlFlowStructure</span>(start, map, cases));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比图如下，都有实质的代码了。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450260705-b76c8b0a-fafb-4898-b521-5585ee9afd08.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=580&amp;id=u70489b23&amp;originHeight=870&amp;originWidth=982&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72814&amp;status=done&amp;style=none&amp;taskId=uf6a01b16-e0e2-4689-b78b-590527a8fe4&amp;title=&amp;width=654.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x04-移除污秽\"><a class=\"markdownIt-Anchor\" href=\"#0x04-移除污秽\">#</a> 0x04 移除污秽</h2>\n<p>将指针修改的代码去除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleaningUpGarbage</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = p.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">traverse</span>(path.<span class=\"property\">scope</span>.<span class=\"property\">block</span>, &#123;</span><br><span class=\"line\">      <span class=\"title class_\">AssignmentExpression</span>(_path) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(_path.<span class=\"property\">node</span>.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>移除无关代码<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450286996-5f3bb3ba-428f-44a6-b967-0193166a5738.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=583&amp;id=ua6aaac7e&amp;originHeight=875&amp;originWidth=997&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=77990&amp;status=done&amp;style=none&amp;taskId=uff6ec970-1dac-4d57-9924-5237cb19abd&amp;title=&amp;width=664.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x05-结构优化\"><a class=\"markdownIt-Anchor\" href=\"#0x05-结构优化\">#</a> 0x05 结构优化</h2>\n<p>优化 ifelse 结构，使其更便于阅读。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isEndNode</span>(<span class=\"params\">nodes</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> typeList = [<span class=\"string\">&quot;ReturnStatement&quot;</span>, <span class=\"string\">&quot;ThrowStatement&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (typeList.<span class=\"title function_\">includes</span>(nodes[i].<span class=\"property\">type</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ifOptimization = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!alternate) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(alternate.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(consequent.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">ifStatement</span>(types.<span class=\"title function_\">unaryExpression</span>(<span class=\"string\">&quot;!&quot;</span>, test), alternate, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      types.<span class=\"title function_\">isIfStatement</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>]).<span class=\"property\">code</span> ===</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">          .<span class=\"property\">code</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        path.<span class=\"title function_\">insertAfter</span>(</span><br><span class=\"line\">          consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>处理后逻辑尽现。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450320593-e2b95e6e-9e76-4844-b667-6eec93d04bd7.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=588&amp;id=u230434df&amp;originHeight=882&amp;originWidth=1014&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=76020&amp;status=done&amp;style=none&amp;taskId=u0b9addc3-37d0-4bd2-86a2-c9edb2476e6&amp;title=&amp;width=676\" alt=\"image.png\"></p>\n<h2 id=\"0x06-答辩还原\"><a class=\"markdownIt-Anchor\" href=\"#0x06-答辩还原\">#</a> 0x06 答辩还原</h2>\n<p>这里其实就是嵌套的三元表达式，先手动还原几条能发现他本质是 switch</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ConditionalExpression</span>(path, &#123; cases, _name &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; right, left &#125; = test;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(right) || !types.<span class=\"title function_\">isNumericLiteral</span>(left)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases[right.<span class=\"property\">name</span>]) &#123;</span><br><span class=\"line\">      cases[right.<span class=\"property\">name</span>] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = [</span><br><span class=\"line\">      types.<span class=\"title function_\">expressionStatement</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">assignmentExpression</span>(<span class=\"string\">&quot;=&quot;</span>, types.<span class=\"title function_\">identifier</span>(_name), consequent)</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    body.<span class=\"title function_\">push</span>(types.<span class=\"title function_\">breakStatement</span>());</span><br><span class=\"line\">    cases[right.<span class=\"property\">name</span>].<span class=\"title function_\">push</span>(types.<span class=\"title function_\">switchCase</span>(test.<span class=\"property\">left</span>, body));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryReturn</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ReturnStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; argument &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isConditionalExpression</span>(argument)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(argument.<span class=\"property\">test</span>, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = argument.<span class=\"property\">test</span>.<span class=\"property\">right</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _name = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span><span class=\"subst\">$&#123;path.node.start&#125;</span>`</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">TernaryToSwitch</span>, &#123; <span class=\"attr\">cases</span>: cases, <span class=\"attr\">_name</span>: _name &#125;);</span><br><span class=\"line\">    path.<span class=\"title function_\">insertBefore</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">        types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(_name), <span class=\"literal\">null</span>),</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">switchStatement</span>(types.<span class=\"title function_\">identifier</span>(name), cases[name])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>(types.<span class=\"title function_\">returnStatement</span>(types.<span class=\"title function_\">identifier</span>(_name)));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后犹如拨云见日，茅塞顿开。（还原它主要是为了反编译 jsvmp）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450426324-2d914a7e-900f-43bc-bf20-8a9354955a72.png#averageHue=%232c313a&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=448&amp;id=u07f8273d&amp;originHeight=672&amp;originWidth=1775&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=229439&amp;status=done&amp;style=none&amp;taskId=u9bf7aed3-541a-42df-964a-21462f220ef&amp;title=&amp;width=1183.3333333333333\" alt=\"image.png\"></p>\n<h2 id=\"0x07-窥探本源\"><a class=\"markdownIt-Anchor\" href=\"#0x07-窥探本源\">#</a> 0x07 窥探本源</h2>\n<p>反编译后魔改点与环境检测清晰可见<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451095343-fda949dc-020d-4397-9c0e-9d372de2e24b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=731&amp;id=ubf805d6c&amp;originHeight=1096&amp;originWidth=1907&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=242373&amp;status=done&amp;style=none&amp;taskId=u75d2dc46-b601-49b0-8235-27796f97c3a&amp;title=&amp;width=1271.3333333333333\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451229487-9bdf0c20-397c-428f-8fe4-0bc1250ebc6b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=219&amp;id=uac3d94c8&amp;originHeight=329&amp;originWidth=1127&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=46466&amp;status=done&amp;style=none&amp;taskId=u6f65b94a-3b3f-458a-98e4-5292b347083&amp;title=&amp;width=751.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451251011-f97b6dac-f961-4a76-bf51-5d4661a47d64.png#averageHue=%23282d35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=605&amp;id=u8d9ac5cb&amp;originHeight=907&amp;originWidth=962&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112361&amp;status=done&amp;style=none&amp;taskId=ude973f5a-0882-4236-8fbb-c9ec825411d&amp;title=&amp;width=641.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451267059-47cac11c-8d64-43fe-859a-8aee47d83335.png#averageHue=%23282d36&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=763&amp;id=u201636c1&amp;originHeight=1144&amp;originWidth=1310&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=160926&amp;status=done&amp;style=none&amp;taskId=ucee3950c-1f24-4cd7-8a6e-642435ff9aa&amp;title=&amp;width=873.3333333333334\" alt=\"image.png\"></p>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/14781.html",
            "url": "https://haysalan.github.io/posts/14781.html",
            "title": "AST解混淆插件函数",
            "date_published": "2023-10-08T07:46:52.000Z",
            "content_html": "<p><strong>存在复用性的插件与函数，不定期补充。</strong></p>\n<h2 id=\"字面量解混淆\"><a class=\"markdownIt-Anchor\" href=\"#字面量解混淆\">#</a> 字面量解混淆</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> simplifyLiteral = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NumericLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/^0[obx]/i</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//特征匹配</span></span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">StringLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/\\\\[ux]/gi</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"规范块语句\"><a class=\"markdownIt-Anchor\" href=\"#规范块语句\">#</a> 规范块语句</h2>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>插件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BlockSyntax</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;ForStatement|WhileStatement|ForInStatement|ForOfStatement&quot;</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBlockStatement</span>(node.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">body</span> = types.<span class=\"title class_\">BlockStatement</span>([node.<span class=\"property\">body</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = [<span class=\"string\">&quot;consequent&quot;</span>, <span class=\"string\">&quot;alternate&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _path = path.<span class=\"title function_\">get</span>(nodes[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_path.<span class=\"property\">node</span> &amp;&amp; !_path.<span class=\"title function_\">isBlockStatement</span>()) &#123;</span><br><span class=\"line\">        _path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title class_\">BlockStatement</span>([_path.<span class=\"property\">node</span>]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/35002.html",
            "url": "https://haysalan.github.io/posts/35002.html",
            "title": "AST解混淆常用API介绍",
            "date_published": "2023-09-27T13:12:49.000Z",
            "content_html": "<p>注意：解混淆插件几乎不可能做到通用所有混淆，学习 ast 才能对混淆进行还原。</p>\n<h2 id=\"pathtypesnode的常用方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#pathtypesnode的常用方法介绍\">#</a> path/types (node) 的常用方法介绍</h2>\n<h3 id=\"查看节点的源代码\"><a class=\"markdownIt-Anchor\" href=\"#查看节点的源代码\">#</a> 查看节点的源代码</h3>\n<blockquote>\n<p>path.toString()<br>\ngenerator(node).code;</p>\n</blockquote>\n<p>获取 path 与 node 的源代码方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//babel库相关，解析，转换，构建，生产</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/types&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"comment\">// js源代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`let a = &quot;hi ast&quot;;`</span>;</span><br><span class=\"line\"><span class=\"comment\">//转换为ast树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取path源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;path.toString: &quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; node &#125; = path;</span><br><span class=\"line\">    <span class=\"comment\">// 获取node源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;generator: &quot;</span>, <span class=\"title function_\">generator</span>(node).<span class=\"property\">code</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; code &#125; = <span class=\"title function_\">generator</span>(ast, (opts = &#123; <span class=\"attr\">jsescOption</span>: &#123; <span class=\"attr\">minimal</span>: <span class=\"literal\">true</span> &#125; &#125;));</span><br><span class=\"line\"><span class=\"comment\">// 处理后的js源代码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(code);</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断节点类型\"><a class=\"markdownIt-Anchor\" href=\"#判断节点类型\">#</a> 判断节点类型</h3>\n<blockquote>\n<p>types.isVariableDeclarator(node,opts)<br>\npath.isVariableDeclarator(opts)</p>\n</blockquote>\n<p>下方 <code>&quot;FunctionDeclaration|FunctionExpression&quot;</code>  这样写可同时遍历当前两种或多种类型。<br>\n判断节点是否是需要处理的节点，下面例子中常用到的姿势都有提到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">var b = 0;</span></span><br><span class=\"line\"><span class=\"string\">const c = 2;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var e = function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tconsole.log(&#x27;ok&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|FunctionExpression&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// path方法可不传参数,默认为path.node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isFunctionExpression</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志1：&quot;</span>, path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用path方法,过滤let声明的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isVariableDeclaration</span>(&#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;let&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用types方法,过滤var声明的节点,第一个参数node必填</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isVariableDeclaration</span>(path.<span class=\"property\">node</span>, &#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志2：&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志<span class=\"number\">2</span>： <span class=\"keyword\">const</span> c = <span class=\"number\">2</span>;</span><br><span class=\"line\">日志<span class=\"number\">1</span>： <span class=\"keyword\">function</span> <span class=\"title function_\">d</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换节点\"><a class=\"markdownIt-Anchor\" href=\"#替换节点\">#</a> 替换节点</h3>\n<blockquote>\n<p>path.replaceInline(nodes)<br>\npath.replaceWithMultiple()<br>\npath.replaceWith()</p>\n</blockquote>\n<p>推荐使用 replacelnline 方法，它兼容其他两种方法，无脑使用 replacelnline 即可。<br>\ntypes.valueToNode 方法可以将基础值转换为对应节点。<br>\n下面这段插件可以将所有变量的值都变为 666。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">666</span>));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">666</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点删除\"><a class=\"markdownIt-Anchor\" href=\"#节点删除\">#</a> <strong>节点删除</strong></h3>\n<blockquote>\n<p>path.remove()</p>\n</blockquote>\n<p>该方法没有参数，可以将路径下的节点全部删除，使用请小心。<br>\n下面示例将变量名为 <code>a</code>  的 path 删除了，结果是删除了 <code>var a = 1;</code>  这行代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> != <span class=\"string\">&quot;a&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点插入\"><a class=\"markdownIt-Anchor\" href=\"#节点插入\">#</a> <strong>节点插入</strong></h3>\n<blockquote>\n<p>path.insertBefore (nodes) // 当前节点前插入<br>\n path.insertAfter (nodes) // 当前节点后插入</p>\n</blockquote>\n<p>什么地方可以插入节点？<br>\n一般在 [] 节点类型进行插入，你可以使用 Array 的方法来操作它，比如 <code>pop</code> 、 <code>push</code>  等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var b = 1;`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;b&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;a&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// types.Identifier(&quot;a&quot;) 生成Identifier类型节点 实参“a” 实际是 name = “a”</span></span><br><span class=\"line\">    <span class=\"comment\">// types.valueToNode  将值转换为节点</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(generator(node).code)</span></span><br><span class=\"line\">    path.<span class=\"property\">parent</span>.<span class=\"property\">declarations</span>.<span class=\"title function_\">unshift</span>(node); <span class=\"comment\">// 等价于  path.insertBefore(node);</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;c&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;d&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// insertBefore 和 insertAfter 都支持多个node</span></span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>([node1, node2]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2,</span><br><span class=\"line\">    d = 3;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取父节点\"><a class=\"markdownIt-Anchor\" href=\"#获取父节点\">#</a> 获取父节点</h3>\n<blockquote>\n<p>path.parent<br>\npath.parentPath</p>\n</blockquote>\n<p>path.parentPath 获取的是 path，path.parent 获取的是 node，他们的关系如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"property\">parent</span> = path.<span class=\"property\">parentPath</span>.<span class=\"property\">node</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取子孙节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子孙节点\">#</a> 获取子孙节点</h3>\n<blockquote>\n<p>path.get(key)</p>\n</blockquote>\n<p>形参 key 是一个字符串，也就是路径，以。隔开。<br>\n两种方式获取子节点。<br>\npath.get 获取的是 <code>path</code> ，需要 <code>.node</code>  获取节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">&quot;var b = 1;&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Program</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body.0.declarations.0&quot;</span>).<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = path.<span class=\"property\">node</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">declarations</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node1 === node2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟节点\">#</a> 获取兄弟节点</h3>\n<blockquote>\n<p>path.getPrevSibling () // 获取前一个兄弟节点<br>\n path.getAllPrevSiblings () // 获取所有的前兄弟节点<br>\n path.getNextSibling () // 获取后一个兄弟节点<br>\n path.getAllNextSiblings () // 获取所有的后兄弟节点</p>\n</blockquote>\n<p>获取的为 path，其中 getAllPrevSiblings，getAllNextSiblings 返回 path 列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = &quot;老大&quot;,b= &quot;老二&quot;, c =&quot;老三&quot;,d=&quot;老四&quot;,e=&quot;老五&quot;;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取前一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getPrevSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的前兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllPrevSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;当前节点是&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取后一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getNextSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的后兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllNextSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取前一个兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span></span><br><span class=\"line\">获取所有的前兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span>,a = <span class=\"string\">&quot;老大&quot;</span></span><br><span class=\"line\">当前节点是 c = <span class=\"string\">&quot;老三&quot;</span></span><br><span class=\"line\">获取后一个兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span></span><br><span class=\"line\">获取所有的后兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span>,e = <span class=\"string\">&quot;老五&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"向上查找节点\"><a class=\"markdownIt-Anchor\" href=\"#向上查找节点\">#</a> 向上查找节点</h3>\n<blockquote>\n<p>path.findParent (callback) // 从父节点查找<br>\n path.find (callback) // 从当前节点查找</p>\n</blockquote>\n<p>find (findParent 从父节点) 从当前 path 开始向上遍历，直到满足回调函数条件为止，找不到则返回 <code>null</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  进入最内层的d</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> !== <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> find = path.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent1 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent2 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;find -&gt; &quot;</span>, find.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent -&gt; &quot;</span>, findParent.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent1 -&gt; &quot;</span>, findParent1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent2 -&gt; &quot;</span>, findParent2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">findParent -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent1 -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent2 -&gt;  <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算表达式的值\"><a class=\"markdownIt-Anchor\" href=\"#计算表达式的值\">#</a> 计算表达式的值</h3>\n<blockquote>\n<p>path.evaluate()</p>\n</blockquote>\n<p>通过 evaluate 可以直接帮你把结果计算出来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var a = 1+2;</span></span><br><span class=\"line\"><span class=\"string\">var b = !![];`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initPath = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; confident, value &#125; = initPath.evaluate();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!confident) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    initPath.<span class=\"title function_\">replaceWith</span>(types.<span class=\"title function_\">valueToNode</span>(value));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scopebinding-的用法介绍\"><a class=\"markdownIt-Anchor\" href=\"#scopebinding-的用法介绍\">#</a> scope&amp;binding 的用法介绍</h2>\n<blockquote>\n<p>资料来源 -&gt; <a href=\"https://evilrecluse.top/post/7389a59f/#%E4%BD%9C%E7%94%A8%E5%9F%9FScope-%E4%B8%8E-%E8%A2%AB%E7%BB%91%E5%AE%9A%E9%87%8FBinding\">作用域 Scope - 与 - 被绑定量 Binding</a></p>\n</blockquote>\n<h3 id=\"作用域-scope\"><a class=\"markdownIt-Anchor\" href=\"#作用域-scope\">#</a> 作用域 Scope</h3>\n<p><code>@Babel</code>  解析出来的语法树节点对象会包含作用域信息，这个信息会作为节点 <code>Node</code>  对象的一个属性保存<br>\n这个属性本身是一个 <code>Scope</code>  对象，其定义位于 <code>node_modules/@babel/traverse/lib/scope/index.js</code>  中</p>\n<blockquote>\n<p>例：查看基本的 作用域与绑定 信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function squire(i)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return i * i * i;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function i()</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var i = 123;</span></span><br><span class=\"line\"><span class=\"string\">    i += 2;</span></span><br><span class=\"line\"><span class=\"string\">    return 123;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n\\n这里是函数 &quot;</span>, path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;()&quot;</span>);</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">dump</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>执行  <code>Scope.dump()</code> ，会得到自底向上的 作用域与变量信息<br>\n得到结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里是函数  squire()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: true, references: 3, violations: 0, kind: &#x27;param&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">这里是函数  i()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: false, references: 0, violations: 1, kind: &#x27;var&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p><strong>输出查看方法</strong></p>\n<ul>\n<li>每一个作用域都以 #标识输出</li>\n<li>每一个绑定都以 - 标识输出</li>\n<li>对于单次输出，都是自底向上的<br>\n先输出当前作用域，再输出父级作用域，再输出父级的父级作用域……</li>\n<li>对于单个绑定 Binding，会输出 4 种信息\n<ul>\n<li>constant 声明后，是否会被修改</li>\n<li>references 被引用次数</li>\n<li>violations 被重新定义的次数</li>\n<li>kind 函数声明类型。param 参数，hoisted 提升，var 变量， local 内部</li>\n</ul>\n</li>\n</ul>\n<p>后续会单独说明 Binding 对象，此处留个印象即可<br>\n<strong>描述</strong><br>\n此处从两个函数节点输出了其作用域的信息</p>\n<ul>\n<li>这两个函数都是定义在同一级下的，所以都会输出相同的父级作用域 Program 的信息</li>\n<li>你会发现，代码中有非常多个 i，有的是函数定义，有的是参数，有的是变量。仔细观察它们的不同之处<br>\n解释器就是通过 不同层级的作用域 与 绑定定义信息 来区分不同的名称的量的</li>\n</ul>\n<h3 id=\"绑定-binding\"><a class=\"markdownIt-Anchor\" href=\"#绑定-binding\">#</a> 绑定 Binding</h3>\n<p><code>Binding</code>  对象用于存储 绑定 的信息<br>\n这个对象会作为 <code>Scope</code>  对象的一个属性存在<br>\n同一个作用域可以包含多个 Binding<br>\n 你可以在  <code>@babel/traverse/lib/scope/binding.js</code>  中查看到它的定义</p>\n<blockquote>\n<p>显示 Binding 的信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">    a = a + 1;</span></span><br><span class=\"line\"><span class=\"string\">    return a;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function b()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var b = 1;</span></span><br><span class=\"line\"><span class=\"string\">    var c = 2;</span></span><br><span class=\"line\"><span class=\"string\">    b = b - c;</span></span><br><span class=\"line\"><span class=\"string\">    return b;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n此块节点源码：\\n&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bindings = path.<span class=\"property\">scope</span>.<span class=\"property\">bindings</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;作用域内 被绑定量 数量：&quot;</span>, <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(bindings).<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> binding_ <span class=\"keyword\">in</span> bindings) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;名字：&quot;</span>, binding_);</span><br><span class=\"line\">      binding_ = bindings[binding_];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;类型：&quot;</span>, binding_.<span class=\"property\">kind</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;定义：&quot;</span>, binding_.<span class=\"property\">identifier</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被修改：&quot;</span>, binding_.<span class=\"property\">constant</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被修改信息信息记录&quot;</span>, binding_.<span class=\"property\">constantViolations</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被引用：&quot;</span>, binding_.<span class=\"property\">referenced</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用次数&quot;</span>, binding_.<span class=\"property\">references</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用信息NodePath记录&quot;</span>, binding_.<span class=\"property\">referencePaths</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>会输出一大堆信息。其对应的意义已经写在代码中，可以自行查看</p>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>在解混淆中，作用域与绑定 主要用来处理边界的问题<br>\n即：某个量哪里引用了，在哪里定义</p>\n<blockquote>\n<p>例：删除所有定义了，却从未使用的变量</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">function squire()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">  var d = 4;</span></span><br><span class=\"line\"><span class=\"string\">  return a * d;</span></span><br><span class=\"line\"><span class=\"string\">  var e = 5;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var f = 6;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func_name = path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(func_name);</span><br><span class=\"line\">    <span class=\"comment\">// 如果变量没有被引用过，那么删除也没关系</span></span><br><span class=\"line\">    <span class=\"comment\">//   此处不能用有无修改过进行判断，因为没有被修改过并不意味着没用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binding &amp;&amp; !binding.<span class=\"property\">referenced</span>) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(ast)[<span class=\"string\">&quot;code&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">squire</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了 Scope.getBinding () 方法来获取 Binding 对象，判断其引用情况来对语法树进行修改</p>\n<h2 id=\"构建节点\"><a class=\"markdownIt-Anchor\" href=\"#构建节点\">#</a> 构建节点</h2>\n<h3 id=\"不推荐的方式需要了解\"><a class=\"markdownIt-Anchor\" href=\"#不推荐的方式需要了解\">#</a> 不推荐的方式（需要了解）</h3>\n<p>AST 在 js 看来就是一个 json 数据，说明可以构建 {} 的方式构建节点。<br>\n假设我们需要构造这段代码  <code>var a = 0;</code> <br>\n 先使用 <a href=\"https://astexplorer.net/\">ASTexplorer</a> 查看该代码的 AST。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105425701-0c9fd23d-f7d9-4084-8967-a1e126f706b2.png#averageHue=%23f4ee90&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=733&amp;id=u10a8356d&amp;originHeight=1100&amp;originWidth=742&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=80611&amp;status=done&amp;style=none&amp;taskId=u2af3218a-f664-46c3-8de0-667e18e21aa&amp;title=&amp;width=494.6666666666667\" alt=\"image.png\"><br>\njs 源代码 <code>var a = 0;</code>  的 JSON 数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>敏锐的你发现每个节点都有 <code>start</code> 、 <code>end</code> 、 <code>type</code>  这几个属性和其余不同的属性，这些都是必要的吗？哪些是必要的。这时需要参考 <a href=\"https://babeljs.io/docs/babel-types\">https://babeljs.io/docs/babel-types</a> 查看哪些是必要节点。<br>\n以 <code>VariableDeclaration</code>  为例。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1686650451689-cc4f1c3d-2e3d-44b7-8890-a14bd33242f2.png#averageHue=%23f7edd0&amp;clientId=ub9e050d9-ff18-4&amp;from=paste&amp;height=546&amp;id=ue9b1d0b1&amp;originHeight=819&amp;originWidth=831&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=92253&amp;status=done&amp;style=none&amp;taskId=u3df98a2b-982e-49fc-b379-5650d45a88e&amp;title=&amp;width=554\" alt=\"image.png\"><br>\n 可以看到 <code>VariableDeclaration</code>  类型的节点有两个必要的节点（ <code>type</code>  对于任何节点都是必须的），其中 <code>kind</code>  的类型为 <code>string</code>  值为黄色框框框住的，而 <code>declarations</code>  的类型则为 VariableDeclarator 数组。<br>\n再参照其他类型节点的必要参数，简化得到下面的 ast 节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">id</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">init</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"types-函数构造节点\"><a class=\"markdownIt-Anchor\" href=\"#types-函数构造节点\">#</a> types 函数构造节点</h3>\n<p>手搓 <code>ast</code>  节点虽然不难，但是复杂的节点构建起来很冗余， <code>types</code>  提供了构建 <code>node</code>  的 <code>function</code> ，使用它们来构造简洁高效。如图构造函数的参数及顺序。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105795085-d60a2f32-1e90-4883-94ab-ad63cdc4a14a.png#averageHue=%23fbf9f0&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=169&amp;id=uf299e3c9&amp;originHeight=253&amp;originWidth=787&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28239&amp;status=done&amp;style=none&amp;taskId=uedb2be9d-d41e-4250-97bf-d6df8c61d9d&amp;title=&amp;width=524.6666666666666\" alt=\"image.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">  types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(<span class=\"string\">&quot;a&quot;</span>), types.<span class=\"title function_\">numericLiteral</span>(<span class=\"number\">0</span>)),</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"template-快速构造节点推荐\"><a class=\"markdownIt-Anchor\" href=\"#template-快速构造节点推荐\">#</a> template 快速构造节点（推荐）</h3>\n<p>使用 <code>types.xxx</code>  来构建节点虽然简洁了不少，但还是觉着繁琐。那么使用 <code>template</code>  绝对会让你眼前一亮。<br>\n假设需要构建 <code>var a = 0,b = 1,c = 2;</code>  使用手搓或 <code>types.xxx</code>  都很繁琐，那么试试新姿势吧！别忘了导包哦！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/template&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">VAR_NODE</span> = <span class=\"title function_\">template</span>(<span class=\"string\">`var A = 0,B = 1, C = 2`</span>);</span><br></pre></td></tr></table></figure>\n<p>这里定义了 <code>VAR_NODE</code>  变量，其中 <code>A</code> , <code>B</code> , <code>C</code>  类似于占位符 <code>VAR_NODE</code>  接收一个参数 <code>&#123;&#125;</code> , <code>&#123;&#125;</code>  的 <code>A</code> , <code>B</code> , <code>C</code>  这几个属性需要分别构造， <code>A</code> , <code>B</code> , <code>C</code>  等价于 <code>VariableDeclarator</code>  节点的 <code>id</code>  属性，也就是 <code>identifier</code>  节点，直接字符串也可以（标识符类型）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = <span class=\"title function_\">VAR_NODE</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">A</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">B</span>: <span class=\"string\">&quot;b&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">C</span>: <span class=\"string\">&quot;c&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">  b = <span class=\"number\">1</span>,</span><br><span class=\"line\">  c = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特性介绍\"><a class=\"markdownIt-Anchor\" href=\"#特性介绍\">#</a> 特性介绍</h2>\n<h3 id=\"同时遍历多个类型\"><a class=\"markdownIt-Anchor\" href=\"#同时遍历多个类型\">#</a> 同时遍历多个类型</h3>\n<p>假设需要同时遍历多个类型，可以这样写插件，这样写一个方法处理两种类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">let b = 0;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|VariableDeclaration&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还可以这样写单独处理各自的类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"pathtraversestate\"><a class=\"markdownIt-Anchor\" href=\"#pathtraversestate\">#</a> path.traverse<state></h3>\n<blockquote>\n<p>注意： path.traverse !== traverse</p>\n</blockquote>\n<p>在  <code>path.traverse</code>  方法中， <code>state</code>  参数是一个对象，用于在遍历过程中保存和传递状态信息。你可以在访问器函数中使用  <code>state</code>  对象来存储和更新任何你需要的信息。<br>\n <code>state</code>  对象在遍历开始时由  <code>path.traverse</code>  方法创建并传递给每个访问器函数。你可以在访问器函数中修改  <code>state</code>  对象，以跟踪遍历过程中的状态。这些修改将在遍历过程中保留下来，并且在访问器函数之间共享。<br>\n以下是一个示例，展示了如何在  <code>path.traverse</code>  中使用  <code>state</code>  对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(code);</span><br><span class=\"line\"><span class=\"keyword\">let</span> state = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitors = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">enter</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在进入节点之前进行操作</span></span><br><span class=\"line\">      state.<span class=\"property\">counter</span>++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在离开节点之后进行操作</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;遍历了&quot;</span>, state.<span class=\"property\">counter</span>, <span class=\"string\">&quot;个节点&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(visitors, state);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们创建了一个包含  <code>counter</code>  属性的  <code>state</code>  对象，并在  <code>enter</code>  和  <code>exit</code>  访问器中使用它来跟踪遍历的节点数量。在遍历开始时，我们将  <code>state</code>  对象作为第三个参数传递给  <code>path.traverse</code>  方法。然后，在每个访问器函数中，我们都可以使用和修改  <code>state</code>  对象。在  <code>enter</code>  访问器中，我们增加了  <code>counter</code>  的值；在  <code>exit</code>  访问器中，我们打印了遍历的节点数量。<br>\n通过使用  <code>state</code>  对象，你可以在遍历过程中跟踪和存储任何你需要的信息，并在访问器函数中进行相应的操作。</p>\n<blockquote>\n<p>注意 traverse 并没有 state 参数</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697874762901-eefdfac9-151e-4c07-9505-60de6509089a.png#averageHue=%233b4045&amp;clientId=uf5705079-0976-4&amp;from=paste&amp;height=375&amp;id=u7a4f70bc&amp;originHeight=562&amp;originWidth=502&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=55333&amp;status=done&amp;style=none&amp;taskId=ub8b35eda-7f71-401f-92d4-b7933928ffd&amp;title=&amp;width=334.6666666666667\" alt=\"image.png\"></p>\n<h3 id=\"babelgeneratoroptions\"><a class=\"markdownIt-Anchor\" href=\"#babelgeneratoroptions\">#</a> babel/generator<options></h3>\n<p><code>babel/generator</code>  的  <code>options</code>  参数包括以下几种：</p>\n<ul>\n<li><code>filename</code> : 字符串，指定正在生成的文件的路径。</li>\n<li><code>sourceMap</code> : 可选，是一个布尔值，指示是否生成 source map。</li>\n<li><code>sourceMapName</code> : 可选，是一个字符串或函数，指定生成的 source map 的名称。</li>\n<li><code>sourceFileName</code> : 可选，是一个字符串或函数，指定源文件的名称。</li>\n<li><code>sourceRoot</code> : 可选，是一个字符串或函数，指定源文件的根目录。</li>\n<li><code>moduleRoot</code> : 可选，是一个字符串或函数，指定模块的根目录。</li>\n<li><code>moduleId</code> : 可选，是一个字符串或函数，指定生成的模块的 ID。</li>\n<li><code>looseModules</code> : 可选，是一个布尔值，指示是否使用 loose 模块模式。</li>\n<li><code>esModules</code> : 可选，是一个布尔值，指示是否使用 ES6 模块。</li>\n<li><code>sourceType</code> : 可选，是一个字符串或函数，指定源代码的类型（例如 “script” 或 “module”）。</li>\n<li><code>requires</code> : 可选，是一个数组，包含需要生成的 require 语句。</li>\n<li><code>plugins</code> : 可选，是一个数组，包含要应用的插件。</li>\n<li><code>retainLines</code> : 可选，是一个布尔值，指示是否保留行号。</li>\n<li><code>comments</code> : 可选，是一个布尔值或函数，指示是否保留注释。</li>\n<li><code>compact</code> : 可选，“auto” 或 “true” 表示启用压缩；“false” 表示禁用压缩；“true” 表示在压缩时忽略一些不必要的空白符；“紊” 表示在压缩时保留所有空白符。</li>\n<li><code>minified</code> : 可选，是一个布尔值，指示是否启用最小化。</li>\n<li><code>uglify</code> : 可选，是一个布尔值或对象，指示是否启用 UglifyJS 风格的压缩。</li>\n<li><code>beautify: true</code>  可选，启用美化输出。</li>\n<li><code>asciiOnly</code> : 可选，一个布尔值，指示是否将 Unicode 字符转换为 ASCII 字符。</li>\n<li><code>quoteKeys</code> : 可选，一个布尔值，指示是否在对象字面量中保留键名。</li>\n</ul>\n",
            "tags": [
                "AST"
            ]
        }
    ]
}