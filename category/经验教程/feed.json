{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog • All posts by \"经验教程\" category",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/38694.html",
            "url": "https://haysalan.github.io/posts/38694.html",
            "title": "Build Nodejs 环境配置",
            "date_published": "2024-01-03T07:34:02.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>对于 js 补浏览器环境时遇到一些 js 无法实现的环境，那么就需要修改 node 源码来实现，本文简单复述一下 Build Node 所需要的环境及配置，推荐直接看<a href=\"https://github.com/nodejs/node/blob/HEAD/BUILDING.md\">官方文档</a>。</p>\n<h1 id=\"windows-1011\"><a class=\"markdownIt-Anchor\" href=\"#windows-1011\">#</a> windows 10/11</h1>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<blockquote>\n<p><a href=\"https://github.com/nodejs/node/blob/main/BUILDING.md#windows\">windows 部分官方教程（推荐）</a></p>\n</blockquote>\n<h3 id=\"一-python-环境\"><a class=\"markdownIt-Anchor\" href=\"#一-python-环境\">#</a> 一、Python 环境</h3>\n<p>安装好 python 并且配置环境变量，官网下载（<a href=\"https://www.python.org/downloads/\">点击下载</a>）我使用的版本是 3.8.0，低版本不知道是否可用，如果第一次安装 Python 建议安装 3.8.0 及以上。<br>\n如果下载速度慢，可点击<a href=\"https://surans.lanzouw.com/b00y05wvi\">链接（密码：h85c）</a>下载我拷贝到蓝奏云文件。</p>\n<h3 id=\"二-visual-studio-installer\"><a class=\"markdownIt-Anchor\" href=\"#二-visual-studio-installer\">#</a> <strong>二、Visual Studio Installer</strong></h3>\n<p><strong>安装 C++/.NET 环境有两个可选方案</strong> 1. 安装<a href=\"https://visualstudio.microsoft.com/downloads/\"> Visual Studio 2022</a> 并且勾选 “使用 C++ 进行桌面开发” 和 “.NET 桌面生成工具” 进行环境安装。(推荐)<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704271697464-b1f8bde9-2952-4f6c-91a2-87734409773a.png#averageHue=%23f6f6f6&amp;clientId=u118ac858-2e95-4&amp;from=paste&amp;height=226&amp;id=ua286dd38&amp;originHeight=339&amp;originWidth=623&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=30683&amp;status=done&amp;style=none&amp;taskId=u7d40a80e-757a-42f1-b4c2-e59071004fb&amp;title=&amp;width=415.3333333333333\" alt=\"image.png\"></p>\n<p>2. 安装<a href=\"https://aka.ms/vs/17/release/vs_buildtools.exe\">构建工具</a>打开后自动安装 “C++ 构建工具” 环境等待安装完成后打开 <strong>Visual Studio Installer</strong> 勾选 “.NET 桌面生成工具” 进行环境安装。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704270358817-7e442e02-b5b5-4901-82d1-525aa2c60c9c.png#averageHue=%23f4f4f4&amp;clientId=ud662e875-ea93-4&amp;from=paste&amp;height=282&amp;id=u6feb1e41&amp;originHeight=423&amp;originWidth=720&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17211&amp;status=done&amp;style=none&amp;taskId=u6d5b157d-079c-40a7-815a-a6b0a00aacb&amp;title=&amp;width=480\" alt=\"image.png\"></p>\n<h3 id=\"三-netwide-汇编程序\"><a class=\"markdownIt-Anchor\" href=\"#三-netwide-汇编程序\">#</a> 三、NetWide 汇编程序</h3>\n<p>点击<a href=\"https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc6/win64/\">这里</a>下载后安装即可，安装是一直点 next 即可。<br>\n我安装的版本是<a href=\"https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc6/win64/nasm-2.16.02rc6-installer-x64.exe\"> nasm-2.16.02rc6</a>，其他版本选择点击<a href=\"https://www.nasm.us/pub/nasm/releasebuilds\">这里</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704272184220-9e9a3c78-f713-4c5e-ac47-d953d32b9b6c.png#averageHue=%23f8f0ef&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=98&amp;id=u873f167a&amp;originHeight=147&amp;originWidth=1018&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=35233&amp;status=done&amp;style=none&amp;taskId=uf20b23dd-d83a-4aad-8df8-6167647b80a&amp;title=&amp;width=678.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"下载-node-源码\"><a class=\"markdownIt-Anchor\" href=\"#下载-node-源码\">#</a> 下载 Node 源码</h2>\n<p>官方教程使用 Git Bash 来进行下载，<a href=\"https://git-scm.com/download/win\"> Git for Windows</a> 下载安装。记得配置环境变量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/nodejs/node.git</span><br><span class=\"line\">cd node</span><br></pre></td></tr></table></figure>\n<p>由于 node 源码 400m 比较大，我选择进入<a href=\"https://nodejs.org/en/download/\"> Nodejs 官网</a>进行源码下载，当然使用你喜欢的方式即可。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704273537999-f71a2be0-54f9-463b-aa21-aa82b1e13aaf.png#averageHue=%23faf9f9&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=705&amp;id=u94fc557b&amp;originHeight=1057&amp;originWidth=1791&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=149833&amp;status=done&amp;style=none&amp;taskId=u7d9819c3-fefa-4269-bb68-5450930f849&amp;title=&amp;width=1194\" alt=\"image.png\"></p>\n<h2 id=\"build-node\"><a class=\"markdownIt-Anchor\" href=\"#build-node\">#</a> Build Node</h2>\n<p>进入到 node 源码根目录，例如我这里需要进入到 <code>nodes/node-v20.10.0</code> <br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704272480903-a4072940-1d9a-4ae7-a0da-3b8b34a56cfc.png#averageHue=%232a2c2f&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=564&amp;id=ue8b55729&amp;originHeight=846&amp;originWidth=847&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=73957&amp;status=done&amp;style=none&amp;taskId=u6a26f812-9cf3-4eac-88af-a8bd2d93d79&amp;title=&amp;width=564.6666666666666\" alt=\"image.png\"></p>\n<p><strong>开始构建</strong></p>\n<blockquote>\n<p>构建后会在<strong> Release</strong> 文件夹下生成构建好的<strong> node.exe</strong> 文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\vcbuild</span><br></pre></td></tr></table></figure>\n<p><strong>进行测试</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\vcbuild test</span><br></pre></td></tr></table></figure>\n<p><strong>测试 Node.js 是否正确构建</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release\\node -e &quot;console.log(&#x27;Hello from Node.js&#x27;, process.version)&quot;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "nodejs",
                "build"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/60184.html",
            "url": "https://haysalan.github.io/posts/60184.html",
            "title": "学习逆向过程中的一些问题与其解决办法",
            "date_published": "2023-12-25T08:59:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>学习逆向过程中的一些问题与其解决办法，当然还有大佬们文章内提到的，整理出来方便翻阅，持续更新。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip key %&#125;当然大家有什么问题也可在下方评论，如有解决本文问题的方法还请不吝赐教，在此感谢鞠躬！&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_38851536/category_11102404.html?spm=1001.2014.3001.5482\">白龙 - SO 逆向实战十三篇</a></li>\n</ul>\n<h1 id=\"资源工具\"><a class=\"markdownIt-Anchor\" href=\"#资源工具\">#</a> 资源工具</h1>\n<ul>\n<li><a href=\"https://gchq.github.io/CyberChef\">CyberChef - 用于加密，编码，压缩和数据分析</a></li>\n<li><a href=\"https://armconverter.com/\">armconverter - ARM-HEX 转换器</a></li>\n<li><a href=\"https://github.com/r0ysue/r0capture\">r0capture - 安卓应用层抓包通杀脚本</a></li>\n<li><a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\">ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a></li>\n<li><a href=\"https://github.com/Pr0214/findhash\">findhash - IDA 脚本 可以检测出哈希算法</a></li>\n<li><a href=\"https://github.com/sml2h3/ddddocr\">ddddocr - Python 库 通用验证码识别库</a></li>\n</ul>\n<h1 id=\"ida\"><a class=\"markdownIt-Anchor\" href=\"#ida\">#</a> IDA</h1>\n<h2 id=\"通过-jni_onload-定位-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#通过-jni_onload-定位-native-函数\">#</a> 通过 JNI_OnLoad 定位 Native 函数</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip info %&#125;仅限没有经过混淆或加密处理的样本&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550232510-9c4a4843-75f5-4fce-a183-770783c0dddb.gif#averageHue=%23f6f6f5&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u5aefa470&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=792808&amp;status=done&amp;style=none&amp;taskId=u3e2d9528-de56-415e-9185-2b963fb96eb&amp;title=\" alt=\"PixPin_2023-12-14_18-32-47.gif\"></p>\n<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<h2 id=\"python-能不能调用-so-文件的-native-方法\"><a class=\"markdownIt-Anchor\" href=\"#python-能不能调用-so-文件的-native-方法\">#</a> Python 能不能调用 so 文件的 Native 方法？</h2>\n<p>Python 也有类似 Unidbg 的工具<a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\"> ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a>，但是仅限于对<strong> JAVA 层的交互极少</strong>，一旦涉及到 JNI 交互，则需要果断选择 Unidbg，在 Python 中补 JAVA 的逻辑，简直不是人该受的委屈。</p>\n<h1 id=\"密码学\"><a class=\"markdownIt-Anchor\" href=\"#密码学\">#</a> 密码学</h1>\n<h2 id=\"加密算法大概率是开源或者魔改算法有没有快速验证的方法\"><a class=\"markdownIt-Anchor\" href=\"#加密算法大概率是开源或者魔改算法有没有快速验证的方法\">#</a> 加密算法大概率是开源或者魔改算法有没有快速验证的方法？</h2>\n<p>当在分析过程中有猜测或怀疑是某加密算法时可以使用类似<a href=\"https://github.com/Pr0214/findhash\"> findhash - IDA 脚本 可以检测出哈希算法</a>的脚本，此脚本可检测无论是否魔改常数的 hash 算法 MD5，SHA1、SHA2。</p>\n<h1 id=\"汇编指令\"><a class=\"markdownIt-Anchor\" href=\"#汇编指令\">#</a> 汇编指令</h1>\n<h2 id=\"arm32-有-thumb-和-arm-两种指令模式如何确定\"><a class=\"markdownIt-Anchor\" href=\"#arm32-有-thumb-和-arm-两种指令模式如何确定\">#</a> ARM32 有 Thumb 和 ARM 两种指令模式如何确定？</h2>\n<p>最粗暴的方式就是试错法 module.callFunction 时不加 1 会报错非法指令则表示是 Thumb 模式<br>\n第二个办法是从知识角度出发，ARM 模式指令总是 4 字节长度，Thumb 指令长度多数为 2 字节，少部分指令是 4 字节。</p>\n<h1 id=\"unidbg\"><a class=\"markdownIt-Anchor\" href=\"#unidbg\">#</a> Unidbg</h1>\n<h2 id=\"unidbg-的-jnionload-加载出的类是乱码\"><a class=\"markdownIt-Anchor\" href=\"#unidbg-的-jnionload-加载出的类是乱码\">#</a> Unidbg 的 Jnionload 加载出的类是乱码？</h2>\n<p>so 做了字符串的混淆或加密，以此来对抗分析人员，但字符串总是要解密的，不然怎么用呢？这个解密一般发生在 Init array 节或者 JNI OnLoad 中，又或者是该字符串使用前的任何一个时机</p>\n<h2 id=\"对虚拟内存进行修改\"><a class=\"markdownIt-Anchor\" href=\"#对虚拟内存进行修改\">#</a> 对虚拟内存进行修改</h2>\n<p>Unidbg 提供了两种方法打 Patch，简单的需求可以调用 Unicorn 对虚拟内存进行修改，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void patchVerify()&#123;</span><br><span class=\"line\">    int patchCode = 0x4FF00100; //</span><br><span class=\"line\">    emulator.getMemory().pointer(module.base + 0x1E86).setInt(0,patchCode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning %&#125;需要注意的是，这儿地址可别+1了，Thumb的+1只在运行和Hook时需要考虑，打Patch可别想。&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补环境怎么补补什么\"><a class=\"markdownIt-Anchor\" href=\"#补环境怎么补补什么\">#</a> 补环境怎么补补什么？</h2>\n<p>我们既可以根据报错提示，在 AbstractJni 对应的函数体内，依葫芦画瓢，case &quot;xxx“。<br>\n也可以在我们的 zuiyou 类中补，因为 zuiyou 类继承了 AbstractJNI。<br>\n关于补法，有两种实践方法都很有道理</p>\n<ul>\n<li>全部在用户类中补，防止项目迁移或者 Unidbg 更新带来什么问题，这样做代码的移植性比较好。</li>\n<li>自定义 JAVA 方法在用户类中补，通用的方法在 AbstractJNI 中补，这样做的好处是，之后运行的项目如果调用通用方法，就不用做重复的修补工作。</li>\n</ul>\n<h2 id=\"如何主动调用一个-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#如何主动调用一个-native-函数\">#</a> 如何主动调用一个 Native 函数</h2>\n<p>在 Frida 中可以使用 NativeFunction API 主动调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function call_65540(base_addr)&#123;</span><br><span class=\"line\">    // 函数在内存中的地址</span><br><span class=\"line\">    var real_addr = base_addr.add(0x65541)</span><br><span class=\"line\">    var md5_function = new NativeFunction(real_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;int&quot;, &quot;pointer&quot;])</span><br><span class=\"line\">    // 参数1 明文字符串的指针</span><br><span class=\"line\">    var input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    var arg1 = Memory.allocUtf8String(input);</span><br><span class=\"line\">    // 参数2 明文长度</span><br><span class=\"line\">    var arg2 = input.length;</span><br><span class=\"line\">    // 参数3，存放结果的buffer</span><br><span class=\"line\">    var arg3 = Memory.alloc(16);</span><br><span class=\"line\">    md5_function(arg1, arg2, arg3);</span><br><span class=\"line\">    console.log(hexdump(arg3,&#123;length:0x10&#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function callMd5()&#123;</span><br><span class=\"line\">    // 确定SO 的基地址</span><br><span class=\"line\">    var base_addr = Module.findBaseAddress(&quot;libnet_crypto.so&quot;);</span><br><span class=\"line\">    call_65540(base_addr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// frida -UF -l path\\hookright.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Unidbg 也是类似的，只不过换一下 API 罢了，让我们来看一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void callMd5()&#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg1</span><br><span class=\"line\">    String input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    // malloc memory</span><br><span class=\"line\">    MemoryBlock memoryBlock1 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    // get memory pointer</span><br><span class=\"line\">    UnidbgPointer input_ptr=memoryBlock1.getPointer();</span><br><span class=\"line\">    // write plainText on it</span><br><span class=\"line\">    input_ptr.write(input.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg2</span><br><span class=\"line\">    int input_length = input.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg3 -- buffer</span><br><span class=\"line\">    MemoryBlock memoryBlock2 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    UnidbgPointer output_buffer=memoryBlock2.getPointer();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 填入参入</span><br><span class=\"line\">    list.add(input_ptr);</span><br><span class=\"line\">    list.add(input_length);</span><br><span class=\"line\">    list.add(output_buffer);</span><br><span class=\"line\">    // run</span><br><span class=\"line\">    module.callFunction(emulator, 0x65540 + 1, list.toArray());</span><br><span class=\"line\"></span><br><span class=\"line\">    // print arg3</span><br><span class=\"line\">    Inspector.inspect(output_buffer.getByteArray(0, 0x10), &quot;output&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要注意，在 Unidbg 中，同样的功能有至少两种实现和写法 ——Unicorn 的原生方法以及 Unidbg 封装后的方法，在阅读别人代码时需要灵活变通。就好比 <strong>getR0long</strong> 和<strong> emulator.getBackend ().reg_read (ArmConst.UC_ARM_REG_R0)</strong>，它们都是获取寄存器 R0 的数值。</p>\n<h2 id=\"jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\">#</a> JNItrace trace 我们在参数还没完全转换完的情况下，Unidbg 就退出了</h2>\n<p>这种情况下，可能的原因有很多，但可能性较大的是两个</p>\n<ul>\n<li>上下文环境缺失</li>\n<li>样本使用某种手段检测或反制了 Unidbg</li>\n</ul>\n<p>先看一下是否是上下文的问题，假设是上下文缺失，通俗的讲就是在 SO 加载后到我们的 main 函数调用前的这段时间里，样本需要调用一些函数对 SO 进行初始化，而我们没有注意也没做这个事，这导致了 Unidbg 无法顺利运行。</p>\n<h1 id=\"抓包\"><a class=\"markdownIt-Anchor\" href=\"#抓包\">#</a> 抓包</h1>\n<h2 id=\"对于服务器校验证书如何抓包\"><a class=\"markdownIt-Anchor\" href=\"#对于服务器校验证书如何抓包\">#</a> 对于服务器校验证书如何抓包？</h2>\n<p>安卓可以使用<a href=\"https://github.com/r0ysue/r0capture\"> r0capture - 安卓应用层抓包通杀脚本</a>进行抓包分析。</p>\n<h1 id=\"验证码\"><a class=\"markdownIt-Anchor\" href=\"#验证码\">#</a> 验证码</h1>\n<h2 id=\"遇到验证码验证怎么办\"><a class=\"markdownIt-Anchor\" href=\"#遇到验证码验证怎么办\">#</a> 遇到验证码验证怎么办？</h2>\n<p>可以使用<a href=\"https://github.com/sml2h3/ddddocr\"> ddddocr - Python 库 通用验证码识别库</a>进行识别，支持老版验证码，当前验证码支持部分滑块文字点选等。</p>\n",
            "tags": [
                "思路"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/42317.html",
            "url": "https://haysalan.github.io/posts/42317.html",
            "title": "android证书安装与校验相关解决办法",
            "date_published": "2023-12-25T06:17:05.000Z",
            "content_html": "<h1 id=\"android-安装证书\"><a class=\"markdownIt-Anchor\" href=\"#android-安装证书\">#</a> Android 安装证书</h1>\n<h2 id=\"magisk-安装证书插件推荐\"><a class=\"markdownIt-Anchor\" href=\"#magisk-安装证书插件推荐\">#</a> Magisk 安装证书插件（推荐）</h2>\n<p>Magisk 中安装插件并<strong>重启</strong>，在手机<strong>设置</strong>安全中<strong>正常手动安装</strong>证书至<strong>用户证书</strong>，接着<strong>重启</strong>手机用户证书则会<strong>移动至系统</strong>证书。<br>\n<a href=\"https://www.yuque.com/attachments/yuque/0/2023/zip/26634545/1703485160886-247fbe50-2bba-4cc0-a497-de50d632fce2.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fzip%2F26634545%2F1703485160886-247fbe50-2bba-4cc0-a497-de50d632fce2.zip%22%2C%22name%22%3A%22Move_Certificates-v1.9.zip%22%2C%22size%22%3A6632%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u5964d71d-391f-441d-b906-9b9861b2cf1%22%2C%22taskType%22%3A%22transfer%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22G2ubz%22%2C%22card%22%3A%22file%22%7D\">Move_Certificates-v1.9.zip</a></p>\n<h2 id=\"shell-命令安装\"><a class=\"markdownIt-Anchor\" href=\"#shell-命令安装\">#</a> Shell 命令安装</h2>\n<p><strong>操作证书相关命令</strong>（kali 自带 openssl）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看crt\\der格式证书</span></span><br><span class=\"line\">openssl x509 -in FiddlerRoot.crt -inform DER -noout -text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看pem证书</span></span><br><span class=\"line\">openssl x509 -in certificate.pem -inform pem -noout -text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">crt/der转pem</span></span><br><span class=\"line\">openssl x509 -in FiddlerRoot.crt -inform DER -out certificate.pem -outform PEM</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">pem转der/crt</span></span><br><span class=\"line\">openssl x509 -in certificate.pem -inform PEM -out FiddlerRoot.der -outform DER</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">计算pem证书<span class=\"built_in\">hash</span>值</span></span><br><span class=\"line\">openssl x509 -subject_hash_old -in Desktop.pem</span><br></pre></td></tr></table></figure>\n<p>导入到系统前需要<strong>重命名</strong>证书 <strong>hash 值.0 -&gt; xxxx.0</strong>。如果存在文件名<strong>冲突</strong>，则可将 <code>.0</code>  改为 <code>.1</code>  或 <code>.2</code>  等等。<br>\n<strong>新开</strong>一个 <code>cmd</code>  执行以下命令</p>\n<blockquote>\n<p><strong>hash</strong> 值通过<strong> pem</strong> 证书计算得到（上面最后一条指令）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push xxxxxxx.0 /system/etc/security/cacerts/</span><br><span class=\"line\">adb shell</span><br><span class=\"line\">cd /system/etc/security/cacerts/</span><br><span class=\"line\">chmod 644 xxxxxxx.0</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "证书",
                "magisk"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/45467.html",
            "url": "https://haysalan.github.io/posts/45467.html",
            "title": "android逆向分析环境配置",
            "date_published": "2023-12-20T02:49:06.000Z",
            "content_html": "<h1 id=\"资源文件\"><a class=\"markdownIt-Anchor\" href=\"#资源文件\">#</a> 资源文件</h1>\n<p><a href=\"https://www.yuque.com/attachments/yuque/0/2023/zip/26634545/1703052470975-a479d323-df18-42ff-853f-276c2131959a.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fzip%2F26634545%2F1703052470975-a479d323-df18-42ff-853f-276c2131959a.zip%22%2C%22name%22%3A%22adb-fastboot.zip%22%2C%22size%22%3A3765786%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u7cda5742-2eb3-451d-b580-34c5f297476%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22KebVn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">adb-fastboot.zip</a></p>\n<h1 id=\"获取-root-权限\"><a class=\"markdownIt-Anchor\" href=\"#获取-root-权限\">#</a> 获取 root 权限</h1>\n<h2 id=\"magisk\"><a class=\"markdownIt-Anchor\" href=\"#magisk\">#</a> Magisk</h2>\n<p>magisk 中文网：<a href=\"https://magiskcn.com/\">https://magiskcn.com/</a><br>\nmagisk 官网：<a href=\"https://magiskmanager.com/\">https://magiskmanager.com/</a></p>\n<h3 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h3>\n<ul>\n<li>解锁 Bootloader</li>\n<li>提取 boot.img (卡刷包中有)</li>\n<li>PC 端<strong> adb-fastboot</strong> 环境</li>\n</ul>\n<p>修补 boot.img<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1703052109455-296af09d-fccf-4099-82e3-7dae58f608de.gif#averageHue=%23eeedee&amp;clientId=ue2fcaaf7-e91c-4&amp;from=drop&amp;id=ude4dd989&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=4240369&amp;status=done&amp;style=none&amp;taskId=u50b904ac-b0b4-4a7d-ad2f-b12e0d4fe07&amp;title=\" alt=\"PixPin_2023-12-20_09-51-40.gif\"></p>\n<h1 id=\"安装证书\"><a class=\"markdownIt-Anchor\" href=\"#安装证书\">#</a> 安装证书</h1>\n<p>安装证书详细步骤：<a href=\"/posts/42317.html\">android 证书安装与校验相关解决办法</a></p>\n<h1 id=\"问题记录\"><a class=\"markdownIt-Anchor\" href=\"#问题记录\">#</a> 问题记录</h1>\n<h2 id=\"小米-8-写入-boot-报错\"><a class=\"markdownIt-Anchor\" href=\"#小米-8-写入-boot-报错\">#</a> 小米 8 写入 boot 报错</h2>\n<h3 id=\"write-to-device-failed-invalid-argument\"><a class=\"markdownIt-Anchor\" href=\"#write-to-device-failed-invalid-argument\">#</a> Write to device failed (Invalid argument)</h3>\n<p>报错详情 -&gt;** **<a href=\"https://blog.csdn.net/qq_39441603/article/details/124679556\"> 原文地址</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\user\\Downloads\\adb-fastboot&gt;fastboot flash boot magisk_patched-26400_QSOWo.img</span><br><span class=\"line\">Warning: skip copying boot image avb footer (boot partition size: 0, boot image size: 45851946).</span><br><span class=\"line\">Sending &#x27;boot&#x27; (44777 KB)                          FAILED (Write to device failed (Invalid argument))</span><br><span class=\"line\">fastboot: error: Command failed</span><br></pre></td></tr></table></figure>\n<p>新建文件 <code>txt</code>  文件粘贴代码块内容，保存后修改后缀为 <code>bat</code> ，以管理员方式运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;osvc&quot; /t REG_BINARY /d &quot;0000&quot; /f</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;SkipContainerIdQuery&quot; /t REG_BINARY /d &quot;01000000&quot; /f</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;SkipBOSDescriptorQuery&quot; /t REG_BINARY /d &quot;01000000&quot; /f</span><br><span class=\"line\"></span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<p>执行完后，执行写入 boot 成功。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1703040985764-924bd56a-4821-4b6f-afc5-67df9f4fe391.png#averageHue=%231d1d1d&amp;clientId=ucd4155a3-2258-4&amp;from=paste&amp;height=82&amp;id=u3ba72421&amp;originHeight=123&amp;originWidth=1140&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19723&amp;status=done&amp;style=none&amp;taskId=uff1395f0-22ae-459a-967d-4eadd322f82&amp;title=&amp;width=760\" alt=\"image.png\"></p>\n",
            "tags": [
                "magisk",
                "andorid",
                "fastboot",
                "root"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/8117.html",
            "url": "https://haysalan.github.io/posts/8117.html",
            "title": "Frida三板斧的安装配置与基本使用",
            "date_published": "2023-12-18T07:59:47.000Z",
            "content_html": "<h1 id=\"frida\"><a class=\"markdownIt-Anchor\" href=\"#frida\">#</a> Frida</h1>\n<p>面向开发人员、逆向工程师和安全研究人员的动态检测工具包。<br>\nfrida 文档：<a href=\"https://frida.re/docs/home/\">https://frida.re/docs/home/</a></p>\n<h2 id=\"对应版本\"><a class=\"markdownIt-Anchor\" href=\"#对应版本\">#</a> 对应版本</h2>\n<p>frida&amp;frida-tools 版本对应查看 ：<a href=\"https://github.com/frida/frida/releases\">frida-releases</a><br>\n 找到你使用 frida 的版本，查看其版本下<strong> frida-tools</strong> 的版本，它们就是对应版本。（建议多准备几个 Python 与 firda 的版本，因为它并不稳定）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install frida==14.2.13</span><br><span class=\"line\">pip install frida-tools==9.2.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702889862515-455c0fb7-9dc7-4854-a6d6-c94c36b24e9e.gif#averageHue=%23fcfbfb&amp;clientId=ua9a61f28-e353-4&amp;from=drop&amp;id=u694dfb9e&amp;originHeight=1363&amp;originWidth=2038&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=5812512&amp;status=done&amp;style=none&amp;taskId=u5b43f4cc-ded4-442f-9e7d-b7f790a8823&amp;title=\" alt=\"PixPin_2023-12-18_16-57-12.gif\"></p>\n<h2 id=\"frida-server\"><a class=\"markdownIt-Anchor\" href=\"#frida-server\">#</a> frida-server</h2>\n<p>安卓手机需要安装 frida-server，版本与 frida<strong> 版本需一致</strong>，根据<strong>设备架构</strong>选择 x86 或 arm 等。<br>\n<strong>解压文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7x x frida-server.xz</span><br></pre></td></tr></table></figure>\n<p><strong>启动 frida-server</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb root</span><br><span class=\"line\">adb push frida-server /data/local/tmp/</span><br><span class=\"line\">adb shell &quot;chmod 755 /data/local/tmp/frida-server&quot;</span><br><span class=\"line\">adb shell &quot;/data/local/tmp/frida-server&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>测试服务</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida-ps -U  // 查看正在运行进程</span><br></pre></td></tr></table></figure>\n<p>显示如下内容则表示服务启动，手机<strong>重启</strong>后<strong>需</strong>要<strong>再次</strong>执行命令<strong>启动</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  PID NAME</span><br><span class=\"line\"> 1590 com.xxx.xxx</span><br><span class=\"line\">13194 com.xxxx.xxxxx</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida -FU packagename -l hookscript.js</span><br></pre></td></tr></table></figure>\n<h1 id=\"jnitrace\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace\">#</a> Jnitrace</h1>\n<p>JNItrace 是一个基于 Frida 框架的<strong> Hook jni</strong> 方法的库。<a href=\"https://github.com/chame1eon/jnitrace\">https://github.com/chame1eon/jnitrace</a><br>\nPython <strong>安装</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jnitrace   <span class=\"comment\">// 需要frida版本14以上</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a class=\"markdownIt-Anchor\" href=\"#依赖\">#</a> 依赖：</h2>\n<ul>\n<li>arm、arm64、x86 或 x64 Android 设备</li>\n<li>Frida 安装在 Android 设备上</li>\n<li>Frida 支持 &gt; 14</li>\n<li>使用 Python 3 和 pip 的 Linux、Mac 或 Windows 主机</li>\n</ul>\n<h2 id=\"启动命令\"><a class=\"markdownIt-Anchor\" href=\"#启动命令\">#</a> 启动命令：</h2>\n<p>两个参数分别为<strong>待分析的 SO</strong> 与<strong> APP 包名</strong>。-l 参数可以多次使用  <code>-l libname.so -l libname1.so ...</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<p>默认使用  <code>spawn</code>  启动，可以通过  <code>-m attach</code>  设置通过  <code>attach</code>  启。</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -m attach -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>&gt;&gt;</code>  导出 log 日志保存至文件，控制台将不输出 log。<br>\n例： <code>jnitrace -l libname packagename &gt;&gt; jnitrace.txt</code></p>\n</blockquote>\n<h1 id=\"objection\"><a class=\"markdownIt-Anchor\" href=\"#objection\">#</a> objection</h1>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>官方安装教程：<a href=\"https://github.com/sensepost/objection/wiki/Installation\">https://github.com/sensepost/objection/wiki/Installation</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U objection</span><br></pre></td></tr></table></figure>\n<p>在内存中所有已加载的类中搜索包含特定关键词的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking search classes</span><br></pre></td></tr></table></figure>\n<p>hook java 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class_method &lt;methodName&gt;</span><br></pre></td></tr></table></figure>\n<p>hook java 类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class &lt;classname&gt;</span><br></pre></td></tr></table></figure>\n<p>列出进程所有的 activity</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking list activities</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida",
                "jnitrace",
                "objection"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/41869.html",
            "url": "https://haysalan.github.io/posts/41869.html",
            "title": "Frida相关API介绍",
            "date_published": "2023-12-18T02:41:22.000Z",
            "content_html": "<h1 id=\"静态实例方法-hook\"><a class=\"markdownIt-Anchor\" href=\"#静态实例方法-hook\">#</a> 静态 &amp; 实例方法 Hook</h1>\n<p>静态和实例方法的 hook 代码一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> className = <span class=\"string\">&quot;com.xxxx.xx&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"string\">&quot;func&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(className);</span><br><span class=\"line\"><span class=\"comment\">// 静态和实例方法的hook代码一致</span></span><br><span class=\"line\">classObject[funcName].<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call <span class=\"subst\">$&#123;funcName&#125;</span> - param: `</span>, x);</span><br><span class=\"line\">  x = <span class=\"string\">&quot;param&quot;</span>; <span class=\"comment\">// 修改参数 除基础类型外其他类型需要自行构造。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"variable language_\">this</span>[funcName](x);</span><br><span class=\"line\">  <span class=\"comment\">// result = &quot;param&quot;;  // 修改返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造方法的-hook-init\"><a class=\"markdownIt-Anchor\" href=\"#构造方法的-hook-init\">#</a> 构造方法的 hook ($init)</h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.xxx.xx&quot;</span>);</span><br><span class=\"line\">classObject.<span class=\"property\">$init</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call $init - param: `</span>, a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.$init(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/43239.html",
            "url": "https://haysalan.github.io/posts/43239.html",
            "title": "charles移动&PC抓包配置",
            "date_published": "2023-12-14T05:59:32.000Z",
            "content_html": "<h1 id=\"安装-charles\"><a class=\"markdownIt-Anchor\" href=\"#安装-charles\">#</a> 安装 charles</h1>\n<p>官网下载：<a href=\"https://www.charlesproxy.com/download/\">https://www.charlesproxy.com/download/</a></p>\n<h1 id=\"电脑抓包\"><a class=\"markdownIt-Anchor\" href=\"#电脑抓包\">#</a> 电脑抓包</h1>\n<p>安装好证书，打开 charles 这开启端口抓包，可设置 PC 系统代理来抓包数据，但通常不推荐这么做，推荐使用<a href=\"https://microsoftedge.microsoft.com/addons/detail/fdbloeknjpnloaggplaobopplkdhnikc\"> Proxy SwitchyOmega</a> （Edge 插件 | chrome 也有此插件）来进行浏览器抓包。</p>\n<h2 id=\"代理设置\"><a class=\"markdownIt-Anchor\" href=\"#代理设置\">#</a> 代理设置</h2>\n<p>操作：Proxy -&gt; Proxy Settings 1. 勾选 Enable tranaparent HTTP proxying 2. 勾选 Enable SOCKS proxy</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702542982696-ff3a7b7a-cb54-45f2-9240-15a56ef773de.png#averageHue=%23eeedec&amp;clientId=u81dbcc76-2115-4&amp;from=paste&amp;height=466&amp;id=u1a21edff&amp;originHeight=699&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=39284&amp;status=done&amp;style=none&amp;taskId=u10dc5636-6596-47fb-a940-a83a8f00c23&amp;title=&amp;width=542\" alt=\"image.png\"></p>\n<h2 id=\"抓取端口设置\"><a class=\"markdownIt-Anchor\" href=\"#抓取端口设置\">#</a> 抓取端口设置</h2>\n<p>操作：Proxy -&gt; <a href=\"https://so.csdn.net/so/search?q=SSL&amp;spm=1001.2101.3001.7020\">SSL</a> Proxying Settings 1. 勾选 Enable SSL Proxying 2. 点击 Add，添加抓取端口</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702542919357-abd6010c-5334-4b49-9366-46eb366e5ad5.png#averageHue=%23ebeae9&amp;clientId=u81dbcc76-2115-4&amp;from=paste&amp;height=438&amp;id=u20559f8c&amp;originHeight=657&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=61836&amp;status=done&amp;style=none&amp;taskId=u63c04ad3-1aa3-44e5-a2e7-a9c0e2dda23&amp;title=&amp;width=542\" alt=\"image.png\"></p>\n<h2 id=\"安装证书\"><a class=\"markdownIt-Anchor\" href=\"#安装证书\">#</a> 安装证书</h2>\n<p>操作：Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate -&gt; 安装证书 -&gt; 本地计算机 -&gt; 将所有的证书都放入下列存储 -&gt; 点击浏览，选择” 受信任的根证书颁发机构” -&gt; 完成</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702542740132-c2b41f8f-4bd4-4534-9f3a-7bd6e3e3d394.gif#averageHue=%23efefeb&amp;clientId=u81dbcc76-2115-4&amp;from=drop&amp;id=ueca600f2&amp;originHeight=1197&amp;originWidth=1980&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=2581990&amp;status=done&amp;style=none&amp;taskId=u9846250a-e561-479a-bcd4-5d345d04fb2&amp;title=\" alt=\"PixPin_2023-12-14_16-31-31.gif\"></p>\n<h1 id=\"移动抓包\"><a class=\"markdownIt-Anchor\" href=\"#移动抓包\">#</a> 移动抓包</h1>\n<p>手机和 PC 处于同一网络下，将 charles<strong> 证书</strong>安装至<strong>系统</strong>（安卓 7 以下不用），配置<strong> WiFi 代理</strong>或者<strong> clash 代理转发</strong>，如此即可在 PC 上抓到手机流量包了。</p>\n<h2 id=\"安装证书-2\"><a class=\"markdownIt-Anchor\" href=\"#安装证书-2\">#</a> 安装证书</h2>\n<p>准备安装 android 证书，按照下方步骤，显示图片弹窗后进行下一步。<br>\n<strong>Help</strong>-&gt; <strong>SSL Proxying</strong> -&gt;<strong>Install Charles Root Certificate On a Mobile Device</strong>。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1703312970820-c7e0626a-d8c1-4be9-8f91-036c35357056.png#averageHue=%23e7e5e3&amp;clientId=uef12f301-3e43-4&amp;from=paste&amp;height=170&amp;id=u5cc1829c&amp;originHeight=255&amp;originWidth=814&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=26000&amp;status=done&amp;style=none&amp;taskId=ue3ce1d79-7a01-4302-af17-d1841650ceb&amp;title=&amp;width=542.6666666666666\" alt=\"image.png\"><br>\n 手机浏览器输入地址 <a href=\"http://chls.pro/ssl\">http://chls.pro/ssl</a> 下载 crt 证书<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702535270215-e71cd701-5988-4f3b-a89f-29b9bf53ed72.png#averageHue=%239a9ca4&amp;clientId=ufc930610-f89c-4&amp;from=paste&amp;height=819&amp;id=Mcxwp&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=103675&amp;status=done&amp;style=none&amp;taskId=ubec0b902-275a-48bc-a551-3a86ba9f403&amp;title=&amp;width=394\" alt=\"image.png\"></p>\n<p>安装证书详细步骤：<a href=\"/2023/12/20/yuque/android%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%A0%A1%E9%AA%8C%E7%9B%B8%E5%85%B3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">android 证书安装与校验相关解决办法</a></p>\n<h2 id=\"手动设置代理\"><a class=\"markdownIt-Anchor\" href=\"#手动设置代理\">#</a> 手动设置代理</h2>\n<p>代理主机：<strong>PC</strong> 的 IP 地址，我这里是<strong> WiFi</strong> 所以是<strong> WLAN</strong> 的<strong> IPv4</strong> 地址。<br>\n代理端口：<strong>charles -&gt; Proxy -&gt; ProxySettings -&gt; Proxies</strong> 页面中的 <strong>HTTP Proxy -&gt; Port</strong> ，<strong>默认</strong>为<strong> 8888</strong>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702535694493-ac598886-d284-4c1f-afe7-eb1f2442bc2f.png#averageHue=%23817e7d&amp;clientId=ufc930610-f89c-4&amp;from=paste&amp;height=741&amp;id=ue0569354&amp;originHeight=1111&amp;originWidth=1794&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=287946&amp;status=done&amp;style=none&amp;taskId=ue22ead4e-85ab-48ed-b5aa-d597a7d05af&amp;title=&amp;width=1196\" alt=\"image.png\"></p>\n<h2 id=\"clash-配置代理转发\"><a class=\"markdownIt-Anchor\" href=\"#clash-配置代理转发\">#</a> clash 配置代理转发</h2>\n<p>打开 clash 依次点击 <strong>配置 -&gt; 加号 -&gt; 文件 -&gt; 浏览文件 -&gt; 配置文件</strong>，选择 MT 管理器打开，将下面代码<strong>根据注释修改</strong>后粘贴进去，保存好，启动服务即可。（下方有操作 gif）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mixed-port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">global</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9090</span></span><br><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;proxy_http&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.199</span> <span class=\"comment\"># 代理主机</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8888</span> <span class=\"comment\"># http代理端口</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;proxy_socks5&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.199</span> <span class=\"comment\"># 代理主机</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8889</span> <span class=\"comment\"># socks代理端口</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">proxy-groups:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br></pre></td></tr></table></figure>\n<p>配置名称随意，启动后记得选择代理模式哦！<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702537855126-591ef863-1e1b-4d96-853a-69762b62290b.gif#averageHue=%23ecebec&amp;clientId=ufc930610-f89c-4&amp;from=drop&amp;id=u5fc3d2e3&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=3818248&amp;status=done&amp;style=none&amp;taskId=u4df31eeb-7401-42c3-95f4-02a5f80b311&amp;title=\" alt=\"PixPin_2023-12-14_15-10-03.gif\"></p>\n",
            "tags": [
                "charles",
                "抓包"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/50497.html",
            "url": "https://haysalan.github.io/posts/50497.html",
            "title": "TLS指纹-JA4",
            "date_published": "2023-10-21T01:31:26.000Z",
            "content_html": "<h2 id=\"官方解释\"><a class=\"markdownIt-Anchor\" href=\"#官方解释\">#</a> 官方解释</h2>\n<p>JA4 + 是一套易于使用和共享的网络指纹识别方法。这些方法既是人类可读的，也是机器可读的，以促进更有效的威胁搜寻和分析。这些指纹的用例包括扫描威胁参与者、恶意软件检测、会话劫持预防、合规性自动化、位置跟踪、DDoS 检测、威胁参与者分组、反向外壳检测等等。<br>\nJA4 系列 ：JA4/S/H/L/X/SSH，简称 JA4+<br>\n<a href=\"https://blog.foxio.io/ja4-network-fingerprinting-9376fe9ca637\"> 官方介绍</a> | <a href=\"https://github.com/FoxIO-LLC/ja4\">JA4 指纹</a></p>\n<p>初始指纹：<br>\nJA4 — TLS 客户端 JA4S — TLS 服务器响应<br>\n JA4H — HTTP 客户端</p>\n<p>JA4L — 光距离 / 位置<br>\n JA4X — X509 TLS 证书<br>\n JA4SSH — SSH 流量<br>\n更多指纹正在开发中，并将在发布时添加到 JA4+ 系列中。</p>\n<p>例子<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/webp/26634545/1697868649851-fc1d1b6c-4298-41cf-a8d5-28962645cc50.webp#averageHue=%23eaeaea&amp;clientId=ucffaa756-14f5-4&amp;from=ui&amp;id=u5b1e2317&amp;originHeight=496&amp;originWidth=614&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=40140&amp;status=done&amp;style=none&amp;taskId=ubf96421a-4174-421d-b1c4-b2abffba38f&amp;title=\" alt=\"1_ouP7r5IlQoTmameDpppq4g.webp\"></p>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "TLS/SSL",
                "JA4"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/1792.html",
            "url": "https://haysalan.github.io/posts/1792.html",
            "title": "TLS指纹-JA3",
            "date_published": "2023-10-21T00:38:54.000Z",
            "content_html": "<h2 id=\"官方解释\"><a class=\"markdownIt-Anchor\" href=\"#官方解释\">#</a> 官方解释</h2>\n<p>TLS 及其前身 SSL 用于为常见应用程序和恶意软件加密通信，以确保数据安全，因此可以隐藏在噪音中。要启动 TLS 会话，客户端将在 TCP 3 次握手之后发送 TLS 客户端 Hello 数据包。此数据包及其生成方式取决于构建客户端应用程序时使用的包和方法。服务器如果接受 TLS 连接，将使用基于服务器端库和配置以及 Client Hello 中的详细信息制定的 TLS Server Hello 数据包进行响应。由于 TLS 协商以明文形式传输，因此可以使用 TLS Client Hello 数据包中的详细信息来指纹和识别客户端应用程序。<br>\n<a href=\"https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/\">官方介绍</a> | <a href=\"https://github.com/FoxIO-LLC/ja3\">JA3 指纹</a></p>\n<h2 id=\"ja3-原理\"><a class=\"markdownIt-Anchor\" href=\"#ja3-原理\">#</a> JA3 原理</h2>\n<p>JA3 收集以下字段的字节的十进制值；SSL 版本、接受的密码、扩展列表、椭圆曲线和椭圆曲线格式。然后，它按顺序将这些值连接在一起，使用 “，” 分隔每个字段，使用 “-” 分隔每个字段中的每个值。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/webp/26634545/1697851217544-efd479ce-e2f9-4582-8895-e2efe95fe3f5.webp#averageHue=%23f0efee&amp;clientId=u9d6790ac-ed8c-4&amp;from=paste&amp;height=837&amp;id=u1dbfb620&amp;originHeight=1256&amp;originWidth=1354&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=594364&amp;status=done&amp;style=none&amp;taskId=u22261562-ea35-4516-8852-7a2c8ad84f0&amp;title=&amp;width=902.6666666666666\" alt=\"0_QZ7tsC7MAET5lbLP.webp\"><br>\n 字段顺序如下：<br>\nSSLVersion，密码，扩展，椭圆曲线，椭圆曲线点格式<br>\n例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0</span><br></pre></td></tr></table></figure>\n<p>如果客户端 Hello 中没有 SSL 扩展，则字段留空。<br>\n例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,4–5–10–9–100–98–3–6–19–18–99,,,</span><br></pre></td></tr></table></figure>\n<p>然后对这些字符串进行 MD5 哈希处理，以生成易于使用和共享的 32 个字符的指纹。这是 JA3 SSL 客户端指纹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0 → ada70206e40642a3e4461f35503241d5769,4–5–10–9–100–98–3–6–19–18–99,,,</span><br><span class=\"line\">→ de350869b8c85de67a350c8d186f11e6</span><br></pre></td></tr></table></figure>\n<p>我们还需要引入一些代码来解释 Google 的 GREASE（生成随机扩展和维持可扩展性），<a href=\"https://tools.ietf.org/html/draft-davidben-tls-grease-01\">如此处</a>所述。Google 将此用作防止 TLS 生态系统中扩展性失败的机制。JA3 完全忽略这些值，以确保使用 GREASE 的程序仍可以使用单个 JA3 哈希进行标识。</p>\n<h2 id=\"tls-检测判断\"><a class=\"markdownIt-Anchor\" href=\"#tls-检测判断\">#</a> TLS 检测判断</h2>\n<h3 id=\"tls-检测原理\"><a class=\"markdownIt-Anchor\" href=\"#tls-检测原理\">#</a> TLS 检测原理</h3>\n<blockquote>\n<p>抓包工具 wireshark、charles 只能查看 TLS 指纹，不能以此判断服务器检测了 TLS。</p>\n</blockquote>\n<p>在 HTTPS 协议中，TLS 协议是用来在客户端和服务器之间建立安全连接的，这个连接过程中就会生成 TLS 指纹。只要是 HTTPS 协议，必定会生成 TLS 指纹。<br>\n检测 TLS 是在服务端进行的，<strong>唯一</strong>判断是否检测 TLS 的手段就是<strong>测试</strong>和<strong>猜测</strong>。</p>\n<h3 id=\"未检测-tls\"><a class=\"markdownIt-Anchor\" href=\"#未检测-tls\">#</a> 未检测 TLS</h3>\n<ul>\n<li>验证请求头顺序</li>\n<li>检测 HTTP2.0</li>\n<li>curl 生成 code 可直接访问</li>\n<li>…</li>\n</ul>\n<h3 id=\"检测了-tls\"><a class=\"markdownIt-Anchor\" href=\"#检测了-tls\">#</a> 检测了 TLS</h3>\n<ul>\n<li>curl、api 调试工具、js 有可响应的就 python 不行。</li>\n<li>curl、js 都不行就浏览器可以。</li>\n<li>…</li>\n</ul>\n<h2 id=\"过校验示例\"><a class=\"markdownIt-Anchor\" href=\"#过校验示例\">#</a> 过校验示例</h2>\n<p>python 的 aiohttp | requests | httpx | scrapy 和 golang 相关的 ja3 指纹修改案例。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697867423544-d0cb481b-b803-4d8f-bc21-fec7ac4f18fd.png#averageHue=%23f4f2ef&amp;clientId=u44708746-5fd9-4&amp;from=paste&amp;height=101&amp;id=uc8e0d242&amp;originHeight=152&amp;originWidth=270&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=6334&amp;status=done&amp;style=none&amp;taskId=u48dd73f9-af7e-439c-8eae-ced91e6bee8&amp;title=&amp;width=180\" alt=\"image.png\"><br>\n 笔者整理的一些案例：<br>\n<a href=\"https://pan.baidu.com/s/1MEMMZTNg-6qmPrzprHVSVQ?pwd=k999\">JA3 指纹（go/python）点击下载</a></p>\n",
            "tags": [
                "TLS/SSL",
                "JA3"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/14781.html",
            "url": "https://haysalan.github.io/posts/14781.html",
            "title": "AST解混淆插件函数",
            "date_published": "2023-10-08T07:46:52.000Z",
            "content_html": "<p><strong>存在复用性的插件与函数，不定期补充。</strong></p>\n<h2 id=\"字面量解混淆\"><a class=\"markdownIt-Anchor\" href=\"#字面量解混淆\">#</a> 字面量解混淆</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> simplifyLiteral = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NumericLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/^0[obx]/i</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//特征匹配</span></span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">StringLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/\\\\[ux]/gi</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"规范块语句\"><a class=\"markdownIt-Anchor\" href=\"#规范块语句\">#</a> 规范块语句</h2>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>插件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BlockSyntax</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;ForStatement|WhileStatement|ForInStatement|ForOfStatement&quot;</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBlockStatement</span>(node.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">body</span> = types.<span class=\"title class_\">BlockStatement</span>([node.<span class=\"property\">body</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = [<span class=\"string\">&quot;consequent&quot;</span>, <span class=\"string\">&quot;alternate&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _path = path.<span class=\"title function_\">get</span>(nodes[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_path.<span class=\"property\">node</span> &amp;&amp; !_path.<span class=\"title function_\">isBlockStatement</span>()) &#123;</span><br><span class=\"line\">        _path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title class_\">BlockStatement</span>([_path.<span class=\"property\">node</span>]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/35002.html",
            "url": "https://haysalan.github.io/posts/35002.html",
            "title": "AST解混淆常用API介绍",
            "date_published": "2023-09-27T13:12:49.000Z",
            "content_html": "<p>注意：解混淆插件几乎不可能做到通用所有混淆，学习 ast 才能对混淆进行还原。</p>\n<h2 id=\"pathtypesnode的常用方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#pathtypesnode的常用方法介绍\">#</a> path/types (node) 的常用方法介绍</h2>\n<h3 id=\"查看节点的源代码\"><a class=\"markdownIt-Anchor\" href=\"#查看节点的源代码\">#</a> 查看节点的源代码</h3>\n<blockquote>\n<p>path.toString()<br>\ngenerator(node).code;</p>\n</blockquote>\n<p>获取 path 与 node 的源代码方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//babel库相关，解析，转换，构建，生产</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/types&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"comment\">// js源代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`let a = &quot;hi ast&quot;;`</span>;</span><br><span class=\"line\"><span class=\"comment\">//转换为ast树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取path源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;path.toString: &quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; node &#125; = path;</span><br><span class=\"line\">    <span class=\"comment\">// 获取node源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;generator: &quot;</span>, <span class=\"title function_\">generator</span>(node).<span class=\"property\">code</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; code &#125; = <span class=\"title function_\">generator</span>(ast, (opts = &#123; <span class=\"attr\">jsescOption</span>: &#123; <span class=\"attr\">minimal</span>: <span class=\"literal\">true</span> &#125; &#125;));</span><br><span class=\"line\"><span class=\"comment\">// 处理后的js源代码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(code);</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断节点类型\"><a class=\"markdownIt-Anchor\" href=\"#判断节点类型\">#</a> 判断节点类型</h3>\n<blockquote>\n<p>types.isVariableDeclarator(node,opts)<br>\npath.isVariableDeclarator(opts)</p>\n</blockquote>\n<p>下方 <code>&quot;FunctionDeclaration|FunctionExpression&quot;</code>  这样写可同时遍历当前两种或多种类型。<br>\n判断节点是否是需要处理的节点，下面例子中常用到的姿势都有提到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">var b = 0;</span></span><br><span class=\"line\"><span class=\"string\">const c = 2;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var e = function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tconsole.log(&#x27;ok&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|FunctionExpression&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// path方法可不传参数,默认为path.node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isFunctionExpression</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志1：&quot;</span>, path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用path方法,过滤let声明的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isVariableDeclaration</span>(&#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;let&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用types方法,过滤var声明的节点,第一个参数node必填</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isVariableDeclaration</span>(path.<span class=\"property\">node</span>, &#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志2：&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志<span class=\"number\">2</span>： <span class=\"keyword\">const</span> c = <span class=\"number\">2</span>;</span><br><span class=\"line\">日志<span class=\"number\">1</span>： <span class=\"keyword\">function</span> <span class=\"title function_\">d</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换节点\"><a class=\"markdownIt-Anchor\" href=\"#替换节点\">#</a> 替换节点</h3>\n<blockquote>\n<p>path.replaceInline(nodes)<br>\npath.replaceWithMultiple()<br>\npath.replaceWith()</p>\n</blockquote>\n<p>推荐使用 replacelnline 方法，它兼容其他两种方法，无脑使用 replacelnline 即可。<br>\ntypes.valueToNode 方法可以将基础值转换为对应节点。<br>\n下面这段插件可以将所有变量的值都变为 666。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">666</span>));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">666</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点删除\"><a class=\"markdownIt-Anchor\" href=\"#节点删除\">#</a> <strong>节点删除</strong></h3>\n<blockquote>\n<p>path.remove()</p>\n</blockquote>\n<p>该方法没有参数，可以将路径下的节点全部删除，使用请小心。<br>\n下面示例将变量名为 <code>a</code>  的 path 删除了，结果是删除了 <code>var a = 1;</code>  这行代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> != <span class=\"string\">&quot;a&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点插入\"><a class=\"markdownIt-Anchor\" href=\"#节点插入\">#</a> <strong>节点插入</strong></h3>\n<blockquote>\n<p>path.insertBefore (nodes) // 当前节点前插入<br>\n path.insertAfter (nodes) // 当前节点后插入</p>\n</blockquote>\n<p>什么地方可以插入节点？<br>\n一般在 [] 节点类型进行插入，你可以使用 Array 的方法来操作它，比如 <code>pop</code> 、 <code>push</code>  等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var b = 1;`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;b&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;a&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// types.Identifier(&quot;a&quot;) 生成Identifier类型节点 实参“a” 实际是 name = “a”</span></span><br><span class=\"line\">    <span class=\"comment\">// types.valueToNode  将值转换为节点</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(generator(node).code)</span></span><br><span class=\"line\">    path.<span class=\"property\">parent</span>.<span class=\"property\">declarations</span>.<span class=\"title function_\">unshift</span>(node); <span class=\"comment\">// 等价于  path.insertBefore(node);</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;c&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;d&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// insertBefore 和 insertAfter 都支持多个node</span></span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>([node1, node2]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2,</span><br><span class=\"line\">    d = 3;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取父节点\"><a class=\"markdownIt-Anchor\" href=\"#获取父节点\">#</a> 获取父节点</h3>\n<blockquote>\n<p>path.parent<br>\npath.parentPath</p>\n</blockquote>\n<p>path.parentPath 获取的是 path，path.parent 获取的是 node，他们的关系如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"property\">parent</span> = path.<span class=\"property\">parentPath</span>.<span class=\"property\">node</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取子孙节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子孙节点\">#</a> 获取子孙节点</h3>\n<blockquote>\n<p>path.get(key)</p>\n</blockquote>\n<p>形参 key 是一个字符串，也就是路径，以。隔开。<br>\n两种方式获取子节点。<br>\npath.get 获取的是 <code>path</code> ，需要 <code>.node</code>  获取节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">&quot;var b = 1;&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Program</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body.0.declarations.0&quot;</span>).<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = path.<span class=\"property\">node</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">declarations</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node1 === node2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟节点\">#</a> 获取兄弟节点</h3>\n<blockquote>\n<p>path.getPrevSibling () // 获取前一个兄弟节点<br>\n path.getAllPrevSiblings () // 获取所有的前兄弟节点<br>\n path.getNextSibling () // 获取后一个兄弟节点<br>\n path.getAllNextSiblings () // 获取所有的后兄弟节点</p>\n</blockquote>\n<p>获取的为 path，其中 getAllPrevSiblings，getAllNextSiblings 返回 path 列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = &quot;老大&quot;,b= &quot;老二&quot;, c =&quot;老三&quot;,d=&quot;老四&quot;,e=&quot;老五&quot;;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取前一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getPrevSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的前兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllPrevSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;当前节点是&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取后一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getNextSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的后兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllNextSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取前一个兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span></span><br><span class=\"line\">获取所有的前兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span>,a = <span class=\"string\">&quot;老大&quot;</span></span><br><span class=\"line\">当前节点是 c = <span class=\"string\">&quot;老三&quot;</span></span><br><span class=\"line\">获取后一个兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span></span><br><span class=\"line\">获取所有的后兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span>,e = <span class=\"string\">&quot;老五&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"向上查找节点\"><a class=\"markdownIt-Anchor\" href=\"#向上查找节点\">#</a> 向上查找节点</h3>\n<blockquote>\n<p>path.findParent (callback) // 从父节点查找<br>\n path.find (callback) // 从当前节点查找</p>\n</blockquote>\n<p>find (findParent 从父节点) 从当前 path 开始向上遍历，直到满足回调函数条件为止，找不到则返回 <code>null</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  进入最内层的d</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> !== <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> find = path.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent1 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent2 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;find -&gt; &quot;</span>, find.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent -&gt; &quot;</span>, findParent.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent1 -&gt; &quot;</span>, findParent1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent2 -&gt; &quot;</span>, findParent2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">findParent -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent1 -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent2 -&gt;  <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算表达式的值\"><a class=\"markdownIt-Anchor\" href=\"#计算表达式的值\">#</a> 计算表达式的值</h3>\n<blockquote>\n<p>path.evaluate()</p>\n</blockquote>\n<p>通过 evaluate 可以直接帮你把结果计算出来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var a = 1+2;</span></span><br><span class=\"line\"><span class=\"string\">var b = !![];`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initPath = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; confident, value &#125; = initPath.evaluate();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!confident) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    initPath.<span class=\"title function_\">replaceWith</span>(types.<span class=\"title function_\">valueToNode</span>(value));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scopebinding-的用法介绍\"><a class=\"markdownIt-Anchor\" href=\"#scopebinding-的用法介绍\">#</a> scope&amp;binding 的用法介绍</h2>\n<blockquote>\n<p>资料来源 -&gt; <a href=\"https://evilrecluse.top/post/7389a59f/#%E4%BD%9C%E7%94%A8%E5%9F%9FScope-%E4%B8%8E-%E8%A2%AB%E7%BB%91%E5%AE%9A%E9%87%8FBinding\">作用域 Scope - 与 - 被绑定量 Binding</a></p>\n</blockquote>\n<h3 id=\"作用域-scope\"><a class=\"markdownIt-Anchor\" href=\"#作用域-scope\">#</a> 作用域 Scope</h3>\n<p><code>@Babel</code>  解析出来的语法树节点对象会包含作用域信息，这个信息会作为节点 <code>Node</code>  对象的一个属性保存<br>\n这个属性本身是一个 <code>Scope</code>  对象，其定义位于 <code>node_modules/@babel/traverse/lib/scope/index.js</code>  中</p>\n<blockquote>\n<p>例：查看基本的 作用域与绑定 信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function squire(i)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return i * i * i;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function i()</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var i = 123;</span></span><br><span class=\"line\"><span class=\"string\">    i += 2;</span></span><br><span class=\"line\"><span class=\"string\">    return 123;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n\\n这里是函数 &quot;</span>, path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;()&quot;</span>);</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">dump</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>执行  <code>Scope.dump()</code> ，会得到自底向上的 作用域与变量信息<br>\n得到结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里是函数  squire()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: true, references: 3, violations: 0, kind: &#x27;param&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">这里是函数  i()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: false, references: 0, violations: 1, kind: &#x27;var&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p><strong>输出查看方法</strong></p>\n<ul>\n<li>每一个作用域都以 #标识输出</li>\n<li>每一个绑定都以 - 标识输出</li>\n<li>对于单次输出，都是自底向上的<br>\n先输出当前作用域，再输出父级作用域，再输出父级的父级作用域……</li>\n<li>对于单个绑定 Binding，会输出 4 种信息\n<ul>\n<li>constant 声明后，是否会被修改</li>\n<li>references 被引用次数</li>\n<li>violations 被重新定义的次数</li>\n<li>kind 函数声明类型。param 参数，hoisted 提升，var 变量， local 内部</li>\n</ul>\n</li>\n</ul>\n<p>后续会单独说明 Binding 对象，此处留个印象即可<br>\n<strong>描述</strong><br>\n此处从两个函数节点输出了其作用域的信息</p>\n<ul>\n<li>这两个函数都是定义在同一级下的，所以都会输出相同的父级作用域 Program 的信息</li>\n<li>你会发现，代码中有非常多个 i，有的是函数定义，有的是参数，有的是变量。仔细观察它们的不同之处<br>\n解释器就是通过 不同层级的作用域 与 绑定定义信息 来区分不同的名称的量的</li>\n</ul>\n<h3 id=\"绑定-binding\"><a class=\"markdownIt-Anchor\" href=\"#绑定-binding\">#</a> 绑定 Binding</h3>\n<p><code>Binding</code>  对象用于存储 绑定 的信息<br>\n这个对象会作为 <code>Scope</code>  对象的一个属性存在<br>\n同一个作用域可以包含多个 Binding<br>\n 你可以在  <code>@babel/traverse/lib/scope/binding.js</code>  中查看到它的定义</p>\n<blockquote>\n<p>显示 Binding 的信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">    a = a + 1;</span></span><br><span class=\"line\"><span class=\"string\">    return a;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function b()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var b = 1;</span></span><br><span class=\"line\"><span class=\"string\">    var c = 2;</span></span><br><span class=\"line\"><span class=\"string\">    b = b - c;</span></span><br><span class=\"line\"><span class=\"string\">    return b;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n此块节点源码：\\n&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bindings = path.<span class=\"property\">scope</span>.<span class=\"property\">bindings</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;作用域内 被绑定量 数量：&quot;</span>, <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(bindings).<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> binding_ <span class=\"keyword\">in</span> bindings) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;名字：&quot;</span>, binding_);</span><br><span class=\"line\">      binding_ = bindings[binding_];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;类型：&quot;</span>, binding_.<span class=\"property\">kind</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;定义：&quot;</span>, binding_.<span class=\"property\">identifier</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被修改：&quot;</span>, binding_.<span class=\"property\">constant</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被修改信息信息记录&quot;</span>, binding_.<span class=\"property\">constantViolations</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被引用：&quot;</span>, binding_.<span class=\"property\">referenced</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用次数&quot;</span>, binding_.<span class=\"property\">references</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用信息NodePath记录&quot;</span>, binding_.<span class=\"property\">referencePaths</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>会输出一大堆信息。其对应的意义已经写在代码中，可以自行查看</p>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>在解混淆中，作用域与绑定 主要用来处理边界的问题<br>\n即：某个量哪里引用了，在哪里定义</p>\n<blockquote>\n<p>例：删除所有定义了，却从未使用的变量</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">function squire()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">  var d = 4;</span></span><br><span class=\"line\"><span class=\"string\">  return a * d;</span></span><br><span class=\"line\"><span class=\"string\">  var e = 5;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var f = 6;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func_name = path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(func_name);</span><br><span class=\"line\">    <span class=\"comment\">// 如果变量没有被引用过，那么删除也没关系</span></span><br><span class=\"line\">    <span class=\"comment\">//   此处不能用有无修改过进行判断，因为没有被修改过并不意味着没用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binding &amp;&amp; !binding.<span class=\"property\">referenced</span>) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(ast)[<span class=\"string\">&quot;code&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">squire</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了 Scope.getBinding () 方法来获取 Binding 对象，判断其引用情况来对语法树进行修改</p>\n<h2 id=\"构建节点\"><a class=\"markdownIt-Anchor\" href=\"#构建节点\">#</a> 构建节点</h2>\n<h3 id=\"不推荐的方式需要了解\"><a class=\"markdownIt-Anchor\" href=\"#不推荐的方式需要了解\">#</a> 不推荐的方式（需要了解）</h3>\n<p>AST 在 js 看来就是一个 json 数据，说明可以构建 {} 的方式构建节点。<br>\n假设我们需要构造这段代码  <code>var a = 0;</code> <br>\n 先使用 <a href=\"https://astexplorer.net/\">ASTexplorer</a> 查看该代码的 AST。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105425701-0c9fd23d-f7d9-4084-8967-a1e126f706b2.png#averageHue=%23f4ee90&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=733&amp;id=u10a8356d&amp;originHeight=1100&amp;originWidth=742&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=80611&amp;status=done&amp;style=none&amp;taskId=u2af3218a-f664-46c3-8de0-667e18e21aa&amp;title=&amp;width=494.6666666666667\" alt=\"image.png\"><br>\njs 源代码 <code>var a = 0;</code>  的 JSON 数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>敏锐的你发现每个节点都有 <code>start</code> 、 <code>end</code> 、 <code>type</code>  这几个属性和其余不同的属性，这些都是必要的吗？哪些是必要的。这时需要参考 <a href=\"https://babeljs.io/docs/babel-types\">https://babeljs.io/docs/babel-types</a> 查看哪些是必要节点。<br>\n以 <code>VariableDeclaration</code>  为例。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1686650451689-cc4f1c3d-2e3d-44b7-8890-a14bd33242f2.png#averageHue=%23f7edd0&amp;clientId=ub9e050d9-ff18-4&amp;from=paste&amp;height=546&amp;id=ue9b1d0b1&amp;originHeight=819&amp;originWidth=831&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=92253&amp;status=done&amp;style=none&amp;taskId=u3df98a2b-982e-49fc-b379-5650d45a88e&amp;title=&amp;width=554\" alt=\"image.png\"><br>\n 可以看到 <code>VariableDeclaration</code>  类型的节点有两个必要的节点（ <code>type</code>  对于任何节点都是必须的），其中 <code>kind</code>  的类型为 <code>string</code>  值为黄色框框框住的，而 <code>declarations</code>  的类型则为 VariableDeclarator 数组。<br>\n再参照其他类型节点的必要参数，简化得到下面的 ast 节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">id</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">init</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"types-函数构造节点\"><a class=\"markdownIt-Anchor\" href=\"#types-函数构造节点\">#</a> types 函数构造节点</h3>\n<p>手搓 <code>ast</code>  节点虽然不难，但是复杂的节点构建起来很冗余， <code>types</code>  提供了构建 <code>node</code>  的 <code>function</code> ，使用它们来构造简洁高效。如图构造函数的参数及顺序。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105795085-d60a2f32-1e90-4883-94ab-ad63cdc4a14a.png#averageHue=%23fbf9f0&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=169&amp;id=uf299e3c9&amp;originHeight=253&amp;originWidth=787&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28239&amp;status=done&amp;style=none&amp;taskId=uedb2be9d-d41e-4250-97bf-d6df8c61d9d&amp;title=&amp;width=524.6666666666666\" alt=\"image.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">  types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(<span class=\"string\">&quot;a&quot;</span>), types.<span class=\"title function_\">numericLiteral</span>(<span class=\"number\">0</span>)),</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"template-快速构造节点推荐\"><a class=\"markdownIt-Anchor\" href=\"#template-快速构造节点推荐\">#</a> template 快速构造节点（推荐）</h3>\n<p>使用 <code>types.xxx</code>  来构建节点虽然简洁了不少，但还是觉着繁琐。那么使用 <code>template</code>  绝对会让你眼前一亮。<br>\n假设需要构建 <code>var a = 0,b = 1,c = 2;</code>  使用手搓或 <code>types.xxx</code>  都很繁琐，那么试试新姿势吧！别忘了导包哦！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/template&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">VAR_NODE</span> = <span class=\"title function_\">template</span>(<span class=\"string\">`var A = 0,B = 1, C = 2`</span>);</span><br></pre></td></tr></table></figure>\n<p>这里定义了 <code>VAR_NODE</code>  变量，其中 <code>A</code> , <code>B</code> , <code>C</code>  类似于占位符 <code>VAR_NODE</code>  接收一个参数 <code>&#123;&#125;</code> , <code>&#123;&#125;</code>  的 <code>A</code> , <code>B</code> , <code>C</code>  这几个属性需要分别构造， <code>A</code> , <code>B</code> , <code>C</code>  等价于 <code>VariableDeclarator</code>  节点的 <code>id</code>  属性，也就是 <code>identifier</code>  节点，直接字符串也可以（标识符类型）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = <span class=\"title function_\">VAR_NODE</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">A</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">B</span>: <span class=\"string\">&quot;b&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">C</span>: <span class=\"string\">&quot;c&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">  b = <span class=\"number\">1</span>,</span><br><span class=\"line\">  c = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特性介绍\"><a class=\"markdownIt-Anchor\" href=\"#特性介绍\">#</a> 特性介绍</h2>\n<h3 id=\"同时遍历多个类型\"><a class=\"markdownIt-Anchor\" href=\"#同时遍历多个类型\">#</a> 同时遍历多个类型</h3>\n<p>假设需要同时遍历多个类型，可以这样写插件，这样写一个方法处理两种类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">let b = 0;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|VariableDeclaration&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还可以这样写单独处理各自的类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"pathtraversestate\"><a class=\"markdownIt-Anchor\" href=\"#pathtraversestate\">#</a> path.traverse<state></h3>\n<blockquote>\n<p>注意： path.traverse !== traverse</p>\n</blockquote>\n<p>在  <code>path.traverse</code>  方法中， <code>state</code>  参数是一个对象，用于在遍历过程中保存和传递状态信息。你可以在访问器函数中使用  <code>state</code>  对象来存储和更新任何你需要的信息。<br>\n <code>state</code>  对象在遍历开始时由  <code>path.traverse</code>  方法创建并传递给每个访问器函数。你可以在访问器函数中修改  <code>state</code>  对象，以跟踪遍历过程中的状态。这些修改将在遍历过程中保留下来，并且在访问器函数之间共享。<br>\n以下是一个示例，展示了如何在  <code>path.traverse</code>  中使用  <code>state</code>  对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(code);</span><br><span class=\"line\"><span class=\"keyword\">let</span> state = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitors = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">enter</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在进入节点之前进行操作</span></span><br><span class=\"line\">      state.<span class=\"property\">counter</span>++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在离开节点之后进行操作</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;遍历了&quot;</span>, state.<span class=\"property\">counter</span>, <span class=\"string\">&quot;个节点&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(visitors, state);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们创建了一个包含  <code>counter</code>  属性的  <code>state</code>  对象，并在  <code>enter</code>  和  <code>exit</code>  访问器中使用它来跟踪遍历的节点数量。在遍历开始时，我们将  <code>state</code>  对象作为第三个参数传递给  <code>path.traverse</code>  方法。然后，在每个访问器函数中，我们都可以使用和修改  <code>state</code>  对象。在  <code>enter</code>  访问器中，我们增加了  <code>counter</code>  的值；在  <code>exit</code>  访问器中，我们打印了遍历的节点数量。<br>\n通过使用  <code>state</code>  对象，你可以在遍历过程中跟踪和存储任何你需要的信息，并在访问器函数中进行相应的操作。</p>\n<blockquote>\n<p>注意 traverse 并没有 state 参数</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697874762901-eefdfac9-151e-4c07-9505-60de6509089a.png#averageHue=%233b4045&amp;clientId=uf5705079-0976-4&amp;from=paste&amp;height=375&amp;id=u7a4f70bc&amp;originHeight=562&amp;originWidth=502&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=55333&amp;status=done&amp;style=none&amp;taskId=ub8b35eda-7f71-401f-92d4-b7933928ffd&amp;title=&amp;width=334.6666666666667\" alt=\"image.png\"></p>\n<h3 id=\"babelgeneratoroptions\"><a class=\"markdownIt-Anchor\" href=\"#babelgeneratoroptions\">#</a> babel/generator<options></h3>\n<p><code>babel/generator</code>  的  <code>options</code>  参数包括以下几种：</p>\n<ul>\n<li><code>filename</code> : 字符串，指定正在生成的文件的路径。</li>\n<li><code>sourceMap</code> : 可选，是一个布尔值，指示是否生成 source map。</li>\n<li><code>sourceMapName</code> : 可选，是一个字符串或函数，指定生成的 source map 的名称。</li>\n<li><code>sourceFileName</code> : 可选，是一个字符串或函数，指定源文件的名称。</li>\n<li><code>sourceRoot</code> : 可选，是一个字符串或函数，指定源文件的根目录。</li>\n<li><code>moduleRoot</code> : 可选，是一个字符串或函数，指定模块的根目录。</li>\n<li><code>moduleId</code> : 可选，是一个字符串或函数，指定生成的模块的 ID。</li>\n<li><code>looseModules</code> : 可选，是一个布尔值，指示是否使用 loose 模块模式。</li>\n<li><code>esModules</code> : 可选，是一个布尔值，指示是否使用 ES6 模块。</li>\n<li><code>sourceType</code> : 可选，是一个字符串或函数，指定源代码的类型（例如 “script” 或 “module”）。</li>\n<li><code>requires</code> : 可选，是一个数组，包含需要生成的 require 语句。</li>\n<li><code>plugins</code> : 可选，是一个数组，包含要应用的插件。</li>\n<li><code>retainLines</code> : 可选，是一个布尔值，指示是否保留行号。</li>\n<li><code>comments</code> : 可选，是一个布尔值或函数，指示是否保留注释。</li>\n<li><code>compact</code> : 可选，“auto” 或 “true” 表示启用压缩；“false” 表示禁用压缩；“true” 表示在压缩时忽略一些不必要的空白符；“紊” 表示在压缩时保留所有空白符。</li>\n<li><code>minified</code> : 可选，是一个布尔值，指示是否启用最小化。</li>\n<li><code>uglify</code> : 可选，是一个布尔值或对象，指示是否启用 UglifyJS 风格的压缩。</li>\n<li><code>beautify: true</code>  可选，启用美化输出。</li>\n<li><code>asciiOnly</code> : 可选，一个布尔值，指示是否将 Unicode 字符转换为 ASCII 字符。</li>\n<li><code>quoteKeys</code> : 可选，一个布尔值，指示是否在对象字面量中保留键名。</li>\n</ul>\n",
            "tags": [
                "AST"
            ]
        }
    ]
}