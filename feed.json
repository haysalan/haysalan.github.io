{
    "version": "https://jsonfeed.org/version/1",
    "title": "Faceless Blog",
    "description": "数据采集、逆向安全、网络杂谈",
    "home_page_url": "https://haysalan.github.io",
    "items": [
        {
            "id": "https://haysalan.github.io/posts/57474.html",
            "url": "https://haysalan.github.io/posts/57474.html",
            "title": "基于Hexo框架语雀文章博客模板",
            "date_published": "2024-02-15T12:28:23.000Z",
            "content_html": "<blockquote>\n<p>跳转仓库:<a href=\"https://github.com/haysalan/hexo-yuque-template\">haysalan/hexo-yuque-template</a></p>\n</blockquote>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<ul>\n<li>支持在线一键部署或更新博客</li>\n<li>支持拉取语雀文章自动更新博客内容</li>\n<li>支持自定义 github actons 或 gitee 工作流</li>\n<li>高度可配置，支持自定义部署脚本</li>\n</ul>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<h3 id=\"第一步-新建仓库\"><a class=\"markdownIt-Anchor\" href=\"#第一步-新建仓库\">#</a> 第一步 新建仓库</h3>\n<blockquote>\n<p>新建两个仓库</p>\n</blockquote>\n<p>一个私有仓库（名称随意）用于存放 hexo 博客配置等文件<br>\n一个开源仓库 <a href=\"http://yourname.github.io\">yourname.github.io</a> （替换成你的用户名）</p>\n<h3 id=\"第二步-配置私有仓库环境变量\"><a class=\"markdownIt-Anchor\" href=\"#第二步-配置私有仓库环境变量\">#</a> 第二步 配置私有仓库环境变量</h3>\n<p>1.github 个人设置创建 token 给与 workflow 权限以及无时间期限。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1708004138179-a9745680-2e72-416d-bba9-00913ab4e7cb.png#averageHue=%23fefcf8&amp;clientId=u19099788-83ff-4&amp;from=paste&amp;height=740&amp;id=u89e4af88&amp;originHeight=1110&amp;originWidth=1894&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=171807&amp;status=done&amp;style=none&amp;taskId=u6f965fa4-65e1-44a8-aaeb-17b680d0756&amp;title=&amp;width=1262.6666666666667\" alt=\"image.png\"></p>\n<p>2. 将 github token 配置到你的私有仓库中。<strong>名称需一致</strong>。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1708000324358-713596cf-6b43-47b7-8e7e-7d80a21466d2.png#averageHue=%23fefefe&amp;clientId=u22a9482c-048f-4&amp;from=paste&amp;height=806&amp;id=u4587f0a2&amp;originHeight=1209&amp;originWidth=1920&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=130041&amp;status=done&amp;style=none&amp;taskId=u8942af84-1ea7-4e08-8012-9876e0fe226&amp;title=&amp;width=1280\" alt=\"image.png\"></p>\n<p>3. 进入语雀网页版个人设置，获取语雀 token（现在需要超级会员才能创建，有之前创建的好的可直接使用）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1708001750001-786dbfbf-4cc0-4ad0-b912-1f5d800cbb4b.png#averageHue=%239d9d9d&amp;clientId=u22a9482c-048f-4&amp;from=paste&amp;height=705&amp;id=u633a491f&amp;originHeight=1058&amp;originWidth=1974&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=98460&amp;status=done&amp;style=none&amp;taskId=u24c28be8-539c-4b05-9d12-27a8d1a0f0b&amp;title=&amp;width=1316\" alt=\"image.png\"></p>\n<p>4. 将语雀 token 配置到私有仓库中 <strong>名称需一致</strong>。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1708000395322-ba9dfab1-e87f-445d-aaa5-b774e992de19.png#averageHue=%23fefdfd&amp;clientId=u22a9482c-048f-4&amp;from=paste&amp;height=769&amp;id=ue5213370&amp;originHeight=1153&amp;originWidth=1858&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=180849&amp;status=done&amp;style=none&amp;taskId=u4bbdad0e-6a5b-4488-a562-01a206bcbf9&amp;title=&amp;width=1238.6666666666667\" alt=\"image.png\"></p>\n<h3 id=\"第三步-修改-actions\"><a class=\"markdownIt-Anchor\" href=\"#第三步-修改-actions\">#</a> 第三步 修改 actions</h3>\n<p>目录  <code>.github/workflows/blog-update.yml</code> <br>\n 将其中的 PUBLISH_REPOSITORY 修改为你的开源仓库路径。<br>\n目录： <code>actions/gitee-sync.yml</code> <br>\n <code>actions</code>  目录下存放开源仓库的工作流，用于在开源仓库触发执行。 <code>gitee-sync.yml </code> 基于 <a href=\"https://github.com/yanglbme/gitee-pages-action\">yanglbme /gitee-pages-action</a> 根据注释就行配置即可。<br>\n <code>gitee-sync.yml</code>  用于同步 <code>github pages</code>  同步到 <code>gitee pages</code>  可自动更新 <code>gitee pages</code>  无需  <code>gitee pages pro</code> 。</p>\n<h3 id=\"第四步-自定义部署\"><a class=\"markdownIt-Anchor\" href=\"#第四步-自定义部署\">#</a> 第四步 自定义部署</h3>\n<p>默认使用 anzhiyu 主题，可自行更换。<br>\n安装 hexo 主题或依赖请修改  <code>blog-update.yml</code> 。<br>\n构建博客静态文件前后指令添加请修改 <code>script/generate.sh</code> 。</p>\n<h2 id=\"预览\"><a class=\"markdownIt-Anchor\" href=\"#预览\">#</a> 预览</h2>\n<p>博客预览： <a href=\"https://haysalan.github.io/\">https://haysalan.github.io/</a><br>\n 博客模板：<a href=\"https://github.com/haysalan/hexo-yuque-template\">https://github.com/haysalan/hexo-yuque-template</a><br>\ngithub：<a href=\"https://github.com/Alanhays\">https://github.com/Alanhays</a></p>\n",
            "tags": [
                "GitHub",
                "Actions"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/52888.html",
            "url": "https://haysalan.github.io/posts/52888.html",
            "title": "精选网络资源&疑难杂症记录",
            "date_published": "2024-01-09T01:49:31.000Z",
            "content_html": "<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; simple %&#125;需要什么可在下方评论，如找到会新增，不定期更;所有资源均来自网络收集，如有侵权联系我删除！&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> windows</h1>\n<h2 id=\"日常使用\"><a class=\"markdownIt-Anchor\" href=\"#日常使用\">#</a> 日常使用</h2>\n<ul>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704765044646-25a0ada4-36ca-491f-a60b-afb585380df3.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704765044646-25a0ada4-36ca-491f-a60b-afb585380df3.zip%22%2C%22name%22%3A%22360%E9%A9%B1%E5%8A%A8%E5%A4%A7%E5%B8%88%E7%BA%AF%E5%87%80%E7%89%882.0.0.2000.exe.zip%22%2C%22size%22%3A8620772%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u0f0b20d1-f056-4054-9f9c-b4567f4d1cf%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u23cf6b8c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">360 驱动大师纯净版 2.0.0.2000.exe.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776048633-de6865e1-be62-42b4-b50e-68d964d9ce2a.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776048633-de6865e1-be62-42b4-b50e-68d964d9ce2a.zip%22%2C%22name%22%3A%22PixPin_1.0.9.1_Setup-%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7.zip%22%2C%22size%22%3A28895840%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u9ac5fc97-8522-4940-91a3-9281f01d0bc%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22NJhn3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">PixPin_1.0.9.1_Setup - 截图工具.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776019834-334f8283-323b-4e2a-ad7f-4ab9a8c5b5bb.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776019834-334f8283-323b-4e2a-ad7f-4ab9a8c5b5bb.zip%22%2C%22name%22%3A%22%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7.zip%22%2C%22size%22%3A243303%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ub63c6379-947e-475b-b30e-e9e51984afd%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u13a49127%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">右键菜单编辑工具.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776226192-d1024849-e60a-40af-bd1d-55fc0d71aa47.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776226192-d1024849-e60a-40af-bd1d-55fc0d71aa47.zip%22%2C%22name%22%3A%22%E5%9B%BE%E5%90%A7%E5%B7%A5%E5%85%B7%E7%AE%B1.zip%22%2C%22size%22%3A235839903%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22uac7abb7c-6628-453e-a65d-f57d04d6bd9%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ucd2c3525%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">图吧工具箱.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776088072-7098a3e0-62fd-48bc-a876-77b9aab8ec56.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776088072-7098a3e0-62fd-48bc-a876-77b9aab8ec56.zip%22%2C%22name%22%3A%22window%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0.zip%22%2C%22size%22%3A834854%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u151ced73-8261-43c2-9391-f4d88092a7f%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22uf3b740f0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">window 关闭自动更新.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776254996-5ec014dd-0758-4eea-9bce-0cbbcecf8f81.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776254996-5ec014dd-0758-4eea-9bce-0cbbcecf8f81.zip%22%2C%22name%22%3A%22TrafficMonitor-%E4%BB%BB%E5%8A%A1%E6%A0%8F%E4%BF%A1%E6%81%AF.zip%22%2C%22size%22%3A1155572%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ue836c368-90ab-47a5-9a41-3c6d7af4e5f%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22uf55149d5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">TrafficMonitor - 任务栏信息.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1711591386343-c79dc842-0028-4620-9e2f-96d93a333b24.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1711591386343-c79dc842-0028-4620-9e2f-96d93a333b24.zip%22%2C%22name%22%3A%22IDM-Activation-Script-zh-cn.zip%22%2C%22size%22%3A23022%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ua975b663-34ee-4251-b7d2-f782ab08f85%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ub29ea257%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">IDM-Activation-Script-zh-cn.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1711593099973-427b2cab-b8c7-407d-889f-222a3eb74f99.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1711593099973-427b2cab-b8c7-407d-889f-222a3eb74f99.zip%22%2C%22name%22%3A%22Clash-0.20.39.zip%22%2C%22size%22%3A405305938%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u66a0e7b4-7588-43d6-8a95-8912f95afad%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u077cf20f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">Clash-0.20.39.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1711598531899-a66c67c7-dd2d-4a64-aa30-5b58f22e7ddc.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1711598531899-a66c67c7-dd2d-4a64-aa30-5b58f22e7ddc.zip%22%2C%22name%22%3A%223DP_Net_v2101-%E7%A6%BB%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85.zip%22%2C%22size%22%3A125632255%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u706398a9-5a77-4040-8143-cba95741976%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u18d22503%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">3DP_Net_v2101 - 离线网卡驱动安装.zip</a></li>\n</ul>\n<h2 id=\"逆向开发\"><a class=\"markdownIt-Anchor\" href=\"#逆向开发\">#</a> 逆向开发</h2>\n<ul>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704770622403-d0dc9dac-3a92-4c08-a06b-873ef5fb731e.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704770622403-d0dc9dac-3a92-4c08-a06b-873ef5fb731e.zip%22%2C%22name%22%3A%22IDA_Pro_v8.3_Portable.zip%22%2C%22size%22%3A484596297%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ub5a488bd-a89c-4610-8b97-b98b9752204%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u22fe2ccc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">IDA_Pro_v8.3_Portable.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776071506-ab96b9d0-a969-4fad-b7b1-cbdaf9af07dd.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776071506-ab96b9d0-a969-4fad-b7b1-cbdaf9af07dd.zip%22%2C%22name%22%3A%22IDA_Pro_v7.5_Portable.zip%22%2C%22size%22%3A429698754%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u3b9dbbe5-22de-47e5-8cf1-b1733f0c0d3%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u936b9241%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">IDA_Pro_v7.5_Portable.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776118713-bd340794-01cb-424b-8644-cf932d436be2.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776118713-bd340794-01cb-424b-8644-cf932d436be2.zip%22%2C%22name%22%3A%22TyporaCrack-main.zip%22%2C%22size%22%3A102408761%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22udddeb491-d69b-4aad-92da-f3ae663b8e1%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u2782718e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">TyporaCrack-main.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704775949699-67598aea-409b-4f8a-99ca-7eff220dc472.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704775949699-67598aea-409b-4f8a-99ca-7eff220dc472.zip%22%2C%22name%22%3A%22adb-fastboot.zip%22%2C%22size%22%3A3765786%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u826aff21-7140-4a57-9b86-35e638cf964%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ub0eec022%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">adb-fastboot.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704775985265-41a9a7d0-c609-4676-a69a-36de24e21f73.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704775985265-41a9a7d0-c609-4676-a69a-36de24e21f73.zip%22%2C%22name%22%3A%22jadx-1.4.7.zip%22%2C%22size%22%3A29887862%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u40382398-67f3-44a9-9801-bb7dfcd475b%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u93e96a93%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">jadx-1.4.7.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776136039-dc6dbf22-4202-40bc-aac1-431b79320713.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776136039-dc6dbf22-4202-40bc-aac1-431b79320713.zip%22%2C%22name%22%3A%22GDA3.97pro_patch.zip%22%2C%22size%22%3A5951778%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ufb57ffea-6b85-4a1a-bf78-6bf716b4e73%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ub61318ab%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">GDA3.97pro_patch.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776287514-a7eeb37b-b4a5-4258-9513-e95c7b557987.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776287514-a7eeb37b-b4a5-4258-9513-e95c7b557987.zip%22%2C%22name%22%3A%22jetbra-IDE%E6%BF%80%E6%B4%BB.zip%22%2C%22size%22%3A106748%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ue9a29434-a8d5-494f-b919-bca4f7d29cd%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ue7903929%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">jetbra-IDE 激活.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1704776355152-36a2bfde-66bb-4869-a7cc-c0ba8b64c7d0.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1704776355152-36a2bfde-66bb-4869-a7cc-c0ba8b64c7d0.zip%22%2C%22name%22%3A%22fastgithub_win-x64-github%E5%8A%A0%E9%80%9F.zip%22%2C%22size%22%3A23456162%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ue55aea78-bada-449b-a094-9c9a62a7a6c%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22u2d88f5bd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">fastgithub_win-x64-github 加速.zip</a></li>\n<li><a href=\"https://www.yuque.com/attachments/yuque/0/2024/zip/26634545/1711509110961-12386a43-96e6-4c50-8678-e93d1953e792.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2024%2Fzip%2F26634545%2F1711509110961-12386a43-96e6-4c50-8678-e93d1953e792.zip%22%2C%22name%22%3A%22ReRes_JS%E6%9B%BF%E6%8D%A2.zip%22%2C%22size%22%3A67938%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22ua5e272ad-9ce2-49e3-8f0d-6817ed62390%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22ub34fae1e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">ReRes_JS 替换.zip</a></li>\n<li></li>\n</ul>\n<h2 id=\"镜像文件\"><a class=\"markdownIt-Anchor\" href=\"#镜像文件\">#</a> 镜像文件</h2>\n<h2 id=\"疑难杂症\"><a class=\"markdownIt-Anchor\" href=\"#疑难杂症\">#</a> 疑难杂症</h2>\n<h1 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"疑难杂症-2\"><a class=\"markdownIt-Anchor\" href=\"#疑难杂症-2\">#</a> 疑难杂症</h2>\n<h3 id=\"vmware-虚拟机-ubuntu-网络图标消失-bug\"><a class=\"markdownIt-Anchor\" href=\"#vmware-虚拟机-ubuntu-网络图标消失-bug\">#</a> Vmware 虚拟机 Ubuntu 网络图标消失 Bug</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nmcli network off</span><br><span class=\"line\">sudo nmcli network on</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "windows",
                "资源",
                "疑难杂症"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/50605.html",
            "url": "https://haysalan.github.io/posts/50605.html",
            "title": "破解tap验证和绕过实名认证",
            "date_published": "2024-01-03T10:13:01.000Z",
            "content_html": "<h2 id=\"案例目标\"><a class=\"markdownIt-Anchor\" href=\"#案例目标\">#</a> 案例目标</h2>\n<ul>\n<li>去除账号验证</li>\n<li>去除实名认证</li>\n</ul>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<ul>\n<li>MT 管理器 / NP 管理器</li>\n<li>JEB/jadx（非必须）</li>\n<li>模拟器 / 安卓手机</li>\n<li>root （否）</li>\n<li>目标 APP</li>\n</ul>\n<h2 id=\"破解步骤\"><a class=\"markdownIt-Anchor\" href=\"#破解步骤\">#</a> 破解步骤</h2>\n<h3 id=\"绕过账号验证\"><a class=\"markdownIt-Anchor\" href=\"#绕过账号验证\">#</a> 绕过账号验证</h3>\n<p>开启 MT 管理器的 Activity 记录功能<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671602359155-c9ae5dc8-85b5-4231-94fb-a928eebcc0c3.png#averageHue=%23cac9c9&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=ucdad7e8c&amp;originHeight=1206&amp;originWidth=668&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=101736&amp;status=done&amp;style=none&amp;taskId=u51237a12-77fe-4d3d-965c-d5df7542f11&amp;title=\" alt=\"微信截图_20221221135907.png\"><br>\n 启动成功后打开我们需要破解的 APP，他会启动游戏平台验证账号，我们回到游戏就会看到下面的页面。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671602498061-e1426d46-45a5-4fac-8ebb-49e5ec366acb.png#averageHue=%23444444&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u3e40e4a9&amp;originHeight=739&amp;originWidth=1356&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=67608&amp;status=done&amp;style=none&amp;taskId=u99f86d7f-d114-47aa-930c-33fcc39d0c5&amp;title=\" alt=\"微信截图_20221221140124.png\"><br>\n 进入 MT 管理器查看记录，最后的一个活动是 com.txxxxx.pay.sdk.library.TxxAlertDialog$1，那我们从它开始入手。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671602303415-c37264f8-df26-4454-8352-0e8e41a313b3.png#averageHue=%23c3c2c1&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=udfc026cc&amp;originHeight=1298&amp;originWidth=694&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=254366&amp;status=done&amp;style=none&amp;taskId=udeaa1633-8f16-4d99-b3e5-929efbf8e92&amp;title=\" alt=\"微信截图_20221221135806.png\"><br>\n 找到这个类 com.txxxxx.pay.sdk.library.TxxAlertDialog<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671602871407-6ceb3b75-f65e-4c41-a429-95200bfad7db.png#averageHue=%23e7e3d7&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u889397ae&amp;originHeight=933&amp;originWidth=1552&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=217684&amp;status=done&amp;style=none&amp;taskId=u45e25c5f-8765-4e4b-b9ff-fb14a6c7468&amp;title=\" alt=\"微信截图_20221221140729.png\"><br>\n 我们得到 new 它的地方。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671604604483-60b1bd9d-b7cc-4af6-bf09-65691a2f9037.png#averageHue=%23eae1d5&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u8c895e75&amp;originHeight=1079&amp;originWidth=1567&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=211722&amp;status=done&amp;style=none&amp;taskId=ub2a5a9fd-f775-4796-add0-aad888f41b9&amp;title=\" alt=\"微信截图_20221221143612.png\"></p>\n<p>进入并分析一下。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671604759903-d6ad0476-9c68-4d05-8aac-7d5923ba3f27.png#averageHue=%23f3ebe3&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u090dbc25&amp;originHeight=1087&amp;originWidth=1452&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=164088&amp;status=done&amp;style=none&amp;taskId=u121839ec-ce4b-4c71-99a3-a029bfa5e81&amp;title=\" alt=\"微信截图_20221221143852.png\"><br>\n 搜索一下哪里调用了销毁弹窗，验证通过必定需要销毁，找起来更快。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671604904388-35ec8f2a-0648-4fd1-89b0-2c81b69bf9bf.png#averageHue=%23f4f0ee&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=ueca1eb4e&amp;originHeight=693&amp;originWidth=1496&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=62436&amp;status=done&amp;style=none&amp;taskId=u9a91e773-032a-466e-962d-90dcc2a5958&amp;title=\" alt=\"微信截图_20221221144127.png\"><br>\n 进入分析一下。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671605052168-84dd2bde-fb9f-473e-b107-f74923303f3e.png#averageHue=%23f8f2f1&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u72643f64&amp;originHeight=366&amp;originWidth=1450&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=56786&amp;status=done&amp;style=none&amp;taskId=u6055ff4c-1c26-4b48-b25b-074bf528857&amp;title=\" alt=\"微信截图_20221221144342.png\"><br>\n 看看哪里还个调用了<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671605447575-ce5982d8-35b3-43ef-9d78-260b576d4406.png#averageHue=%23f3f0ea&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u2d5ce57b&amp;originHeight=916&amp;originWidth=1535&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=107223&amp;status=done&amp;style=none&amp;taskId=u40fd5ad3-e7ba-48b1-abcd-d2f0a1bed06&amp;title=\" alt=\"微信截图_20221221145005.png\"><br>\n 这里我验证过了，修改它们即可去除验证。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671605720530-3d2f6cd3-821d-4a38-9577-472b65688caa.png#averageHue=%23faf5f4&amp;clientId=u3218cd6c-2e71-4&amp;from=ui&amp;id=u7e1cfcac&amp;originHeight=1141&amp;originWidth=1406&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=122503&amp;status=done&amp;style=none&amp;taskId=u859a70bf-d132-46f9-bf73-82676b18f83&amp;title=\" alt=\"微信截图_20221221145500.png\"></p>\n<p>快速定位关键字 <code>checkLicense = licensed</code>  (不出意外只有一个结果)<br>\n 然后搜索定位函数 checkLicense<br>\n 在 smali 代码中修改对应的值就能去除验证了。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671532241058-89eb95d0-d5a6-4f7d-81c1-cdbc7457985b.png#averageHue=%23fdfaf9&amp;clientId=u5760c920-5b5f-4&amp;from=drop&amp;id=FZP8r&amp;originHeight=1176&amp;originWidth=1672&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=170926&amp;status=done&amp;style=none&amp;taskId=ue6c970bb-1886-4050-b0ae-6bbb13fcdac&amp;title=\" alt=\"微信截图_20221220183011.png\"><br>\n 重新签名安装后启动看看效果吧。</p>\n<h3 id=\"绕过实名认证\"><a class=\"markdownIt-Anchor\" href=\"#绕过实名认证\">#</a> 绕过实名认证</h3>\n<p>开启 MT 管理器的 Activity 记录功能，然后启动 APP 弹出实名弹窗之后回到 MT 管理器，可以看到只有一个 Activity -&gt;  <code>com.lixxthgame.abi.UnityPlayerActivity</code> <br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671588848878-0441652c-c8a9-49fa-b4b6-b8e7486d6fed.png#averageHue=%238b8a8a&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=ua42b506b&amp;originHeight=1121&amp;originWidth=678&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=166629&amp;status=done&amp;style=none&amp;taskId=u8cdbd2c8-dbd3-4305-96f6-d6b64c57410&amp;title=\" alt=\"Snipaste_2022-12-21_10-11-13.png\"><br>\n 在 UnityPlayerActivity 中并没发现什么可疑的地方，那就得找新的办法了。<br>\n我们来试试新的关键字 “identify”，需要实名认证，估计会使用这个单词。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671593032964-ab95b599-8b44-4474-a4fb-6bfb0b60ecca.png#averageHue=%23ebe8e5&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=u058e6d36&amp;originHeight=1153&amp;originWidth=1581&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=231954&amp;status=done&amp;style=none&amp;taskId=ue65d47f3-f7d1-40f0-95f9-8c11014a99e&amp;title=\" alt=\"微信截图_20221221112340.png\"><br>\n 看看这个 IdentifyHelp 类是干什么用的。</p>\n<p>IdentifyHelp 中有个方法 CompareTimeUp18 翻译过来就是 对比年龄到 18（估计是用出生日期和当前时间对比）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671593371902-50de2adf-4bde-4121-8ec3-741a4df678aa.png#averageHue=%23fbf7f6&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=u537bd713&amp;originHeight=346&amp;originWidth=1456&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=40390&amp;status=done&amp;style=none&amp;taskId=uec1358ce-5d27-46fa-a000-cc3c94241fe&amp;title=\" alt=\"微信截图_20221221112821.png\"><br>\n 看看那些地方调用了 CompareTimeUp18<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671593917788-ab9501b3-bda6-4746-aabf-699cbb8c4681.png#averageHue=%23f1eeeb&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=u4a635499&amp;originHeight=1148&amp;originWidth=1582&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=133303&amp;status=done&amp;style=none&amp;taskId=u9aa9b69b-708f-401f-899d-6116db127f1&amp;title=\" alt=\"微信截图_20221221113824.png\"><br>\n 选择第一个，进入到方法 antiAddication，分析一下。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671595264762-5395591c-b7fa-42f5-b365-4d8dc36208e1.png#averageHue=%23f7f1ef&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=u8027d24a&amp;originHeight=959&amp;originWidth=1449&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=164814&amp;status=done&amp;style=none&amp;taskId=ub95c164f-e498-45d0-b5e7-2c8198e9239&amp;title=\" alt=\"微信截图_20221221120045.png\"><br>\n 进入 setBigMan 或 setIdenfity 中<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671594735893-520b3df9-6c33-41b1-8eba-59e9feab47ba.png#averageHue=%23fcf8f7&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=u483aba0b&amp;originHeight=1064&amp;originWidth=995&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=83011&amp;status=done&amp;style=none&amp;taskId=uccd0dc22-b3dc-44bb-b67e-ae4e734b216&amp;title=\" alt=\"微信截图_20221221115204.png\"><br>\n 将 isBigMan 和 isIdenfity 的初始值置为 true 即可去实名认证了。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671591338615-f3e424d9-7255-40c5-b067-160fd53e9272.png#averageHue=%23fbf9f9&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=D2g7d&amp;originHeight=1087&amp;originWidth=979&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=101242&amp;status=done&amp;style=none&amp;taskId=u48e415f1-34d6-4730-a542-f28400787b2&amp;title=\" alt=\"微信截图_20221221105523.png\"></p>\n<p>在 smali 代码中修改对应的值就能去除验证了。<br>\n快速定位关键字  <code>LoaclUser&#123;name=</code>  (不出意外只有一个结果)<br>\n 搜索定位 isIdenfity<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/26634545/1671591845525-464035cb-38f4-480d-8e91-8375683bb4a5.png#averageHue=%23fdf3f1&amp;clientId=u2e0d459e-147d-4&amp;from=ui&amp;id=UGMOJ&amp;originHeight=511&amp;originWidth=1513&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=71430&amp;status=done&amp;style=none&amp;taskId=ua65fb48e-9e12-4d70-85f9-5dd795a4a49&amp;title=\" alt=\"微信截图_20221221110343.png\"></p>\n",
            "tags": [
                "入门级"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/38694.html",
            "url": "https://haysalan.github.io/posts/38694.html",
            "title": "Build Nodejs 环境配置",
            "date_published": "2024-01-03T07:34:02.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>对于 js 补浏览器环境时遇到一些 js 无法实现的环境，那么就需要修改 node 源码来实现，本文简单复述一下 Build Node 所需要的环境及配置，推荐直接看<a href=\"https://github.com/nodejs/node/blob/HEAD/BUILDING.md\">官方文档</a>。</p>\n<h1 id=\"windows-1011\"><a class=\"markdownIt-Anchor\" href=\"#windows-1011\">#</a> windows 10/11</h1>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<blockquote>\n<p><a href=\"https://github.com/nodejs/node/blob/main/BUILDING.md#windows\">windows 部分官方教程（推荐）</a></p>\n</blockquote>\n<h3 id=\"一-python-环境\"><a class=\"markdownIt-Anchor\" href=\"#一-python-环境\">#</a> 一、Python 环境</h3>\n<p>安装好 python 并且配置环境变量，官网下载（<a href=\"https://www.python.org/downloads/\">点击下载</a>）我使用的版本是 3.8.0，低版本不知道是否可用，如果第一次安装 Python 建议安装 3.8.0 及以上。<br>\n如果下载速度慢，可点击<a href=\"https://surans.lanzouw.com/b00y05wvi\">链接（密码：h85c）</a>下载我拷贝到蓝奏云文件。</p>\n<h3 id=\"二-visual-studio-installer\"><a class=\"markdownIt-Anchor\" href=\"#二-visual-studio-installer\">#</a> <strong>二、Visual Studio Installer</strong></h3>\n<p><strong>安装 C++/.NET 环境有两个可选方案</strong> 1. 安装<a href=\"https://visualstudio.microsoft.com/downloads/\"> Visual Studio 2022</a> 并且勾选 “使用 C++ 进行桌面开发” 和 “.NET 桌面生成工具” 进行环境安装。(推荐)<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704271697464-b1f8bde9-2952-4f6c-91a2-87734409773a.png#averageHue=%23f6f6f6&amp;clientId=u118ac858-2e95-4&amp;from=paste&amp;height=226&amp;id=ua286dd38&amp;originHeight=339&amp;originWidth=623&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=30683&amp;status=done&amp;style=none&amp;taskId=u7d40a80e-757a-42f1-b4c2-e59071004fb&amp;title=&amp;width=415.3333333333333\" alt=\"image.png\"></p>\n<p>2. 安装<a href=\"https://aka.ms/vs/17/release/vs_buildtools.exe\">构建工具</a>打开后自动安装 “C++ 构建工具” 环境等待安装完成后打开 <strong>Visual Studio Installer</strong> 勾选 “.NET 桌面生成工具” 进行环境安装。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704270358817-7e442e02-b5b5-4901-82d1-525aa2c60c9c.png#averageHue=%23f4f4f4&amp;clientId=ud662e875-ea93-4&amp;from=paste&amp;height=282&amp;id=u6feb1e41&amp;originHeight=423&amp;originWidth=720&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17211&amp;status=done&amp;style=none&amp;taskId=u6d5b157d-079c-40a7-815a-a6b0a00aacb&amp;title=&amp;width=480\" alt=\"image.png\"></p>\n<h3 id=\"三-netwide-汇编程序\"><a class=\"markdownIt-Anchor\" href=\"#三-netwide-汇编程序\">#</a> 三、NetWide 汇编程序</h3>\n<p>点击<a href=\"https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc6/win64/\">这里</a>下载后安装即可，安装是一直点 next 即可。<br>\n我安装的版本是<a href=\"https://www.nasm.us/pub/nasm/releasebuilds/2.16.02rc6/win64/nasm-2.16.02rc6-installer-x64.exe\"> nasm-2.16.02rc6</a>，其他版本选择点击<a href=\"https://www.nasm.us/pub/nasm/releasebuilds\">这里</a></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704272184220-9e9a3c78-f713-4c5e-ac47-d953d32b9b6c.png#averageHue=%23f8f0ef&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=98&amp;id=u873f167a&amp;originHeight=147&amp;originWidth=1018&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=35233&amp;status=done&amp;style=none&amp;taskId=uf20b23dd-d83a-4aad-8df8-6167647b80a&amp;title=&amp;width=678.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"下载-node-源码\"><a class=\"markdownIt-Anchor\" href=\"#下载-node-源码\">#</a> 下载 Node 源码</h2>\n<p>官方教程使用 Git Bash 来进行下载，<a href=\"https://git-scm.com/download/win\"> Git for Windows</a> 下载安装。记得配置环境变量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/nodejs/node.git</span><br><span class=\"line\">cd node</span><br></pre></td></tr></table></figure>\n<p>由于 node 源码 400m 比较大，我选择进入<a href=\"https://nodejs.org/en/download/\"> Nodejs 官网</a>进行源码下载，当然使用你喜欢的方式即可。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704273537999-f71a2be0-54f9-463b-aa21-aa82b1e13aaf.png#averageHue=%23faf9f9&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=705&amp;id=u94fc557b&amp;originHeight=1057&amp;originWidth=1791&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=149833&amp;status=done&amp;style=none&amp;taskId=u7d9819c3-fefa-4269-bb68-5450930f849&amp;title=&amp;width=1194\" alt=\"image.png\"></p>\n<h2 id=\"build-node\"><a class=\"markdownIt-Anchor\" href=\"#build-node\">#</a> Build Node</h2>\n<p>进入到 node 源码根目录，例如我这里需要进入到 <code>nodes/node-v20.10.0</code> <br>\n<img src=\"https://cdn.nlark.com/yuque/0/2024/png/26634545/1704272480903-a4072940-1d9a-4ae7-a0da-3b8b34a56cfc.png#averageHue=%232a2c2f&amp;clientId=u5ba02b39-7ceb-4&amp;from=paste&amp;height=564&amp;id=ue8b55729&amp;originHeight=846&amp;originWidth=847&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=73957&amp;status=done&amp;style=none&amp;taskId=u6a26f812-9cf3-4eac-88af-a8bd2d93d79&amp;title=&amp;width=564.6666666666666\" alt=\"image.png\"></p>\n<p><strong>开始构建</strong></p>\n<blockquote>\n<p>构建后会在<strong> Release</strong> 文件夹下生成构建好的<strong> node.exe</strong> 文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\vcbuild</span><br></pre></td></tr></table></figure>\n<p><strong>进行测试</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\vcbuild test</span><br></pre></td></tr></table></figure>\n<p><strong>测试 Node.js 是否正确构建</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Release\\node -e &quot;console.log(&#x27;Hello from Node.js&#x27;, process.version)&quot;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "nodejs",
                "build"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/60184.html",
            "url": "https://haysalan.github.io/posts/60184.html",
            "title": "学习逆向过程中的一些问题与其解决办法",
            "date_published": "2023-12-25T08:59:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>学习逆向过程中的一些问题与其解决办法，当然还有大佬们文章内提到的，整理出来方便翻阅，持续更新。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip key %&#125;当然大家有什么问题也可在下方评论，如有解决本文问题的方法还请不吝赐教，在此感谢鞠躬！&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_38851536/category_11102404.html?spm=1001.2014.3001.5482\">白龙 - SO 逆向实战十三篇</a></li>\n</ul>\n<h1 id=\"资源工具\"><a class=\"markdownIt-Anchor\" href=\"#资源工具\">#</a> 资源工具</h1>\n<ul>\n<li><a href=\"https://gchq.github.io/CyberChef\">CyberChef - 用于加密，编码，压缩和数据分析</a></li>\n<li><a href=\"https://armconverter.com/\">armconverter - ARM-HEX 转换器</a></li>\n<li><a href=\"https://github.com/r0ysue/r0capture\">r0capture - 安卓应用层抓包通杀脚本</a></li>\n<li><a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\">ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a></li>\n<li><a href=\"https://github.com/Pr0214/findhash\">findhash - IDA 脚本 可以检测出哈希算法</a></li>\n<li><a href=\"https://github.com/sml2h3/ddddocr\">ddddocr - Python 库 通用验证码识别库</a></li>\n</ul>\n<h1 id=\"ida\"><a class=\"markdownIt-Anchor\" href=\"#ida\">#</a> IDA</h1>\n<h2 id=\"通过-jni_onload-定位-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#通过-jni_onload-定位-native-函数\">#</a> 通过 JNI_OnLoad 定位 Native 函数</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip info %&#125;仅限没有经过混淆或加密处理的样本&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550232510-9c4a4843-75f5-4fce-a183-770783c0dddb.gif#averageHue=%23f6f6f5&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u5aefa470&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=792808&amp;status=done&amp;style=none&amp;taskId=u3e2d9528-de56-415e-9185-2b963fb96eb&amp;title=\" alt=\"PixPin_2023-12-14_18-32-47.gif\"></p>\n<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<h2 id=\"python-能不能调用-so-文件的-native-方法\"><a class=\"markdownIt-Anchor\" href=\"#python-能不能调用-so-文件的-native-方法\">#</a> Python 能不能调用 so 文件的 Native 方法？</h2>\n<p>Python 也有类似 Unidbg 的工具<a href=\"https://github.com/maiyao1988/ExAndroidNativeEmu\"> ExAndroidNativeEmu - Python 工具 Unidbg 青春版功能有限</a>，但是仅限于对<strong> JAVA 层的交互极少</strong>，一旦涉及到 JNI 交互，则需要果断选择 Unidbg，在 Python 中补 JAVA 的逻辑，简直不是人该受的委屈。</p>\n<h1 id=\"密码学\"><a class=\"markdownIt-Anchor\" href=\"#密码学\">#</a> 密码学</h1>\n<h2 id=\"加密算法大概率是开源或者魔改算法有没有快速验证的方法\"><a class=\"markdownIt-Anchor\" href=\"#加密算法大概率是开源或者魔改算法有没有快速验证的方法\">#</a> 加密算法大概率是开源或者魔改算法有没有快速验证的方法？</h2>\n<p>当在分析过程中有猜测或怀疑是某加密算法时可以使用类似<a href=\"https://github.com/Pr0214/findhash\"> findhash - IDA 脚本 可以检测出哈希算法</a>的脚本，此脚本可检测无论是否魔改常数的 hash 算法 MD5，SHA1、SHA2。</p>\n<h1 id=\"汇编指令\"><a class=\"markdownIt-Anchor\" href=\"#汇编指令\">#</a> 汇编指令</h1>\n<h2 id=\"arm32-有-thumb-和-arm-两种指令模式如何确定\"><a class=\"markdownIt-Anchor\" href=\"#arm32-有-thumb-和-arm-两种指令模式如何确定\">#</a> ARM32 有 Thumb 和 ARM 两种指令模式如何确定？</h2>\n<p>最粗暴的方式就是试错法 module.callFunction 时不加 1 会报错非法指令则表示是 Thumb 模式<br>\n第二个办法是从知识角度出发，ARM 模式指令总是 4 字节长度，Thumb 指令长度多数为 2 字节，少部分指令是 4 字节。</p>\n<h1 id=\"unidbg\"><a class=\"markdownIt-Anchor\" href=\"#unidbg\">#</a> Unidbg</h1>\n<h2 id=\"unidbg-的-jnionload-加载出的类是乱码\"><a class=\"markdownIt-Anchor\" href=\"#unidbg-的-jnionload-加载出的类是乱码\">#</a> Unidbg 的 Jnionload 加载出的类是乱码？</h2>\n<p>so 做了字符串的混淆或加密，以此来对抗分析人员，但字符串总是要解密的，不然怎么用呢？这个解密一般发生在 Init array 节或者 JNI OnLoad 中，又或者是该字符串使用前的任何一个时机</p>\n<h2 id=\"对虚拟内存进行修改\"><a class=\"markdownIt-Anchor\" href=\"#对虚拟内存进行修改\">#</a> 对虚拟内存进行修改</h2>\n<p>Unidbg 提供了两种方法打 Patch，简单的需求可以调用 Unicorn 对虚拟内存进行修改，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void patchVerify()&#123;</span><br><span class=\"line\">    int patchCode = 0x4FF00100; //</span><br><span class=\"line\">    emulator.getMemory().pointer(module.base + 0x1E86).setInt(0,patchCode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tip warning %&#125;需要注意的是，这儿地址可别+1了，Thumb的+1只在运行和Hook时需要考虑，打Patch可别想。&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补环境怎么补补什么\"><a class=\"markdownIt-Anchor\" href=\"#补环境怎么补补什么\">#</a> 补环境怎么补补什么？</h2>\n<p>我们既可以根据报错提示，在 AbstractJni 对应的函数体内，依葫芦画瓢，case &quot;xxx“。<br>\n也可以在我们的 zuiyou 类中补，因为 zuiyou 类继承了 AbstractJNI。<br>\n关于补法，有两种实践方法都很有道理</p>\n<ul>\n<li>全部在用户类中补，防止项目迁移或者 Unidbg 更新带来什么问题，这样做代码的移植性比较好。</li>\n<li>自定义 JAVA 方法在用户类中补，通用的方法在 AbstractJNI 中补，这样做的好处是，之后运行的项目如果调用通用方法，就不用做重复的修补工作。</li>\n</ul>\n<h2 id=\"如何主动调用一个-native-函数\"><a class=\"markdownIt-Anchor\" href=\"#如何主动调用一个-native-函数\">#</a> 如何主动调用一个 Native 函数</h2>\n<p>在 Frida 中可以使用 NativeFunction API 主动调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function call_65540(base_addr)&#123;</span><br><span class=\"line\">    // 函数在内存中的地址</span><br><span class=\"line\">    var real_addr = base_addr.add(0x65541)</span><br><span class=\"line\">    var md5_function = new NativeFunction(real_addr, &quot;int&quot;, [&quot;pointer&quot;, &quot;int&quot;, &quot;pointer&quot;])</span><br><span class=\"line\">    // 参数1 明文字符串的指针</span><br><span class=\"line\">    var input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    var arg1 = Memory.allocUtf8String(input);</span><br><span class=\"line\">    // 参数2 明文长度</span><br><span class=\"line\">    var arg2 = input.length;</span><br><span class=\"line\">    // 参数3，存放结果的buffer</span><br><span class=\"line\">    var arg3 = Memory.alloc(16);</span><br><span class=\"line\">    md5_function(arg1, arg2, arg3);</span><br><span class=\"line\">    console.log(hexdump(arg3,&#123;length:0x10&#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function callMd5()&#123;</span><br><span class=\"line\">    // 确定SO 的基地址</span><br><span class=\"line\">    var base_addr = Module.findBaseAddress(&quot;libnet_crypto.so&quot;);</span><br><span class=\"line\">    call_65540(base_addr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// frida -UF -l path\\hookright.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Unidbg 也是类似的，只不过换一下 API 罢了，让我们来看一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void callMd5()&#123;</span><br><span class=\"line\">    List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg1</span><br><span class=\"line\">    String input = &quot;r0ysue&quot;;</span><br><span class=\"line\">    // malloc memory</span><br><span class=\"line\">    MemoryBlock memoryBlock1 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    // get memory pointer</span><br><span class=\"line\">    UnidbgPointer input_ptr=memoryBlock1.getPointer();</span><br><span class=\"line\">    // write plainText on it</span><br><span class=\"line\">    input_ptr.write(input.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg2</span><br><span class=\"line\">    int input_length = input.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    // arg3 -- buffer</span><br><span class=\"line\">    MemoryBlock memoryBlock2 = emulator.getMemory().malloc(16, false);</span><br><span class=\"line\">    UnidbgPointer output_buffer=memoryBlock2.getPointer();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 填入参入</span><br><span class=\"line\">    list.add(input_ptr);</span><br><span class=\"line\">    list.add(input_length);</span><br><span class=\"line\">    list.add(output_buffer);</span><br><span class=\"line\">    // run</span><br><span class=\"line\">    module.callFunction(emulator, 0x65540 + 1, list.toArray());</span><br><span class=\"line\"></span><br><span class=\"line\">    // print arg3</span><br><span class=\"line\">    Inspector.inspect(output_buffer.getByteArray(0, 0x10), &quot;output&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需要注意，在 Unidbg 中，同样的功能有至少两种实现和写法 ——Unicorn 的原生方法以及 Unidbg 封装后的方法，在阅读别人代码时需要灵活变通。就好比 <strong>getR0long</strong> 和<strong> emulator.getBackend ().reg_read (ArmConst.UC_ARM_REG_R0)</strong>，它们都是获取寄存器 R0 的数值。</p>\n<h2 id=\"jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace-trace-我们在参数还没完全转换完的情况下unidbg-就退出了\">#</a> JNItrace trace 我们在参数还没完全转换完的情况下，Unidbg 就退出了</h2>\n<p>这种情况下，可能的原因有很多，但可能性较大的是两个</p>\n<ul>\n<li>上下文环境缺失</li>\n<li>样本使用某种手段检测或反制了 Unidbg</li>\n</ul>\n<p>先看一下是否是上下文的问题，假设是上下文缺失，通俗的讲就是在 SO 加载后到我们的 main 函数调用前的这段时间里，样本需要调用一些函数对 SO 进行初始化，而我们没有注意也没做这个事，这导致了 Unidbg 无法顺利运行。</p>\n<h1 id=\"抓包\"><a class=\"markdownIt-Anchor\" href=\"#抓包\">#</a> 抓包</h1>\n<h2 id=\"对于服务器校验证书如何抓包\"><a class=\"markdownIt-Anchor\" href=\"#对于服务器校验证书如何抓包\">#</a> 对于服务器校验证书如何抓包？</h2>\n<p>安卓可以使用<a href=\"https://github.com/r0ysue/r0capture\"> r0capture - 安卓应用层抓包通杀脚本</a>进行抓包分析。</p>\n<h1 id=\"验证码\"><a class=\"markdownIt-Anchor\" href=\"#验证码\">#</a> 验证码</h1>\n<h2 id=\"遇到验证码验证怎么办\"><a class=\"markdownIt-Anchor\" href=\"#遇到验证码验证怎么办\">#</a> 遇到验证码验证怎么办？</h2>\n<p>可以使用<a href=\"https://github.com/sml2h3/ddddocr\"> ddddocr - Python 库 通用验证码识别库</a>进行识别，支持老版验证码，当前验证码支持部分滑块文字点选等。</p>\n",
            "tags": [
                "思路"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/42317.html",
            "url": "https://haysalan.github.io/posts/42317.html",
            "title": "android证书安装与校验相关解决办法",
            "date_published": "2023-12-25T06:17:05.000Z",
            "content_html": "<h1 id=\"android-安装证书\"><a class=\"markdownIt-Anchor\" href=\"#android-安装证书\">#</a> Android 安装证书</h1>\n<h2 id=\"magisk-安装证书插件推荐\"><a class=\"markdownIt-Anchor\" href=\"#magisk-安装证书插件推荐\">#</a> Magisk 安装证书插件（推荐）</h2>\n<p>Magisk 中安装插件并<strong>重启</strong>，在手机<strong>设置</strong>安全中<strong>正常手动安装</strong>证书至<strong>用户证书</strong>，接着<strong>重启</strong>手机用户证书则会<strong>移动至系统</strong>证书。<br>\n<a href=\"https://www.yuque.com/attachments/yuque/0/2023/zip/26634545/1703485160886-247fbe50-2bba-4cc0-a497-de50d632fce2.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fzip%2F26634545%2F1703485160886-247fbe50-2bba-4cc0-a497-de50d632fce2.zip%22%2C%22name%22%3A%22Move_Certificates-v1.9.zip%22%2C%22size%22%3A6632%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u5964d71d-391f-441d-b906-9b9861b2cf1%22%2C%22taskType%22%3A%22transfer%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22G2ubz%22%2C%22card%22%3A%22file%22%7D\">Move_Certificates-v1.9.zip</a></p>\n<h2 id=\"shell-命令安装\"><a class=\"markdownIt-Anchor\" href=\"#shell-命令安装\">#</a> Shell 命令安装</h2>\n<p><strong>操作证书相关命令</strong>（kali 自带 openssl）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看crt\\der格式证书</span></span><br><span class=\"line\">openssl x509 -in FiddlerRoot.crt -inform DER -noout -text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看pem证书</span></span><br><span class=\"line\">openssl x509 -in certificate.pem -inform pem -noout -text</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">crt/der转pem</span></span><br><span class=\"line\">openssl x509 -in FiddlerRoot.crt -inform DER -out certificate.pem -outform PEM</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">pem转der/crt</span></span><br><span class=\"line\">openssl x509 -in certificate.pem -inform PEM -out FiddlerRoot.der -outform DER</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">计算pem证书<span class=\"built_in\">hash</span>值</span></span><br><span class=\"line\">openssl x509 -subject_hash_old -in Desktop.pem</span><br></pre></td></tr></table></figure>\n<p>导入到系统前需要<strong>重命名</strong>证书 <strong>hash 值.0 -&gt; xxxx.0</strong>。如果存在文件名<strong>冲突</strong>，则可将 <code>.0</code>  改为 <code>.1</code>  或 <code>.2</code>  等等。<br>\n<strong>新开</strong>一个 <code>cmd</code>  执行以下命令</p>\n<blockquote>\n<p><strong>hash</strong> 值通过<strong> pem</strong> 证书计算得到（上面最后一条指令）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\">adb push xxxxxxx.0 /system/etc/security/cacerts/</span><br><span class=\"line\">adb shell</span><br><span class=\"line\">cd /system/etc/security/cacerts/</span><br><span class=\"line\">chmod 644 xxxxxxx.0</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "证书",
                "magisk"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/45467.html",
            "url": "https://haysalan.github.io/posts/45467.html",
            "title": "android逆向分析环境配置",
            "date_published": "2023-12-20T02:49:06.000Z",
            "content_html": "<h1 id=\"资源文件\"><a class=\"markdownIt-Anchor\" href=\"#资源文件\">#</a> 资源文件</h1>\n<p><a href=\"https://www.yuque.com/attachments/yuque/0/2023/zip/26634545/1703052470975-a479d323-df18-42ff-853f-276c2131959a.zip?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fzip%2F26634545%2F1703052470975-a479d323-df18-42ff-853f-276c2131959a.zip%22%2C%22name%22%3A%22adb-fastboot.zip%22%2C%22size%22%3A3765786%2C%22ext%22%3A%22zip%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u7cda5742-2eb3-451d-b580-34c5f297476%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22application%2Fx-zip-compressed%22%2C%22__spacing%22%3A%22both%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22KebVn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D\">adb-fastboot.zip</a></p>\n<h1 id=\"获取-root-权限\"><a class=\"markdownIt-Anchor\" href=\"#获取-root-权限\">#</a> 获取 root 权限</h1>\n<h2 id=\"magisk\"><a class=\"markdownIt-Anchor\" href=\"#magisk\">#</a> Magisk</h2>\n<p>magisk 中文网：<a href=\"https://magiskcn.com/\">https://magiskcn.com/</a><br>\nmagisk 官网：<a href=\"https://magiskmanager.com/\">https://magiskmanager.com/</a></p>\n<h3 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h3>\n<ul>\n<li>解锁 Bootloader</li>\n<li>提取 boot.img (卡刷包中有)</li>\n<li>PC 端<strong> adb-fastboot</strong> 环境</li>\n</ul>\n<p>修补 boot.img<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1703052109455-296af09d-fccf-4099-82e3-7dae58f608de.gif#averageHue=%23eeedee&amp;clientId=ue2fcaaf7-e91c-4&amp;from=drop&amp;id=ude4dd989&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=4240369&amp;status=done&amp;style=none&amp;taskId=u50b904ac-b0b4-4a7d-ad2f-b12e0d4fe07&amp;title=\" alt=\"PixPin_2023-12-20_09-51-40.gif\"></p>\n<h1 id=\"安装证书\"><a class=\"markdownIt-Anchor\" href=\"#安装证书\">#</a> 安装证书</h1>\n<p>安装证书详细步骤：<a href=\"/posts/42317.html\">android 证书安装与校验相关解决办法</a></p>\n<h1 id=\"问题记录\"><a class=\"markdownIt-Anchor\" href=\"#问题记录\">#</a> 问题记录</h1>\n<h2 id=\"小米-8-写入-boot-报错\"><a class=\"markdownIt-Anchor\" href=\"#小米-8-写入-boot-报错\">#</a> 小米 8 写入 boot 报错</h2>\n<h3 id=\"write-to-device-failed-invalid-argument\"><a class=\"markdownIt-Anchor\" href=\"#write-to-device-failed-invalid-argument\">#</a> Write to device failed (Invalid argument)</h3>\n<p>报错详情 -&gt;** **<a href=\"https://blog.csdn.net/qq_39441603/article/details/124679556\"> 原文地址</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\user\\Downloads\\adb-fastboot&gt;fastboot flash boot magisk_patched-26400_QSOWo.img</span><br><span class=\"line\">Warning: skip copying boot image avb footer (boot partition size: 0, boot image size: 45851946).</span><br><span class=\"line\">Sending &#x27;boot&#x27; (44777 KB)                          FAILED (Write to device failed (Invalid argument))</span><br><span class=\"line\">fastboot: error: Command failed</span><br></pre></td></tr></table></figure>\n<p>新建文件 <code>txt</code>  文件粘贴代码块内容，保存后修改后缀为 <code>bat</code> ，以管理员方式运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;osvc&quot; /t REG_BINARY /d &quot;0000&quot; /f</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;SkipContainerIdQuery&quot; /t REG_BINARY /d &quot;01000000&quot; /f</span><br><span class=\"line\">reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\usbflags\\18D1D00D0100&quot; /v &quot;SkipBOSDescriptorQuery&quot; /t REG_BINARY /d &quot;01000000&quot; /f</span><br><span class=\"line\"></span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<p>执行完后，执行写入 boot 成功。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1703040985764-924bd56a-4821-4b6f-afc5-67df9f4fe391.png#averageHue=%231d1d1d&amp;clientId=ucd4155a3-2258-4&amp;from=paste&amp;height=82&amp;id=u3ba72421&amp;originHeight=123&amp;originWidth=1140&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19723&amp;status=done&amp;style=none&amp;taskId=uff1395f0-22ae-459a-967d-4eadd322f82&amp;title=&amp;width=760\" alt=\"image.png\"></p>\n",
            "tags": [
                "magisk",
                "andorid",
                "fastboot",
                "root"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/8117.html",
            "url": "https://haysalan.github.io/posts/8117.html",
            "title": "Frida三板斧的安装配置与基本使用",
            "date_published": "2023-12-18T07:59:47.000Z",
            "content_html": "<h1 id=\"frida\"><a class=\"markdownIt-Anchor\" href=\"#frida\">#</a> Frida</h1>\n<p>面向开发人员、逆向工程师和安全研究人员的动态检测工具包。<br>\nfrida 文档：<a href=\"https://frida.re/docs/home/\">https://frida.re/docs/home/</a></p>\n<h2 id=\"对应版本\"><a class=\"markdownIt-Anchor\" href=\"#对应版本\">#</a> 对应版本</h2>\n<p>frida&amp;frida-tools 版本对应查看 ：<a href=\"https://github.com/frida/frida/releases\">frida-releases</a><br>\n 找到你使用 frida 的版本，查看其版本下<strong> frida-tools</strong> 的版本，它们就是对应版本。（建议多准备几个 Python 与 firda 的版本，因为它并不稳定）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install frida==14.2.13</span><br><span class=\"line\">pip install frida-tools==9.2.1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702889862515-455c0fb7-9dc7-4854-a6d6-c94c36b24e9e.gif#averageHue=%23fcfbfb&amp;clientId=ua9a61f28-e353-4&amp;from=drop&amp;id=u694dfb9e&amp;originHeight=1363&amp;originWidth=2038&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=5812512&amp;status=done&amp;style=none&amp;taskId=u5b43f4cc-ded4-442f-9e7d-b7f790a8823&amp;title=\" alt=\"PixPin_2023-12-18_16-57-12.gif\"></p>\n<h2 id=\"frida-server\"><a class=\"markdownIt-Anchor\" href=\"#frida-server\">#</a> frida-server</h2>\n<p>安卓手机需要安装 frida-server，版本与 frida<strong> 版本需一致</strong>，根据<strong>设备架构</strong>选择 x86 或 arm 等。<br>\n<strong>解压文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7x x frida-server.xz</span><br></pre></td></tr></table></figure>\n<p><strong>启动 frida-server</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb root</span><br><span class=\"line\">adb push frida-server /data/local/tmp/</span><br><span class=\"line\">adb shell &quot;chmod 755 /data/local/tmp/frida-server&quot;</span><br><span class=\"line\">adb shell &quot;/data/local/tmp/frida-server&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>测试服务</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida-ps -U  // 查看正在运行进程</span><br></pre></td></tr></table></figure>\n<p>显示如下内容则表示服务启动，手机<strong>重启</strong>后<strong>需</strong>要<strong>再次</strong>执行命令<strong>启动</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  PID NAME</span><br><span class=\"line\"> 1590 com.xxx.xxx</span><br><span class=\"line\">13194 com.xxxx.xxxxx</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frida -FU packagename -l hookscript.js</span><br></pre></td></tr></table></figure>\n<h1 id=\"jnitrace\"><a class=\"markdownIt-Anchor\" href=\"#jnitrace\">#</a> Jnitrace</h1>\n<p>JNItrace 是一个基于 Frida 框架的<strong> Hook jni</strong> 方法的库。<a href=\"https://github.com/chame1eon/jnitrace\">https://github.com/chame1eon/jnitrace</a><br>\nPython <strong>安装</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jnitrace   <span class=\"comment\">// 需要frida版本14以上</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a class=\"markdownIt-Anchor\" href=\"#依赖\">#</a> 依赖：</h2>\n<ul>\n<li>arm、arm64、x86 或 x64 Android 设备</li>\n<li>Frida 安装在 Android 设备上</li>\n<li>Frida 支持 &gt; 14</li>\n<li>使用 Python 3 和 pip 的 Linux、Mac 或 Windows 主机</li>\n</ul>\n<h2 id=\"启动命令\"><a class=\"markdownIt-Anchor\" href=\"#启动命令\">#</a> 启动命令：</h2>\n<p>两个参数分别为<strong>待分析的 SO</strong> 与<strong> APP 包名</strong>。-l 参数可以多次使用  <code>-l libname.so -l libname1.so ...</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<p>默认使用  <code>spawn</code>  启动，可以通过  <code>-m attach</code>  设置通过  <code>attach</code>  启。</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jnitrace -m attach -l libname.so packagename</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>&gt;&gt;</code>  导出 log 日志保存至文件，控制台将不输出 log。<br>\n例： <code>jnitrace -l libname packagename &gt;&gt; jnitrace.txt</code></p>\n</blockquote>\n<h1 id=\"objection\"><a class=\"markdownIt-Anchor\" href=\"#objection\">#</a> objection</h1>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>官方安装教程：<a href=\"https://github.com/sensepost/objection/wiki/Installation\">https://github.com/sensepost/objection/wiki/Installation</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U objection</span><br></pre></td></tr></table></figure>\n<p>在内存中所有已加载的类中搜索包含特定关键词的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking search classes</span><br></pre></td></tr></table></figure>\n<p>hook java 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class_method &lt;methodName&gt;</span><br></pre></td></tr></table></figure>\n<p>hook java 类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking watch class &lt;classname&gt;</span><br></pre></td></tr></table></figure>\n<p>列出进程所有的 activity</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android hooking list activities</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida",
                "jnitrace",
                "objection"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/41869.html",
            "url": "https://haysalan.github.io/posts/41869.html",
            "title": "Frida相关API介绍",
            "date_published": "2023-12-18T02:41:22.000Z",
            "content_html": "<h1 id=\"静态实例方法-hook\"><a class=\"markdownIt-Anchor\" href=\"#静态实例方法-hook\">#</a> 静态 &amp; 实例方法 Hook</h1>\n<p>静态和实例方法的 hook 代码一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> className = <span class=\"string\">&quot;com.xxxx.xx&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"string\">&quot;func&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(className);</span><br><span class=\"line\"><span class=\"comment\">// 静态和实例方法的hook代码一致</span></span><br><span class=\"line\">classObject[funcName].<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call <span class=\"subst\">$&#123;funcName&#125;</span> - param: `</span>, x);</span><br><span class=\"line\">  x = <span class=\"string\">&quot;param&quot;</span>; <span class=\"comment\">// 修改参数 除基础类型外其他类型需要自行构造。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"variable language_\">this</span>[funcName](x);</span><br><span class=\"line\">  <span class=\"comment\">// result = &quot;param&quot;;  // 修改返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"构造方法的-hook-init\"><a class=\"markdownIt-Anchor\" href=\"#构造方法的-hook-init\">#</a> 构造方法的 hook ($init)</h1>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> classObject = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.xxx.xx&quot;</span>);</span><br><span class=\"line\">classObject.<span class=\"property\">$init</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;className&#125;</span> -&gt; call $init - param: `</span>, a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.$init(a, b);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "frida"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/43239.html",
            "url": "https://haysalan.github.io/posts/43239.html",
            "title": "charles移动&PC抓包配置",
            "date_published": "2023-12-14T05:59:32.000Z",
            "content_html": "<h1 id=\"安装-charles\"><a class=\"markdownIt-Anchor\" href=\"#安装-charles\">#</a> 安装 charles</h1>\n<p>官网下载：<a href=\"https://www.charlesproxy.com/download/\">https://www.charlesproxy.com/download/</a></p>\n<h1 id=\"电脑抓包\"><a class=\"markdownIt-Anchor\" href=\"#电脑抓包\">#</a> 电脑抓包</h1>\n<p>安装好证书，打开 charles 这开启端口抓包，可设置 PC 系统代理来抓包数据，但通常不推荐这么做，推荐使用<a href=\"https://microsoftedge.microsoft.com/addons/detail/fdbloeknjpnloaggplaobopplkdhnikc\"> Proxy SwitchyOmega</a> （Edge 插件 | chrome 也有此插件）来进行浏览器抓包。</p>\n<h2 id=\"代理设置\"><a class=\"markdownIt-Anchor\" href=\"#代理设置\">#</a> 代理设置</h2>\n<p>操作：Proxy -&gt; Proxy Settings 1. 勾选 Enable tranaparent HTTP proxying 2. 勾选 Enable SOCKS proxy</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702542982696-ff3a7b7a-cb54-45f2-9240-15a56ef773de.png#averageHue=%23eeedec&amp;clientId=u81dbcc76-2115-4&amp;from=paste&amp;height=466&amp;id=u1a21edff&amp;originHeight=699&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=39284&amp;status=done&amp;style=none&amp;taskId=u10dc5636-6596-47fb-a940-a83a8f00c23&amp;title=&amp;width=542\" alt=\"image.png\"></p>\n<h2 id=\"抓取端口设置\"><a class=\"markdownIt-Anchor\" href=\"#抓取端口设置\">#</a> 抓取端口设置</h2>\n<p>操作：Proxy -&gt; <a href=\"https://so.csdn.net/so/search?q=SSL&amp;spm=1001.2101.3001.7020\">SSL</a> Proxying Settings 1. 勾选 Enable SSL Proxying 2. 点击 Add，添加抓取端口</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702542919357-abd6010c-5334-4b49-9366-46eb366e5ad5.png#averageHue=%23ebeae9&amp;clientId=u81dbcc76-2115-4&amp;from=paste&amp;height=438&amp;id=u20559f8c&amp;originHeight=657&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=61836&amp;status=done&amp;style=none&amp;taskId=u63c04ad3-1aa3-44e5-a2e7-a9c0e2dda23&amp;title=&amp;width=542\" alt=\"image.png\"></p>\n<h2 id=\"安装证书\"><a class=\"markdownIt-Anchor\" href=\"#安装证书\">#</a> 安装证书</h2>\n<p>操作：Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate -&gt; 安装证书 -&gt; 本地计算机 -&gt; 将所有的证书都放入下列存储 -&gt; 点击浏览，选择” 受信任的根证书颁发机构” -&gt; 完成</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702542740132-c2b41f8f-4bd4-4534-9f3a-7bd6e3e3d394.gif#averageHue=%23efefeb&amp;clientId=u81dbcc76-2115-4&amp;from=drop&amp;id=ueca600f2&amp;originHeight=1197&amp;originWidth=1980&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=2581990&amp;status=done&amp;style=none&amp;taskId=u9846250a-e561-479a-bcd4-5d345d04fb2&amp;title=\" alt=\"PixPin_2023-12-14_16-31-31.gif\"></p>\n<h1 id=\"移动抓包\"><a class=\"markdownIt-Anchor\" href=\"#移动抓包\">#</a> 移动抓包</h1>\n<p>手机和 PC 处于同一网络下，将 charles<strong> 证书</strong>安装至<strong>系统</strong>（安卓 7 以下不用），配置<strong> WiFi 代理</strong>或者<strong> clash 代理转发</strong>，如此即可在 PC 上抓到手机流量包了。</p>\n<h2 id=\"安装证书-2\"><a class=\"markdownIt-Anchor\" href=\"#安装证书-2\">#</a> 安装证书</h2>\n<p>准备安装 android 证书，按照下方步骤，显示图片弹窗后进行下一步。<br>\n<strong>Help</strong>-&gt; <strong>SSL Proxying</strong> -&gt;<strong>Install Charles Root Certificate On a Mobile Device</strong>。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1703312970820-c7e0626a-d8c1-4be9-8f91-036c35357056.png#averageHue=%23e7e5e3&amp;clientId=uef12f301-3e43-4&amp;from=paste&amp;height=170&amp;id=u5cc1829c&amp;originHeight=255&amp;originWidth=814&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=26000&amp;status=done&amp;style=none&amp;taskId=ue3ce1d79-7a01-4302-af17-d1841650ceb&amp;title=&amp;width=542.6666666666666\" alt=\"image.png\"><br>\n 手机浏览器输入地址 <a href=\"http://chls.pro/ssl\">http://chls.pro/ssl</a> 下载 crt 证书<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702535270215-e71cd701-5988-4f3b-a89f-29b9bf53ed72.png#averageHue=%239a9ca4&amp;clientId=ufc930610-f89c-4&amp;from=paste&amp;height=819&amp;id=Mcxwp&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=103675&amp;status=done&amp;style=none&amp;taskId=ubec0b902-275a-48bc-a551-3a86ba9f403&amp;title=&amp;width=394\" alt=\"image.png\"></p>\n<p>安装证书详细步骤：<a href=\"/2023/12/20/yuque/android%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%A0%A1%E9%AA%8C%E7%9B%B8%E5%85%B3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">android 证书安装与校验相关解决办法</a></p>\n<h2 id=\"手动设置代理\"><a class=\"markdownIt-Anchor\" href=\"#手动设置代理\">#</a> 手动设置代理</h2>\n<p>代理主机：<strong>PC</strong> 的 IP 地址，我这里是<strong> WiFi</strong> 所以是<strong> WLAN</strong> 的<strong> IPv4</strong> 地址。<br>\n代理端口：<strong>charles -&gt; Proxy -&gt; ProxySettings -&gt; Proxies</strong> 页面中的 <strong>HTTP Proxy -&gt; Port</strong> ，<strong>默认</strong>为<strong> 8888</strong>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702535694493-ac598886-d284-4c1f-afe7-eb1f2442bc2f.png#averageHue=%23817e7d&amp;clientId=ufc930610-f89c-4&amp;from=paste&amp;height=741&amp;id=ue0569354&amp;originHeight=1111&amp;originWidth=1794&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=287946&amp;status=done&amp;style=none&amp;taskId=ue22ead4e-85ab-48ed-b5aa-d597a7d05af&amp;title=&amp;width=1196\" alt=\"image.png\"></p>\n<h2 id=\"clash-配置代理转发\"><a class=\"markdownIt-Anchor\" href=\"#clash-配置代理转发\">#</a> clash 配置代理转发</h2>\n<p>打开 clash 依次点击 <strong>配置 -&gt; 加号 -&gt; 文件 -&gt; 浏览文件 -&gt; 配置文件</strong>，选择 MT 管理器打开，将下面代码<strong>根据注释修改</strong>后粘贴进去，保存好，启动服务即可。（下方有操作 gif）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mixed-port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">global</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9090</span></span><br><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;proxy_http&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.199</span> <span class=\"comment\"># 代理主机</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8888</span> <span class=\"comment\"># http代理端口</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;proxy_socks5&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.199</span> <span class=\"comment\"># 代理主机</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8889</span> <span class=\"comment\"># socks代理端口</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">proxy-groups:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br></pre></td></tr></table></figure>\n<p>配置名称随意，启动后记得选择代理模式哦！<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702537855126-591ef863-1e1b-4d96-853a-69762b62290b.gif#averageHue=%23ecebec&amp;clientId=ufc930610-f89c-4&amp;from=drop&amp;id=u5fc3d2e3&amp;originHeight=1228&amp;originWidth=591&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=3818248&amp;status=done&amp;style=none&amp;taskId=u4df31eeb-7401-42c3-95f4-02a5f80b311&amp;title=\" alt=\"PixPin_2023-12-14_15-10-03.gif\"></p>\n",
            "tags": [
                "charles",
                "抓包"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/26899.html",
            "url": "https://haysalan.github.io/posts/26899.html",
            "title": "小破站老版本（入门级）SO层Native方法分析",
            "date_published": "2023-12-09T01:25:03.000Z",
            "content_html": "<h1 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<p>APK：哔哩哔哩 6.13.0<br>\n 首先通过 charles 抓包（<a href=\"/2023/12/14/yuque/charles%E7%A7%BB%E5%8A%A8&amp;PC%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/\">charles 抓包配置</a>）发现加密参数是 sign（32 位）。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702545110875-4f85f617-f9b8-41f3-a026-5225f1ecb6fa.png#averageHue=%23efebe7&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=182&amp;id=ud746971e&amp;originHeight=273&amp;originWidth=699&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=27817&amp;status=done&amp;style=none&amp;taskId=u0382f2ee-b150-43bf-8767-3f42b87f7c9&amp;title=&amp;width=466\" alt=\"image.png\"></p>\n<p>使用 ajdx 打开 apk 后搜索 &quot;sign&quot; 并没有想要的数据，接着试着搜索 &quot;sign=&quot; 经过分析发现是 <code>com.bilibili.nativelibrary.LibBili.s</code>  生成。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702546159027-aa401add-1412-4a36-85ec-25f0ed79ab6b.png#averageHue=%23fdf8f6&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=341&amp;id=ubff81967&amp;originHeight=512&amp;originWidth=873&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=36640&amp;status=done&amp;style=none&amp;taskId=ua7d5337b-80c2-4ec6-9747-241d38418ae&amp;title=&amp;width=582\" alt=\"image.png\"></p>\n<h1 id=\"验证加密\"><a class=\"markdownIt-Anchor\" href=\"#验证加密\">#</a> 验证加密</h1>\n<p>使用 frida 来 hook 验证以下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hookSign</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title class_\">LibBili</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">LibBili</span>[<span class=\"string\">&quot;s&quot;</span>].<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">sortedMap</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">        <span class=\"string\">`LibBili.s is called: sortedMap=<span class=\"subst\">$&#123;sortedMap.entrySet().toArray()&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"variable language_\">this</span>[<span class=\"string\">&quot;s&quot;</span>](sortedMap);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`LibBili.s result=<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(hookSign);</span><br></pre></td></tr></table></figure>\n<p>frida hook 日志，很明显 sign 就是在这里面生成的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[MI 8 Pro::tv.danmaku.bili ]-&gt; LibBili.s is called: sortedMap=access_key=null,appkey=1d8b6e7d45233436,build=6130400,c_locale=zh-Hans_CN,channel=xxl_wyyd_001,mVersion=71,mallVersion=6130400,mobi_app=android,platform=android,s_locale=zh-Hans_CN,statistics=&#123;&quot;appId&quot;:1,&quot;platform&quot;:3,&quot;version&quot;:&quot;6.13.0&quot;,&quot;abtest&quot;:&quot;&quot;&#125;</span><br><span class=\"line\">LibBili.s result=access_key=&amp;appkey=1d8b6e7d45233436&amp;build=6130400&amp;c_locale=zh-Hans_CN&amp;channel=xxl_wyyd_001&amp;mVersion=71&amp;mallVersion=6130400&amp;mobi_app=android&amp;platform=android&amp;s_locale=zh-Hans_CN&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.13.0%22%2C%22abtest%22%3A%22%22%7D&amp;ts=1702547190&amp;sign=83c0620895711a111a4fc8f046b76d9d</span><br></pre></td></tr></table></figure>\n<h1 id=\"定位-so\"><a class=\"markdownIt-Anchor\" href=\"#定位-so\">#</a> 定位 SO</h1>\n<p>使用大佬的<a href=\"https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_RegisterNatives.js\"> hook 脚本</a>并作了点修改</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hook_RegisterNatives</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> symbols = <span class=\"title class_\">Module</span>.<span class=\"title function_\">enumerateSymbolsSync</span>(<span class=\"string\">&quot;libart.so&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> addrRegisterNatives = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; symbols.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> symbol = symbols[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;art&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;JNI&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;RegisterNatives&quot;</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      symbol.<span class=\"property\">name</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;CheckJNI&quot;</span>) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      addrRegisterNatives = symbol.<span class=\"property\">address</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;RegisterNatives is at &quot;</span>, symbol.<span class=\"property\">address</span>, symbol.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (addrRegisterNatives != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(addrRegisterNatives, &#123;</span><br><span class=\"line\">          <span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> env = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> java_class = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> class_name = <span class=\"title class_\">Java</span>.<span class=\"property\">vm</span>.<span class=\"title function_\">tryGetEnv</span>().<span class=\"title function_\">getClassName</span>(java_class);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(class_name);</span></span><br><span class=\"line\">            <span class=\"comment\">// 筛选类</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> taget_class = <span class=\"string\">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (class_name === taget_class) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n[RegisterNatives] method_count:&quot;</span>, args[<span class=\"number\">3</span>]);</span><br><span class=\"line\">              <span class=\"keyword\">var</span> methods_ptr = <span class=\"title function_\">ptr</span>(args[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> method_count = <span class=\"built_in\">parseInt</span>(args[<span class=\"number\">3</span>]);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; method_count; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> name_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">var</span> sig_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(</span><br><span class=\"line\">                    i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span> + <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span></span><br><span class=\"line\">                  )</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">var</span> fnPtr_ptr = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readPointer</span>(</span><br><span class=\"line\">                  methods_ptr.<span class=\"title function_\">add</span>(</span><br><span class=\"line\">                    i * <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">3</span> + <span class=\"title class_\">Process</span>.<span class=\"property\">pointerSize</span> * <span class=\"number\">2</span></span><br><span class=\"line\">                  )</span><br><span class=\"line\">                );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> name = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readCString</span>(name_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> sig = <span class=\"title class_\">Memory</span>.<span class=\"title function_\">readCString</span>(sig_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> find_module = <span class=\"title class_\">Process</span>.<span class=\"title function_\">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                  <span class=\"string\">&quot;[RegisterNatives] java_class:&quot;</span>,</span><br><span class=\"line\">                  class_name,</span><br><span class=\"line\">                  <span class=\"string\">&quot;name:&quot;</span>,</span><br><span class=\"line\">                  name,</span><br><span class=\"line\">                  <span class=\"string\">&quot;sig:&quot;</span>,</span><br><span class=\"line\">                  sig,</span><br><span class=\"line\">                  <span class=\"string\">&quot;fnPtr:&quot;</span>,</span><br><span class=\"line\">                  fnPtr_ptr,</span><br><span class=\"line\">                  <span class=\"string\">&quot;module_name:&quot;</span>,</span><br><span class=\"line\">                  find_module.<span class=\"property\">name</span>,</span><br><span class=\"line\">                  <span class=\"string\">&quot;module_base:&quot;</span>,</span><br><span class=\"line\">                  find_module.<span class=\"property\">base</span>,</span><br><span class=\"line\">                  <span class=\"string\">&quot;offset:&quot;</span>,</span><br><span class=\"line\">                  <span class=\"title function_\">ptr</span>(fnPtr_ptr).<span class=\"title function_\">sub</span>(find_module.<span class=\"property\">base</span>)</span><br><span class=\"line\">                );</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setImmediate</span>(hook_RegisterNatives);</span><br></pre></td></tr></table></figure>\n<p>添加筛选条件后输出的结果不多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spawning `tv.danmaku.bili`...</span><br><span class=\"line\">RegisterNatives is at  0xf0b3cbd9 _ZN3art3JNIILb0EE15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span><br><span class=\"line\">RegisterNatives is at  0xf0b910d5 _ZN3art3JNIILb1EE15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span><br><span class=\"line\">Spawned `tv.danmaku.bili`. Resuming main thread!</span><br><span class=\"line\">[MI 8 Pro::tv.danmaku.bili ]-&gt;</span><br><span class=\"line\">[RegisterNatives] method_count: 0x7</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: a sig: (Ljava/lang/String;)Ljava/lang/String; fnPtr: 0xb8369c35 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c35</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: ao sig: (Ljava/lang/String;II)Ljava/lang/String; fnPtr: 0xb8369c3b module_name: libbili.so module_base: 0xb8368000 offset: 0x1c3b</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: b sig: (Ljava/lang/String;)Ljavax/crypto/spec/IvParameterSpec; fnPtr: 0xb8369c49 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c49</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: s sig: (Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c4f module_name: libbili.so module_base: 0xb8368000 offset: 0x1c4f</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: so sig: (Ljava/util/SortedMap;II)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c55 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c55</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: getCpuCount sig: ()I fnPtr: 0xb8369c63 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c63</span><br><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: getCpuId sig: ()I fnPtr: 0xb8369c67 module_name: libbili.so module_base: 0xb8368000 offset: 0x1c67</span><br></pre></td></tr></table></figure>\n<p>这就是我们需要的结果，module_name: <a href=\"http://libbili.so\">libbili.so</a> 表示 s 函数在 <strong><a href=\"http://libbili.so\">libbili.so</a></strong> 中。<br>\noffset: 0x1c4f 偏移量为 0x1c4f 可以理解为函数起始地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[RegisterNatives] java_class: com.bilibili.nativelibrary.LibBili name: s sig: (Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery; fnPtr: 0xb8369c4f module_name: libbili.so module_base: 0xb8368000 offset: 0x1c4f</span><br></pre></td></tr></table></figure>\n<h1 id=\"分析-so\"><a class=\"markdownIt-Anchor\" href=\"#分析-so\">#</a> 分析 SO</h1>\n<p>使用<strong> file</strong> 命令查看 so 的位数是多少位，可以看到是 32 位的，那么使用 32 位的 ida 打开。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702545860250-d8c98fed-5255-4a16-947a-c16016a59d92.png#averageHue=%232e3039&amp;clientId=u38bf89dd-3cf3-4&amp;from=paste&amp;height=72&amp;id=u4365b7e2&amp;originHeight=108&amp;originWidth=1195&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31218&amp;status=done&amp;style=none&amp;taskId=uae38cbac-a117-4898-9e10-2e4569eeff4&amp;title=&amp;width=796.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"偏移量地址定位函数\"><a class=\"markdownIt-Anchor\" href=\"#偏移量地址定位函数\">#</a> 偏移量地址定位函数</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550208616-9e78b5a6-c72b-4f48-bd9f-75b6684b755b.gif#averageHue=%23f7f7f6&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u1e1c6921&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=454668&amp;status=done&amp;style=none&amp;taskId=ua43a4d49-06e5-478f-ac28-235419421ac&amp;title=\" alt=\"PixPin_2023-12-14_18-36-22.gif\"></p>\n<h2 id=\"jni_onload-定位-s-函数\"><a class=\"markdownIt-Anchor\" href=\"#jni_onload-定位-s-函数\">#</a> JNI_OnLoad 定位 s 函数</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/gif/26634545/1702550232510-9c4a4843-75f5-4fce-a183-770783c0dddb.gif#averageHue=%23f6f6f5&amp;clientId=u26f63c50-11da-4&amp;from=drop&amp;id=u5aefa470&amp;originHeight=1328&amp;originWidth=2053&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=792808&amp;status=done&amp;style=none&amp;taskId=u3e2d9528-de56-415e-9185-2b963fb96eb&amp;title=\" alt=\"PixPin_2023-12-14_18-32-47.gif\"></p>\n",
            "tags": [
                "frida",
                "SO",
                "Native",
                "入门级"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/59917.html",
            "url": "https://haysalan.github.io/posts/59917.html",
            "title": "加速乐逆向",
            "date_published": "2023-11-08T09:00:04.000Z",
            "content_html": "<h1 id=\"声明\"><a class=\"markdownIt-Anchor\" href=\"#声明\">#</a> 声明</h1>\n<p>本逆向文章仅为学术交流和学习探讨之用，不代表任何官方立场或观点。文章内容仅供参考，读者应自行判断其真实性和可靠性。因使用本逆向文章而产生的任何直接或间接后果，本网站及作者不承担任何法律责任。请在使用本逆向文章前仔细阅读相关法律法规和条款，并确保您理解并接受本免责声明的全部内容。如有侵权行为或不当使用，请及时联系我们，我们将尽快处理。</p>\n<h1 id=\"逻辑分析\"><a class=\"markdownIt-Anchor\" href=\"#逻辑分析\">#</a> 逻辑分析</h1>\n<p>1.index.html 请求中有如下图两个 cookies。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435260379-8d57aed7-a002-4c53-900a-8e901924ed55.png#averageHue=%23eecd94&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=361&amp;id=ub58af60e&amp;originHeight=541&amp;originWidth=1211&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=56461&amp;status=done&amp;style=none&amp;taskId=u407de983-9f7e-4f3f-9701-d447caf96f7&amp;title=&amp;width=807.3333333333334\" alt=\"image.png\"> 2. 使用 charles 或其他抓包工具进行抓包，看到 index.html 进过三次加载，前两次是 521 状态。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435667713-255995fd-4aff-406e-ac33-4affeb7e17de.png#averageHue=%23f7e1de&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=136&amp;id=u23357e78&amp;originHeight=204&amp;originWidth=865&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=31079&amp;status=done&amp;style=none&amp;taskId=u60a45c58-ce2e-4a95-b867-0424086eb04&amp;title=&amp;width=576.6666666666666\" alt=\"image.png\"> 3. 第一次请求的  <code>&lt;script&gt;</code>  标签中进行了 cookie 设置，cookie 值如图是被混淆的。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699435810175-43c64164-fe6d-4413-8154-30811e494725.png#averageHue=%23f6efee&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=325&amp;id=ufda357d2&amp;originHeight=487&amp;originWidth=1180&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=45801&amp;status=done&amp;style=none&amp;taskId=ue94fa2eb-52a9-4c17-8129-1701b682529&amp;title=&amp;width=786.6666666666666\" alt=\"image.png\"><br>\n 放到浏览器控制台中执行得到如下结果，发现 cookie 的 name 和成功响应带的 cookie 一致。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436504827-0fb474f3-f3eb-4741-8d17-d1b5599d2edb.png#averageHue=%23faf7f4&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=102&amp;id=ud13a1a5c&amp;originHeight=153&amp;originWidth=1214&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28179&amp;status=done&amp;style=none&amp;taskId=u3aaeb1cd-a0c5-40f1-bcd0-174321fdc63&amp;title=&amp;width=809.3333333333334\" alt=\"image.png\"> 4. 第二次请求带上来第一次请求的 cookies-**jsl_clearance_s, 返回结果应该经过 ob 混淆的代码。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436659042-6623654a-c89e-417c-b09b-a69ac47db90e.png#averageHue=%23f5efed&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=468&amp;id=u24249c79&amp;originHeight=702&amp;originWidth=1434&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=104332&amp;status=done&amp;style=none&amp;taskId=u5a8a3feb-42d2-41de-8ac6-e2571ee4df5&amp;title=&amp;width=956\" alt=\"image.png\"> 5. 第三次成功响应，对比 cookies 发现，**jsl_clearance_s 变了，大概率是 ob 混淆文件对它做了修改。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699436842758-691796cb-f12c-49cf-b8da-52cc6d5694cc.png#averageHue=%23f7f2f1&amp;clientId=u282ecbe5-2f8d-4&amp;from=paste&amp;height=411&amp;id=u95876b19&amp;originHeight=616&amp;originWidth=1418&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=81899&amp;status=done&amp;style=none&amp;taskId=u50247f49-082d-40ec-be6f-152b6dcebad&amp;title=&amp;width=945.3333333333334\" alt=\"image.png\"></p>\n<h1 id=\"请求实现\"><a class=\"markdownIt-Anchor\" href=\"#请求实现\">#</a> 请求实现</h1>\n<p>解完混淆代码逻辑清晰可见<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699457082391-e396b4e4-0e34-4777-92d8-863d062d2dcb.png#averageHue=%23292e36&amp;clientId=u797940c7-3ac3-4&amp;from=paste&amp;height=614&amp;id=u6af0785e&amp;originHeight=767&amp;originWidth=1102&amp;originalType=binary%E2%88%B6=1.25&amp;rotation=0&amp;showTitle=false&amp;size=131952&amp;status=done&amp;style=none&amp;taskId=u2c86d18d-ec14-47c7-86c5-e9540582e6e&amp;title=&amp;width=881.6\" alt=\"image.png\"></p>\n<h2 id=\"python-请求代码\"><a class=\"markdownIt-Anchor\" href=\"#python-请求代码\">#</a> python 请求代码</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1699463090349-47df0f08-cc99-4b35-8fd4-294c07c81c4f.png#averageHue=%232d2c2c&amp;clientId=u797940c7-3ac3-4&amp;from=paste&amp;height=515&amp;id=u996c474e&amp;originHeight=644&amp;originWidth=772&amp;originalType=binary%E2%88%B6=1.25&amp;rotation=0&amp;showTitle=false&amp;size=77500&amp;status=done&amp;style=none&amp;taskId=u3f430bd5-7c7c-4867-9ee6-e759fdfc7f9&amp;title=&amp;width=617.6\" alt=\"image.png\"></p>\n<p>完整代码仓库: <a href=\"https://github.com/Alanhays/crawler/tree/main/SCDN_JSL\">https://github.com/Alanhays/crawler</a></p>\n",
            "tags": [
                "解混淆",
                "加速乐"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/50497.html",
            "url": "https://haysalan.github.io/posts/50497.html",
            "title": "TLS指纹-JA4",
            "date_published": "2023-10-21T01:31:26.000Z",
            "content_html": "<h2 id=\"官方解释\"><a class=\"markdownIt-Anchor\" href=\"#官方解释\">#</a> 官方解释</h2>\n<p>JA4 + 是一套易于使用和共享的网络指纹识别方法。这些方法既是人类可读的，也是机器可读的，以促进更有效的威胁搜寻和分析。这些指纹的用例包括扫描威胁参与者、恶意软件检测、会话劫持预防、合规性自动化、位置跟踪、DDoS 检测、威胁参与者分组、反向外壳检测等等。<br>\nJA4 系列 ：JA4/S/H/L/X/SSH，简称 JA4+<br>\n<a href=\"https://blog.foxio.io/ja4-network-fingerprinting-9376fe9ca637\"> 官方介绍</a> | <a href=\"https://github.com/FoxIO-LLC/ja4\">JA4 指纹</a></p>\n<p>初始指纹：<br>\nJA4 — TLS 客户端 JA4S — TLS 服务器响应<br>\n JA4H — HTTP 客户端</p>\n<p>JA4L — 光距离 / 位置<br>\n JA4X — X509 TLS 证书<br>\n JA4SSH — SSH 流量<br>\n更多指纹正在开发中，并将在发布时添加到 JA4+ 系列中。</p>\n<p>例子<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/webp/26634545/1697868649851-fc1d1b6c-4298-41cf-a8d5-28962645cc50.webp#averageHue=%23eaeaea&amp;clientId=ucffaa756-14f5-4&amp;from=ui&amp;id=u5b1e2317&amp;originHeight=496&amp;originWidth=614&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=40140&amp;status=done&amp;style=none&amp;taskId=ubf96421a-4174-421d-b1c4-b2abffba38f&amp;title=\" alt=\"1_ouP7r5IlQoTmameDpppq4g.webp\"></p>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "TLS/SSL",
                "JA4"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/1792.html",
            "url": "https://haysalan.github.io/posts/1792.html",
            "title": "TLS指纹-JA3",
            "date_published": "2023-10-21T00:38:54.000Z",
            "content_html": "<h2 id=\"官方解释\"><a class=\"markdownIt-Anchor\" href=\"#官方解释\">#</a> 官方解释</h2>\n<p>TLS 及其前身 SSL 用于为常见应用程序和恶意软件加密通信，以确保数据安全，因此可以隐藏在噪音中。要启动 TLS 会话，客户端将在 TCP 3 次握手之后发送 TLS 客户端 Hello 数据包。此数据包及其生成方式取决于构建客户端应用程序时使用的包和方法。服务器如果接受 TLS 连接，将使用基于服务器端库和配置以及 Client Hello 中的详细信息制定的 TLS Server Hello 数据包进行响应。由于 TLS 协商以明文形式传输，因此可以使用 TLS Client Hello 数据包中的详细信息来指纹和识别客户端应用程序。<br>\n<a href=\"https://engineering.salesforce.com/open-sourcing-ja3-92c9e53c3c41/\">官方介绍</a> | <a href=\"https://github.com/FoxIO-LLC/ja3\">JA3 指纹</a></p>\n<h2 id=\"ja3-原理\"><a class=\"markdownIt-Anchor\" href=\"#ja3-原理\">#</a> JA3 原理</h2>\n<p>JA3 收集以下字段的字节的十进制值；SSL 版本、接受的密码、扩展列表、椭圆曲线和椭圆曲线格式。然后，它按顺序将这些值连接在一起，使用 “，” 分隔每个字段，使用 “-” 分隔每个字段中的每个值。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/webp/26634545/1697851217544-efd479ce-e2f9-4582-8895-e2efe95fe3f5.webp#averageHue=%23f0efee&amp;clientId=u9d6790ac-ed8c-4&amp;from=paste&amp;height=837&amp;id=u1dbfb620&amp;originHeight=1256&amp;originWidth=1354&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=594364&amp;status=done&amp;style=none&amp;taskId=u22261562-ea35-4516-8852-7a2c8ad84f0&amp;title=&amp;width=902.6666666666666\" alt=\"0_QZ7tsC7MAET5lbLP.webp\"><br>\n 字段顺序如下：<br>\nSSLVersion，密码，扩展，椭圆曲线，椭圆曲线点格式<br>\n例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0</span><br></pre></td></tr></table></figure>\n<p>如果客户端 Hello 中没有 SSL 扩展，则字段留空。<br>\n例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,4–5–10–9–100–98–3–6–19–18–99,,,</span><br></pre></td></tr></table></figure>\n<p>然后对这些字符串进行 MD5 哈希处理，以生成易于使用和共享的 32 个字符的指纹。这是 JA3 SSL 客户端指纹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">769,47–53–5–10–49161–49162–49171–49172–50–56–19–4,0–10–11,23–24–25,0 → ada70206e40642a3e4461f35503241d5769,4–5–10–9–100–98–3–6–19–18–99,,,</span><br><span class=\"line\">→ de350869b8c85de67a350c8d186f11e6</span><br></pre></td></tr></table></figure>\n<p>我们还需要引入一些代码来解释 Google 的 GREASE（生成随机扩展和维持可扩展性），<a href=\"https://tools.ietf.org/html/draft-davidben-tls-grease-01\">如此处</a>所述。Google 将此用作防止 TLS 生态系统中扩展性失败的机制。JA3 完全忽略这些值，以确保使用 GREASE 的程序仍可以使用单个 JA3 哈希进行标识。</p>\n<h2 id=\"tls-检测判断\"><a class=\"markdownIt-Anchor\" href=\"#tls-检测判断\">#</a> TLS 检测判断</h2>\n<h3 id=\"tls-检测原理\"><a class=\"markdownIt-Anchor\" href=\"#tls-检测原理\">#</a> TLS 检测原理</h3>\n<blockquote>\n<p>抓包工具 wireshark、charles 只能查看 TLS 指纹，不能以此判断服务器检测了 TLS。</p>\n</blockquote>\n<p>在 HTTPS 协议中，TLS 协议是用来在客户端和服务器之间建立安全连接的，这个连接过程中就会生成 TLS 指纹。只要是 HTTPS 协议，必定会生成 TLS 指纹。<br>\n检测 TLS 是在服务端进行的，<strong>唯一</strong>判断是否检测 TLS 的手段就是<strong>测试</strong>和<strong>猜测</strong>。</p>\n<h3 id=\"未检测-tls\"><a class=\"markdownIt-Anchor\" href=\"#未检测-tls\">#</a> 未检测 TLS</h3>\n<ul>\n<li>验证请求头顺序</li>\n<li>检测 HTTP2.0</li>\n<li>curl 生成 code 可直接访问</li>\n<li>…</li>\n</ul>\n<h3 id=\"检测了-tls\"><a class=\"markdownIt-Anchor\" href=\"#检测了-tls\">#</a> 检测了 TLS</h3>\n<ul>\n<li>curl、api 调试工具、js 有可响应的就 python 不行。</li>\n<li>curl、js 都不行就浏览器可以。</li>\n<li>…</li>\n</ul>\n<h2 id=\"过校验示例\"><a class=\"markdownIt-Anchor\" href=\"#过校验示例\">#</a> 过校验示例</h2>\n<p>python 的 aiohttp | requests | httpx | scrapy 和 golang 相关的 ja3 指纹修改案例。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697867423544-d0cb481b-b803-4d8f-bc21-fec7ac4f18fd.png#averageHue=%23f4f2ef&amp;clientId=u44708746-5fd9-4&amp;from=paste&amp;height=101&amp;id=uc8e0d242&amp;originHeight=152&amp;originWidth=270&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=6334&amp;status=done&amp;style=none&amp;taskId=u48dd73f9-af7e-439c-8eae-ced91e6bee8&amp;title=&amp;width=180\" alt=\"image.png\"><br>\n 笔者整理的一些案例：<br>\n<a href=\"https://pan.baidu.com/s/1MEMMZTNg-6qmPrzprHVSVQ?pwd=k999\">JA3 指纹（go/python）点击下载</a></p>\n",
            "tags": [
                "TLS/SSL",
                "JA3"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/6066.html",
            "url": "https://haysalan.github.io/posts/6066.html",
            "title": "400行代码解混淆猿人学第二届第三题然后进行完美反编译",
            "date_published": "2023-10-16T02:43:09.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>猿人学 2023 届第三题 <a href=\"https://match2023.yuanrenxue.cn/topic/3\">点击跳转</a></p>\n<h2 id=\"0x01-降维打击\"><a class=\"markdownIt-Anchor\" href=\"#0x01-降维打击\">#</a> 0x01 降维打击</h2>\n<p>这里 if 都是多层嵌套的，非常影响阅读体验，直接一步将它变为一维结构吧！</p>\n<p>还原前先手动还原小部分代码，接着写反混淆脚本批量修改。<br>\n我们单看  <code>if (o &lt; 2)</code>  这个 if 块，很明显 <code>o &lt; 1</code>  其实就是 <code>o==0</code>  而 else 就是  <code>o==1</code> , 以此类推。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">88</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">        o += <span class=\"number\">226</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        o += <span class=\"number\">243</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">        o += <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">// 手动还原一下 还原如下</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = e || <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      o += <span class=\"number\">88</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      v.<span class=\"property\">v</span> = !<span class=\"number\">1</span>;</span><br><span class=\"line\">      o += <span class=\"number\">226</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      o += <span class=\"number\">243</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      L = Y || l.<span class=\"property\">length</span>;</span><br><span class=\"line\">      o += <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这是我写的插件，将<strong>多层嵌套的 if</strong> 转换为<strong> Switch</strong> 语法，可以方便我们后续调试。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToCase</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; name, cases &#125; = state;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 test 不是 o &lt; 数字，则不进行处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;&lt;&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(test.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isNumericLiteral</span>(test.<span class=\"property\">right</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// alternate.body.push(types.BreakStatement());</span></span><br><span class=\"line\">      <span class=\"comment\">// consequent.body.push(types.BreakStatement());</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> right = test.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (right % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 else 不是 if 节点的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>])) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        cases.<span class=\"title function_\">push</span>(types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 构建 case 节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> case1 = types.<span class=\"title class_\">SwitchCase</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">valueToNode</span>(right - <span class=\"number\">1</span>),</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">const</span> case2 = types.<span class=\"title class_\">SwitchCase</span>(types.<span class=\"title function_\">valueToNode</span>(right), alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      cases.<span class=\"title function_\">push</span>(case1, case2);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">IfToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; init, test, update, body &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prev = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIfStatement</span>(body)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> discriminant = prev.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">IfToCase</span>, &#123; <span class=\"attr\">name</span>: discriminant.<span class=\"property\">name</span>, <span class=\"attr\">cases</span>: cases &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> switchNode = types.<span class=\"title class_\">SwitchStatement</span>(discriminant, cases);</span><br><span class=\"line\"></span><br><span class=\"line\">    path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body&quot;</span>).<span class=\"title function_\">replaceInline</span>(switchNode);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529594404-f77481eb-28cb-4bd3-a926-b635f89cec30.png#averageHue=%232d2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=600&amp;id=u3da4d467&amp;originHeight=900&amp;originWidth=793&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=85853&amp;status=done&amp;style=none&amp;taskId=u014f1895-cac3-4715-9e8f-d28dfece6e6&amp;title=&amp;width=528.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x02-打回原形\"><a class=\"markdownIt-Anchor\" href=\"#0x02-打回原形\">#</a> 0x02 打回原形</h2>\n<p>经过上一步还原后发现有很多  <code>o += xx | o -= xx</code>  的代码，这里的 o 其实就是 case 的条件，那么简化一下吧！ <code>o = o - xxx</code>  其中  <code>o - xxx </code> 部分我们计算出来。<br>\n下面插件来喽！又香又脆，嘎嘎香！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RestoreJump</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">AssignmentExpression</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; operator, left, right &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(operator[<span class=\"number\">1</span>] === <span class=\"string\">&quot;=&quot;</span> &amp;&amp; types.<span class=\"title function_\">isNumericLiteral</span>(right))) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> caseNode = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isSwitchCase</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, test &#125; = caseNode.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 构建 ast 节点  o -= xxx  改为 o - xxx ,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _node = types.<span class=\"title function_\">assignmentExpression</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;=&quot;</span>,</span><br><span class=\"line\">      left,</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(</span><br><span class=\"line\">        operator[<span class=\"number\">0</span>] === <span class=\"string\">&quot;-&quot;</span></span><br><span class=\"line\">          ? test.<span class=\"property\">value</span> - right.<span class=\"property\">value</span></span><br><span class=\"line\">          : test.<span class=\"property\">value</span> + right.<span class=\"property\">value</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(_node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后清晰了不少。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697529672556-f653bcaa-08df-4fb3-b4ab-8d5a3c43d8cc.png#averageHue=%232e2c2b&amp;clientId=u4e46a870-c294-4&amp;from=paste&amp;height=596&amp;id=u2d646e55&amp;originHeight=894&amp;originWidth=703&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=60103&amp;status=done&amp;style=none&amp;taskId=uef9a602b-f747-4522-8474-fa12e9ce0bc&amp;title=&amp;width=468.6666666666667\" alt=\"image.png\"></p>\n<h2 id=\"0x03-迷阵寻踪\"><a class=\"markdownIt-Anchor\" href=\"#0x03-迷阵寻踪\">#</a> 0x03 迷阵寻踪</h2>\n<p>经过上面还原后 发现很多 case 块只做 o 的修改，那我就知道它下一步要到那个 case 块，唉！我们是不是可以将他们合并起来，插件如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJump</span>(<span class=\"params\">node, name</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isExpressionStatement</span>(node)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; expression &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isAssignmentExpression</span>(expression)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (expression.<span class=\"property\">left</span>.<span class=\"property\">name</span> !== name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expression.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCaseJump</span>(<span class=\"params\">map, name, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; test, consequent &#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> con = consequent[consequent.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(con, name);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isIfStatement</span>(con)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; consequent, alternate &#125; = con;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"title function_\">getJump</span>(consequent, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getJump</span>(alternate, name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      list.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map[test.<span class=\"property\">value</span>] = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeDuplicates</span>(<span class=\"params\">arr1, arr2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []; <span class=\"comment\">// 存储删除的元素的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr2.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(arr1[i]); <span class=\"comment\">// 将相同的元素存储到结果数组中</span></span><br><span class=\"line\">        arr2.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr2中的相同元素</span></span><br><span class=\"line\">        found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (found) &#123;</span><br><span class=\"line\">      arr1.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>); <span class=\"comment\">// 删除arr1中的相同元素</span></span><br><span class=\"line\">      i--; <span class=\"comment\">// 由于删除了元素，需要调整索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">controlFlowStructure</span>(<span class=\"params\">si, map, cases, stack = [], body = []</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!map.<span class=\"property\">loop</span>) map.<span class=\"property\">loop</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (stack.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">indexOf</span>(si) === -<span class=\"number\">1</span>) map.<span class=\"property\">loop</span>.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = map[si];</span><br><span class=\"line\">  body = body.<span class=\"title function_\">concat</span>(cases[si].<span class=\"property\">consequent</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (item.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, body);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(si);</span><br><span class=\"line\">      body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">        <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">0</span>], map, cases, stack, [])</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.<span class=\"property\">loop</span>.<span class=\"title function_\">includes</span>(si)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; test, consequent &#125; = body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>] = types.<span class=\"title function_\">whileStatement</span>(test, consequent);</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = types.<span class=\"title function_\">blockStatement</span>(</span><br><span class=\"line\">          <span class=\"title function_\">controlFlowStructure</span>(item[<span class=\"number\">1</span>], map, cases, stack, [])</span><br><span class=\"line\">        );</span><br><span class=\"line\">        body = body.<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">          <span class=\"title function_\">removeDuplicates</span>(</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>,</span><br><span class=\"line\">            body[body.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MergeCases</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">SwitchStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; discriminant, cases &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = discriminant.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = binding.<span class=\"property\">path</span>.<span class=\"property\">node</span>.<span class=\"property\">init</span>.<span class=\"property\">right</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cases.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">getCaseJump</span>(map, name, cases[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(<span class=\"title function_\">controlFlowStructure</span>(start, map, cases));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比图如下，都有实质的代码了。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450260705-b76c8b0a-fafb-4898-b521-5585ee9afd08.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=580&amp;id=u70489b23&amp;originHeight=870&amp;originWidth=982&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=72814&amp;status=done&amp;style=none&amp;taskId=uf6a01b16-e0e2-4689-b78b-590527a8fe4&amp;title=&amp;width=654.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x04-移除污秽\"><a class=\"markdownIt-Anchor\" href=\"#0x04-移除污秽\">#</a> 0x04 移除污秽</h2>\n<p>将指针修改的代码去除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CleaningUpGarbage</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ForStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = path.<span class=\"title function_\">getPrevSibling</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = p.<span class=\"property\">node</span>.<span class=\"property\">declarations</span>[<span class=\"number\">0</span>].<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">traverse</span>(path.<span class=\"property\">scope</span>.<span class=\"property\">block</span>, &#123;</span><br><span class=\"line\">      <span class=\"title class_\">AssignmentExpression</span>(_path) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(_path.<span class=\"property\">node</span>.<span class=\"property\">left</span>, &#123; <span class=\"attr\">name</span>: name &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>移除无关代码<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450286996-5f3bb3ba-428f-44a6-b967-0193166a5738.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=583&amp;id=ua6aaac7e&amp;originHeight=875&amp;originWidth=997&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=77990&amp;status=done&amp;style=none&amp;taskId=uff6ec970-1dac-4d57-9924-5237cb19abd&amp;title=&amp;width=664.6666666666666\" alt=\"image.png\"></p>\n<h2 id=\"0x05-结构优化\"><a class=\"markdownIt-Anchor\" href=\"#0x05-结构优化\">#</a> 0x05 结构优化</h2>\n<p>优化 ifelse 结构，使其更便于阅读。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isEndNode</span>(<span class=\"params\">nodes</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> typeList = [<span class=\"string\">&quot;ReturnStatement&quot;</span>, <span class=\"string\">&quot;ThrowStatement&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (typeList.<span class=\"title function_\">includes</span>(nodes[i].<span class=\"property\">type</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ifOptimization = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!alternate) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(alternate.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isEndNode</span>(alternate.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">insertAfter</span>(consequent.<span class=\"property\">body</span>);</span><br><span class=\"line\">      path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">ifStatement</span>(types.<span class=\"title function_\">unaryExpression</span>(<span class=\"string\">&quot;!&quot;</span>, test), alternate, <span class=\"literal\">null</span>)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      types.<span class=\"title function_\">isIfStatement</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isEndNode</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">consequent</span>.<span class=\"property\">body</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(alternate.<span class=\"property\">body</span>[<span class=\"number\">0</span>]).<span class=\"property\">code</span> ===</span><br><span class=\"line\">        <span class=\"title function_\">generator</span>(consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">          .<span class=\"property\">code</span></span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        path.<span class=\"title function_\">insertAfter</span>(</span><br><span class=\"line\">          consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span>.<span class=\"property\">body</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        consequent.<span class=\"property\">body</span>[consequent.<span class=\"property\">body</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        path.<span class=\"property\">node</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>处理后逻辑尽现。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450320593-e2b95e6e-9e76-4844-b667-6eec93d04bd7.png#averageHue=%23282c35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=588&amp;id=u230434df&amp;originHeight=882&amp;originWidth=1014&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=76020&amp;status=done&amp;style=none&amp;taskId=u0b9addc3-37d0-4bd2-86a2-c9edb2476e6&amp;title=&amp;width=676\" alt=\"image.png\"></p>\n<h2 id=\"0x06-答辩还原\"><a class=\"markdownIt-Anchor\" href=\"#0x06-答辩还原\">#</a> 0x06 答辩还原</h2>\n<p>这里其实就是嵌套的三元表达式，先手动还原几条能发现他本质是 switch</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryToSwitch</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ConditionalExpression</span>(path, &#123; cases, _name &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; test, consequent, alternate &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(test, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; right, left &#125; = test;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isIdentifier</span>(right) || !types.<span class=\"title function_\">isNumericLiteral</span>(left)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cases[right.<span class=\"property\">name</span>]) &#123;</span><br><span class=\"line\">      cases[right.<span class=\"property\">name</span>] = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> body = [</span><br><span class=\"line\">      types.<span class=\"title function_\">expressionStatement</span>(</span><br><span class=\"line\">        types.<span class=\"title function_\">assignmentExpression</span>(<span class=\"string\">&quot;=&quot;</span>, types.<span class=\"title function_\">identifier</span>(_name), consequent)</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    body.<span class=\"title function_\">push</span>(types.<span class=\"title function_\">breakStatement</span>());</span><br><span class=\"line\">    cases[right.<span class=\"property\">name</span>].<span class=\"title function_\">push</span>(types.<span class=\"title function_\">switchCase</span>(test.<span class=\"property\">left</span>, body));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TernaryReturn</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ReturnStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; argument &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isConditionalExpression</span>(argument)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBinaryExpression</span>(argument.<span class=\"property\">test</span>, &#123; <span class=\"attr\">operator</span>: <span class=\"string\">&quot;==&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cases = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = argument.<span class=\"property\">test</span>.<span class=\"property\">right</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> _name = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span><span class=\"subst\">$&#123;path.node.start&#125;</span>`</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(<span class=\"title class_\">TernaryToSwitch</span>, &#123; <span class=\"attr\">cases</span>: cases, <span class=\"attr\">_name</span>: _name &#125;);</span><br><span class=\"line\">    path.<span class=\"title function_\">insertBefore</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">        types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(_name), <span class=\"literal\">null</span>),</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(</span><br><span class=\"line\">      types.<span class=\"title function_\">switchStatement</span>(types.<span class=\"title function_\">identifier</span>(name), cases[name])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>(types.<span class=\"title function_\">returnStatement</span>(types.<span class=\"title function_\">identifier</span>(_name)));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对比效果图如下，处理后犹如拨云见日，茅塞顿开。（还原它主要是为了反编译 jsvmp）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702450426324-2d914a7e-900f-43bc-bf20-8a9354955a72.png#averageHue=%232c313a&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=448&amp;id=u07f8273d&amp;originHeight=672&amp;originWidth=1775&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=229439&amp;status=done&amp;style=none&amp;taskId=u9bf7aed3-541a-42df-964a-21462f220ef&amp;title=&amp;width=1183.3333333333333\" alt=\"image.png\"></p>\n<h2 id=\"0x07-窥探本源\"><a class=\"markdownIt-Anchor\" href=\"#0x07-窥探本源\">#</a> 0x07 窥探本源</h2>\n<p>反编译后魔改点与环境检测清晰可见<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451095343-fda949dc-020d-4397-9c0e-9d372de2e24b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=731&amp;id=ubf805d6c&amp;originHeight=1096&amp;originWidth=1907&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=242373&amp;status=done&amp;style=none&amp;taskId=u75d2dc46-b601-49b0-8235-27796f97c3a&amp;title=&amp;width=1271.3333333333333\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451229487-9bdf0c20-397c-428f-8fe4-0bc1250ebc6b.png#averageHue=%23282c34&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=219&amp;id=uac3d94c8&amp;originHeight=329&amp;originWidth=1127&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=46466&amp;status=done&amp;style=none&amp;taskId=u6f65b94a-3b3f-458a-98e4-5292b347083&amp;title=&amp;width=751.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451251011-f97b6dac-f961-4a76-bf51-5d4661a47d64.png#averageHue=%23282d35&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=605&amp;id=u8d9ac5cb&amp;originHeight=907&amp;originWidth=962&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112361&amp;status=done&amp;style=none&amp;taskId=ude973f5a-0882-4236-8fbb-c9ec825411d&amp;title=&amp;width=641.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1702451267059-47cac11c-8d64-43fe-859a-8aee47d83335.png#averageHue=%23282d36&amp;clientId=uddd9945d-4384-4&amp;from=paste&amp;height=763&amp;id=u201636c1&amp;originHeight=1144&amp;originWidth=1310&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=160926&amp;status=done&amp;style=none&amp;taskId=ucee3950c-1f24-4cd7-8a6e-642435ff9aa&amp;title=&amp;width=873.3333333333334\" alt=\"image.png\"></p>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/60496.html",
            "url": "https://haysalan.github.io/posts/60496.html",
            "title": "GitHub Actions 的使用",
            "date_published": "2023-10-11T01:23:47.000Z",
            "content_html": "<h2 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<ol>\n<li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li>\n<li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li>\n<li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li>\n<li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li>\n</ol>\n<h2 id=\"workflow-文件\"><a class=\"markdownIt-Anchor\" href=\"#workflow-文件\">#</a> workflow 文件</h2>\n<p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows 目录。<br>\nworkflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为.yml，比如 foo.yml。<br>\n一个库可以有多个 workflow 文件。<br>\nGitHub 只要发现.github/workflows 目录里面有.yml 文件，就会自动运行该文件。<br>\nworkflow 文件的配置字段非常多，详见<a href=\"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions\">官方文档</a>。下面是一些基本字段。</p>\n<h3 id=\"name\"><a class=\"markdownIt-Anchor\" href=\"#name\">#</a> name</h3>\n<p>工作流的名称。GitHub 在存储库的 “Actions” 显示工作流的名称。如果省略 ，GitHub 将显示相对于存储库根目录的工作流文件路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: GitHub Actions Demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"on\"><a class=\"markdownIt-Anchor\" href=\"#on\">#</a> on</h3>\n<p>定义运行工作流时的触发事件</p>\n<h4 id=\"使用单个事件\"><a class=\"markdownIt-Anchor\" href=\"#使用单个事件\">#</a> 使用单个事件</h4>\n<p>例如，具有以下值的工作流将在推送到工作流存储库中的任何分支时运行：on</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用多个事件\"><a class=\"markdownIt-Anchor\" href=\"#使用多个事件\">#</a> 使用多个事件</h4>\n<p>您可以指定单个事件或多个事件。例如，当推送到存储库中的任何分支或有人分叉存储库时，将运行具有以下值的工作流：on</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>, <span class=\"string\">fork</span>]</span><br></pre></td></tr></table></figure>\n<p>如果指定多个事件，则只需发生其中一个事件即可触发工作流。如果同时发生工作流的多个触发事件，则将触发多个工作流运行。</p>\n<h3 id=\"jobsjob_idname\"><a class=\"markdownIt-Anchor\" href=\"#jobsjob_idname\">#</a> jobs.&lt;job_id&gt;.name</h3>\n<p>工作流运行中要执行的一项或多项任务</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">task1:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">first</span> <span class=\"string\">task</span> <span class=\"string\">to</span> <span class=\"string\">be</span> <span class=\"string\">executed</span></span><br><span class=\"line\">  <span class=\"attr\">task2:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">second</span> <span class=\"string\">task</span> <span class=\"string\">to</span> <span class=\"string\">execute</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的 jobs 字段包含 task1、task2 任务，task1 (job_id) 里面的 name 字段是任务的说明。</p>\n<h3 id=\"jobsjob_idneeds\"><a class=\"markdownIt-Anchor\" href=\"#jobsjob_idneeds\">#</a> jobs.&lt;job_id&gt;.needs</h3>\n<p>用于标识在运行当前任务之前<strong>必须成功完成</strong>的一项或多项作业</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">job1:</span></span><br><span class=\"line\">  <span class=\"attr\">job2:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> <span class=\"string\">job1</span></span><br><span class=\"line\">  <span class=\"attr\">job3:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> [<span class=\"string\">job1</span>, <span class=\"string\">job2</span>]</span><br></pre></td></tr></table></figure>\n<p>job1 无需等待直接执行、job2 需要等待 job1 执行完成、job3 需要等待 job1、job2 都执行完成。</p>\n<blockquote>\n<p>示例执行流程 | job1 -&gt; job2 -&gt; job3</p>\n</blockquote>\n<h3 id=\"jobsjob_idruns-on\"><a class=\"markdownIt-Anchor\" href=\"#jobsjob_idruns-on\">#</a> jobs.&lt;job_id&gt;.runs-on</h3>\n<p>runs-on 字段指定运行所需要的虚拟机环境。可用虚拟机如下（示例）</p>\n<table>\n<thead>\n<tr>\n<th>ubuntu</th>\n<th>windows</th>\n<th>macos</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ubuntu-latest</td>\n<td>windows-latest</td>\n<td>macos-latest</td>\n</tr>\n<tr>\n<td>ubuntu-18.04</td>\n<td>windows-2019</td>\n<td>macos-10.14</td>\n</tr>\n<tr>\n<td>ubuntu-22.04</td>\n<td>windows-2022</td>\n<td>macos-12</td>\n</tr>\n</tbody>\n</table>\n<p>指定虚拟机为 ubuntu-22.04 （必填）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-22.04</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"jobsjob_idsteps\"><a class=\"markdownIt-Anchor\" href=\"#jobsjob_idsteps\">#</a> jobs.&lt;job_id&gt;.steps</h3>\n<p>steps 字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。<br>\n每个步骤都可以指定以下三个字段。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">jobs.&lt;job_id&gt;.steps.name：名称</span></span><br><span class=\"line\"><span class=\"string\">jobs.&lt;job_id&gt;.steps.run：运行的命令或者</span> <span class=\"string\">action</span></span><br><span class=\"line\"><span class=\"string\">jobs.&lt;job_id&gt;.steps.env：所需的环境变量</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "GitHub",
                "Actions"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/31158.html",
            "url": "https://haysalan.github.io/posts/31158.html",
            "title": "语雀编写文章一键自动部署博客至Github和Gitee",
            "date_published": "2023-10-09T01:26:58.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>一键发布语雀文章至 github (hexo 博客) 和 gitee 并实现 gitee pages 自动更新。<br>\nhexo 博客示例：<a href=\"https://alanhays.gitee.io/\">https://alanhays.gitee.io</a> | <a href=\"https://alanhays.github.io/\">https://alanhays.github.io</a></p>\n<ol>\n<li>语雀编写文章</li>\n<li>同步语雀文章至 hexo</li>\n<li>hexo 发布语雀文章更新博客</li>\n<li>github actions 自动同步仓库至 gitee 并更新 pages</li>\n</ol>\n<h1 id=\"部署-hexo-博客\"><a class=\"markdownIt-Anchor\" href=\"#部署-hexo-博客\">#</a> 部署 hexo 博客</h1>\n<h2 id=\"安装-git-和-node推荐-lts-版\"><a class=\"markdownIt-Anchor\" href=\"#安装-git-和-node推荐-lts-版\">#</a> 安装 git 和 node (推荐 LTS 版)</h2>\n<p>git 官网 -&gt; <a href=\"https://git-scm.com/\">https://git-scm.com/</a><br>\nnode 官网 -&gt; <a href=\"https://nodejs.org/en\">https://nodejs.org/en</a></p>\n<h3 id=\"检查安装\"><a class=\"markdownIt-Anchor\" href=\"#检查安装\">#</a> 检查安装</h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696815879153-89905aee-a4f4-4351-b2be-a418d5289a1f.png#averageHue=%231c1c1c&amp;clientId=uc8e77ead-24d0-4&amp;from=paste&amp;height=213&amp;id=ua6097101&amp;originHeight=320&amp;originWidth=580&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28256&amp;status=done&amp;style=none&amp;taskId=u9f0dc45d-8f83-4494-99cf-6158fcd1a8d&amp;title=&amp;width=386.6666666666667\" alt=\"image.png\"></p>\n<h2 id=\"安装-hexo-博客\"><a class=\"markdownIt-Anchor\" href=\"#安装-hexo-博客\">#</a> 安装 hexo 博客</h2>\n<p>找到一个位置，打开<strong> Git Bash Here</strong> 分别执行下面命令，其中 blog 可替换为你喜欢的名字（会在当前目录新建一个文件夹）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证博客\"><a class=\"markdownIt-Anchor\" href=\"#验证博客\">#</a> 验证博客</h3>\n<p>浏览器打开 -&gt; <a href=\"http://localhost:4000/\">http://localhost:4000/</a><br>\n 打开后正常显示 hexo 默认博客<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696819368453-729a4ca6-bbb8-4c85-8bca-ededef4785b6.png#averageHue=%23bfb8a8&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=756&amp;id=u8acbc7b7&amp;originHeight=1134&amp;originWidth=2218&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=759300&amp;status=done&amp;style=none&amp;taskId=u10ac20be-540d-4353-b093-d570559a31c&amp;title=&amp;width=1478.6666666666667\" alt=\"image.png\"></p>\n<h3 id=\"hexo-常用命令\"><a class=\"markdownIt-Anchor\" href=\"#hexo-常用命令\">#</a> hexo 常用命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g <span class=\"comment\"># 安装Hexo</span></span><br><span class=\"line\">npm update hexo -g <span class=\"comment\"># 升级</span></span><br><span class=\"line\">hexo init blog <span class=\"comment\"># 初始化博客 blog(选填) 创建一个名为blog的目录并初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">命令简写</span><br><span class=\"line\">hexo n <span class=\"string\">&quot;文章名&quot;</span> == hexo new <span class=\"string\">&quot;文章名&quot;</span> <span class=\"comment\"># 新建文章</span></span><br><span class=\"line\">hexo g == hexo generate <span class=\"comment\"># 生成</span></span><br><span class=\"line\">hexo s == hexo server <span class=\"comment\"># 启动服务预览</span></span><br><span class=\"line\">hexo d == hexo deploy <span class=\"comment\"># 部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo server <span class=\"comment\"># Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class=\"line\">hexo server -s <span class=\"comment\"># 静态模式</span></span><br><span class=\"line\">hexo server -p xxxx <span class=\"comment\"># 更改端口</span></span><br><span class=\"line\">hexo server -i xxx.xxx.x.x <span class=\"comment\"># 自定义IP</span></span><br><span class=\"line\">hexo clean <span class=\"comment\">#清除缓存</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"github-创建仓库\"><a class=\"markdownIt-Anchor\" href=\"#github-创建仓库\">#</a> GitHub 创建仓库</h2>\n<p>仓库名称格式<strong><a href=\"http://xn--6qqv7i14ofosyrb.github.io\">你的用户名.github.io</a></strong> 比如我这里应该写<strong><a href=\"http://alanhays.github.io\"> alanhays.github.io</a></strong><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696820476904-24a7e455-bb29-4ee7-a0ec-aacac1cc62b4.png#averageHue=%23fefdfd&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=460&amp;id=u1000ab60&amp;originHeight=690&amp;originWidth=1260&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=82131&amp;status=done&amp;style=none&amp;taskId=u349313ab-c457-4cbf-820b-5ca8a554e1d&amp;title=&amp;width=840\" alt=\"image.png\"></p>\n<h3 id=\"生成秘钥公钥\"><a class=\"markdownIt-Anchor\" href=\"#生成秘钥公钥\">#</a> 生成秘钥 &amp; 公钥</h3>\n<p>打开<strong> Git Bash Here</strong> 执行以下命令<br>\n yourname 改为你的 GitHub 的<strong>用户名</strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.name</span> <span class=\"string\">&quot;yourname&quot;</span></span><br></pre></td></tr></table></figure>\n<p>youremail 改为你的注册 GitHub 时的<strong>邮箱</strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.email</span> <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>创建 ssh，输入命令，然后一直回车<br>\n youremail 改为你的注册 GitHub 时的<strong>邮箱</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>在文件中找到这个路径  <code>C:\\Users\\你的用户名\\.ssh</code> <br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696820209329-78aafc54-a4df-43ef-a591-a54c4cec435a.png#averageHue=%23fcfbfb&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=335&amp;id=uba970c23&amp;originHeight=503&amp;originWidth=1250&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=36653&amp;status=done&amp;style=none&amp;taskId=u534f1422-c83c-405d-8185-eb299a09a6f&amp;title=&amp;width=833.3333333333334\" alt=\"image.png\"><br>\n 在 GitHub 的 Setting 里面，找到 SSH keys，把 <strong>id_rsa.pub（公钥）</strong> 里面的内容全部复制到 <strong>key</strong> 进去，<strong>title</strong> 随便写即可。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696820340389-82002c4f-34f7-457b-aac5-c75fcf8d994f.png#averageHue=%23dfc7a0&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=685&amp;id=ub6910e9b&amp;originHeight=1028&amp;originWidth=2229&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=144401&amp;status=done&amp;style=none&amp;taskId=uaefb561a-cb11-4cfe-ab93-f4ae3537603&amp;title=&amp;width=1486\" alt=\"image.png\"></p>\n<h2 id=\"hexo-部署到-github\"><a class=\"markdownIt-Anchor\" href=\"#hexo-部署到-github\">#</a> hexo 部署到 GitHub</h2>\n<p>在 blog 文件夹下面找到_config.yml 文件<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696820656627-84e947a3-c369-4f3a-9ca3-ee3dfdfabe6b.png#averageHue=%23fcfbfa&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=385&amp;id=u7ca5a152&amp;originHeight=577&amp;originWidth=1045&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=50703&amp;status=done&amp;style=none&amp;taskId=uaf75b89f-b16b-4853-ae00-c0e5500ef7c&amp;title=&amp;width=696.6666666666666\" alt=\"image.png\"><br>\n 在末尾找到 deploy 并修改（以文本格式打开 vscode 或记事本都可）<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696821058208-c025b513-dce0-4127-bfad-b9aa2e70aa06.png#averageHue=%23232221&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=110&amp;id=uc7880959&amp;originHeight=165&amp;originWidth=1286&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=18076&amp;status=done&amp;style=none&amp;taskId=u03b5f1ea-e6bf-4b58-a1e8-cb971878019&amp;title=&amp;width=857.3333333333334\" alt=\"image.png\"><br>\nyourname 改为你的<strong> GitHub 的用户名</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>打开 <strong>Git Bash Here</strong> 安装 git 部署命令工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>分别输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启-github-pages-服务\"><a class=\"markdownIt-Anchor\" href=\"#开启-github-pages-服务\">#</a> 开启 GitHub Pages 服务</h3>\n<p>打开你的仓库 <strong><a href=\"http://xn--6qqv7i14ofosyrb.github.io\">你的用户名.github.io</a></strong><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696821614735-b5d5d0f0-9a0f-4b59-93f1-801150eee96c.png#averageHue=%23e3c9a3&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=659&amp;id=u284e1f5c&amp;originHeight=988&amp;originWidth=1524&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=171184&amp;status=done&amp;style=none&amp;taskId=ub1485883-ea5f-4b69-96f0-ae5b57aa0e0&amp;title=&amp;width=1016\" alt=\"image.png\"><br>\n 按照步骤操作开启 Pages<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696821772577-05048722-563c-47be-bd46-b6d4932eec52.png#averageHue=%23fdfdfd&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=799&amp;id=u4baa7511&amp;originHeight=1198&amp;originWidth=2229&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=219642&amp;status=done&amp;style=none&amp;taskId=u79720bf3-878c-491c-9aa1-ae6410f729b&amp;title=&amp;width=1486\" alt=\"image.png\"><br>\n 完成后等待一会，你可看到如下页面，点击<strong> Visit site</strong> 查看你的博客<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696821907600-a75b2eb4-b1a7-4b96-bcc1-c7b253012d83.png#averageHue=%23fefefd&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=469&amp;id=uf01d3533&amp;originHeight=703&amp;originWidth=1729&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=112852&amp;status=done&amp;style=none&amp;taskId=udb7a02b2-137a-4a50-bb79-2d7b21db56b&amp;title=&amp;width=1152.6666666666667\" alt=\"image.png\"></p>\n<h2 id=\"hexo-主题配置\"><a class=\"markdownIt-Anchor\" href=\"#hexo-主题配置\">#</a> hexo 主题配置</h2>\n<p>推荐在主题市场选择喜欢的主题，主题中都有详细的使用教程。<br>\n优质主题（排序不分先后）</p>\n<ul>\n<li><a href=\"https://github.com/anzhiyu-c/hexo-theme-anzhiyu\">anzhiyu</a></li>\n<li><a href=\"https://github.com/auroral-ui/hexo-theme-aurora\">aurora</a></li>\n<li><a href=\"https://github.com/amehime/hexo-theme-shoka\">shoka</a></li>\n</ul>\n<p>主题市场 <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br>\n 创作主题教程 <a href=\"https://hexo.io/zh-cn/docs/themes.html\">https://hexo.io/zh-cn/docs/themes.html</a></p>\n<h1 id=\"同步语雀文章\"><a class=\"markdownIt-Anchor\" href=\"#同步语雀文章\">#</a> 同步语雀文章</h1>\n<p>项目：<a href=\"https://github.com/x-cold/yuque-hexo\">https://github.com/x-cold/yuque-hexo</a><br>\n 注：教程请看项目就不赘述了</p>\n<h1 id=\"github-actions-自动同步\"><a class=\"markdownIt-Anchor\" href=\"#github-actions-自动同步\">#</a> GitHub Actions 自动同步</h1>\n<p>项目：<a href=\"https://github.com/yanglbme/gitee-pages-action\">https://github.com/yanglbme/gitee-pages-action</a><br>\n 注：教程请看项目就不赘述了，存放 <code>./github/workflows/xxx.yml</code>  位置请看本文。</p>\n<h3 id=\"hexo-项目-github-actions-存放位置\"><a class=\"markdownIt-Anchor\" href=\"#hexo-项目-github-actions-存放位置\">#</a> hexo 项目 GitHub Actions 存放位置</h3>\n<p>gitee 仓库依靠 GitHub Actions  <code>./github/workflows/xxx.yml</code>  实现<br>\n需要将  <code>./github/workflows/xxx.yml</code>  放置 <code>.deploy_git/.github/workflows/xxx.yml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./github/workflows/xxx.yml</span><br><span class=\"line\">.deploy_git/.github/workflows/xxx.yml</span><br></pre></td></tr></table></figure>\n<p>如此 hexo d 命令推送时才会将 Actions 文件推送</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>1. 使用下面命令同步语雀最新文章，其中 xxx… 为 token 或 key。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> YUQUE_TOKEN=xxx SECRET_ID=xxx SECRET_KEY=xxx &amp;&amp; yuque-hexo <span class=\"built_in\">sync</span></span><br></pre></td></tr></table></figure>\n<p>2. 使用以下两个命令构建和部署博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>执行完后等待 2-3 分钟博客就更新了，如果 github 更新了，gitee 没有那么请查看 GitHub Actions 详细日志，可能因为网络不稳定导致 GitHub Actions 执行失败，请手动执行或再次推送。</p>\n<h2 id=\"我的实现一键更新博客参考\"><a class=\"markdownIt-Anchor\" href=\"#我的实现一键更新博客参考\">#</a> 我的实现一键更新博客（参考）</h2>\n<blockquote>\n<p>我将变量设置为用户环境变量，相对不可见，变量名<strong>不可自定义</strong> YUQUE_TOKEN = 你的语雀 token (可读权限)</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; yuque-hexo sync &amp;&amp; hexo g &amp;&amp; hexo algolia &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看-github-actions-详细日志\"><a class=\"markdownIt-Anchor\" href=\"#查看-github-actions-详细日志\">#</a> 查看 GitHub Actions 详细日志</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696823576435-1a74066e-da49-448e-be1c-583f401dfc39.png#averageHue=%23d0ac81&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=680&amp;id=u3c7ad423&amp;originHeight=1020&amp;originWidth=1121&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=134461&amp;status=done&amp;style=none&amp;taskId=uc96bcb4b-6e76-40d1-85c2-247cb13607a&amp;title=&amp;width=747.3333333333334\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1696823528572-b6272d05-57d4-42cd-b19d-67c888f754be.png#averageHue=%23eff1c9&amp;clientId=u261f4155-1b47-4&amp;from=paste&amp;height=551&amp;id=u6d703f49&amp;originHeight=826&amp;originWidth=1189&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=73500&amp;status=done&amp;style=none&amp;taskId=u834a05d4-7b34-4587-931b-543b02d52a6&amp;title=&amp;width=792.6666666666666\" alt=\"image.png\"></p>\n",
            "tags": [
                "GitHub",
                "hexo"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/14781.html",
            "url": "https://haysalan.github.io/posts/14781.html",
            "title": "AST解混淆插件函数",
            "date_published": "2023-10-08T07:46:52.000Z",
            "content_html": "<p><strong>存在复用性的插件与函数，不定期补充。</strong></p>\n<h2 id=\"字面量解混淆\"><a class=\"markdownIt-Anchor\" href=\"#字面量解混淆\">#</a> 字面量解混淆</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> simplifyLiteral = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NumericLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/^0[obx]/i</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//特征匹配</span></span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">StringLiteral</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">extra</span> &amp;&amp; <span class=\"regexp\">/\\\\[ux]/gi</span>.<span class=\"title function_\">test</span>(node.<span class=\"property\">extra</span>.<span class=\"property\">raw</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">extra</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"规范块语句\"><a class=\"markdownIt-Anchor\" href=\"#规范块语句\">#</a> 规范块语句</h2>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  i++, <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> set) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(element);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>插件</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BlockSyntax</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;ForStatement|WhileStatement|ForInStatement|ForOfStatement&quot;</span>(&#123; node &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.<span class=\"title function_\">isBlockStatement</span>(node.<span class=\"property\">body</span>)) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">body</span> = types.<span class=\"title class_\">BlockStatement</span>([node.<span class=\"property\">body</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">IfStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = [<span class=\"string\">&quot;consequent&quot;</span>, <span class=\"string\">&quot;alternate&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nodes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _path = path.<span class=\"title function_\">get</span>(nodes[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_path.<span class=\"property\">node</span> &amp;&amp; !_path.<span class=\"title function_\">isBlockStatement</span>()) &#123;</span><br><span class=\"line\">        _path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title class_\">BlockStatement</span>([_path.<span class=\"property\">node</span>]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "AST",
                "解混淆"
            ]
        },
        {
            "id": "https://haysalan.github.io/posts/35002.html",
            "url": "https://haysalan.github.io/posts/35002.html",
            "title": "AST解混淆常用API介绍",
            "date_published": "2023-09-27T13:12:49.000Z",
            "content_html": "<p>注意：解混淆插件几乎不可能做到通用所有混淆，学习 ast 才能对混淆进行还原。</p>\n<h2 id=\"pathtypesnode的常用方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#pathtypesnode的常用方法介绍\">#</a> path/types (node) 的常用方法介绍</h2>\n<h3 id=\"查看节点的源代码\"><a class=\"markdownIt-Anchor\" href=\"#查看节点的源代码\">#</a> 查看节点的源代码</h3>\n<blockquote>\n<p>path.toString()<br>\ngenerator(node).code;</p>\n</blockquote>\n<p>获取 path 与 node 的源代码方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//babel库相关，解析，转换，构建，生产</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/types&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"comment\">// js源代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`let a = &quot;hi ast&quot;;`</span>;</span><br><span class=\"line\"><span class=\"comment\">//转换为ast树</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取path源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;path.toString: &quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; node &#125; = path;</span><br><span class=\"line\">    <span class=\"comment\">// 获取node源代码</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;generator: &quot;</span>, <span class=\"title function_\">generator</span>(node).<span class=\"property\">code</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; code &#125; = <span class=\"title function_\">generator</span>(ast, (opts = &#123; <span class=\"attr\">jsescOption</span>: &#123; <span class=\"attr\">minimal</span>: <span class=\"literal\">true</span> &#125; &#125;));</span><br><span class=\"line\"><span class=\"comment\">// 处理后的js源代码</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(code);</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断节点类型\"><a class=\"markdownIt-Anchor\" href=\"#判断节点类型\">#</a> 判断节点类型</h3>\n<blockquote>\n<p>types.isVariableDeclarator(node,opts)<br>\npath.isVariableDeclarator(opts)</p>\n</blockquote>\n<p>下方 <code>&quot;FunctionDeclaration|FunctionExpression&quot;</code>  这样写可同时遍历当前两种或多种类型。<br>\n判断节点是否是需要处理的节点，下面例子中常用到的姿势都有提到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">var b = 0;</span></span><br><span class=\"line\"><span class=\"string\">const c = 2;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var e = function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tconsole.log(&#x27;ok&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|FunctionExpression&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// path方法可不传参数,默认为path.node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isFunctionExpression</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志1：&quot;</span>, path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用path方法,过滤let声明的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"title function_\">isVariableDeclaration</span>(&#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;let&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用types方法,过滤var声明的节点,第一个参数node必填</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isVariableDeclaration</span>(path.<span class=\"property\">node</span>, &#123; <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span> &#125;)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;日志2：&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志<span class=\"number\">2</span>： <span class=\"keyword\">const</span> c = <span class=\"number\">2</span>;</span><br><span class=\"line\">日志<span class=\"number\">1</span>： <span class=\"keyword\">function</span> <span class=\"title function_\">d</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hi&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换节点\"><a class=\"markdownIt-Anchor\" href=\"#替换节点\">#</a> 替换节点</h3>\n<blockquote>\n<p>path.replaceInline(nodes)<br>\npath.replaceWithMultiple()<br>\npath.replaceWith()</p>\n</blockquote>\n<p>推荐使用 replacelnline 方法，它兼容其他两种方法，无脑使用 replacelnline 即可。<br>\ntypes.valueToNode 方法可以将基础值转换为对应节点。<br>\n下面这段插件可以将所有变量的值都变为 666。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">replaceInline</span>(types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">666</span>));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">666</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点删除\"><a class=\"markdownIt-Anchor\" href=\"#节点删除\">#</a> <strong>节点删除</strong></h3>\n<blockquote>\n<p>path.remove()</p>\n</blockquote>\n<p>该方法没有参数，可以将路径下的节点全部删除，使用请小心。<br>\n下面示例将变量名为 <code>a</code>  的 path 删除了，结果是删除了 <code>var a = 1;</code>  这行代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> != <span class=\"string\">&quot;a&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"节点插入\"><a class=\"markdownIt-Anchor\" href=\"#节点插入\">#</a> <strong>节点插入</strong></h3>\n<blockquote>\n<p>path.insertBefore (nodes) // 当前节点前插入<br>\n path.insertAfter (nodes) // 当前节点后插入</p>\n</blockquote>\n<p>什么地方可以插入节点？<br>\n一般在 [] 节点类型进行插入，你可以使用 Array 的方法来操作它，比如 <code>pop</code> 、 <code>push</code>  等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var b = 1;`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;b&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;a&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// types.Identifier(&quot;a&quot;) 生成Identifier类型节点 实参“a” 实际是 name = “a”</span></span><br><span class=\"line\">    <span class=\"comment\">// types.valueToNode  将值转换为节点</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(generator(node).code)</span></span><br><span class=\"line\">    path.<span class=\"property\">parent</span>.<span class=\"property\">declarations</span>.<span class=\"title function_\">unshift</span>(node); <span class=\"comment\">// 等价于  path.insertBefore(node);</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;c&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = types.<span class=\"title class_\">VariableDeclarator</span>(</span><br><span class=\"line\">      types.<span class=\"title class_\">Identifier</span>(<span class=\"string\">&quot;d&quot;</span>),</span><br><span class=\"line\">      types.<span class=\"title function_\">valueToNode</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// insertBefore 和 insertAfter 都支持多个node</span></span><br><span class=\"line\">    path.<span class=\"title function_\">insertAfter</span>([node1, node2]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0,</span><br><span class=\"line\">    b = 1,</span><br><span class=\"line\">    c = 2,</span><br><span class=\"line\">    d = 3;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取父节点\"><a class=\"markdownIt-Anchor\" href=\"#获取父节点\">#</a> 获取父节点</h3>\n<blockquote>\n<p>path.parent<br>\npath.parentPath</p>\n</blockquote>\n<p>path.parentPath 获取的是 path，path.parent 获取的是 node，他们的关系如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.<span class=\"property\">parent</span> = path.<span class=\"property\">parentPath</span>.<span class=\"property\">node</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取子孙节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子孙节点\">#</a> 获取子孙节点</h3>\n<blockquote>\n<p>path.get(key)</p>\n</blockquote>\n<p>形参 key 是一个字符串，也就是路径，以。隔开。<br>\n两种方式获取子节点。<br>\npath.get 获取的是 <code>path</code> ，需要 <code>.node</code>  获取节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">&quot;var b = 1;&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Program</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node1 = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;body.0.declarations.0&quot;</span>).<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node2 = path.<span class=\"property\">node</span>.<span class=\"property\">body</span>[<span class=\"number\">0</span>].<span class=\"property\">declarations</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node1 === node2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟节点\">#</a> 获取兄弟节点</h3>\n<blockquote>\n<p>path.getPrevSibling () // 获取前一个兄弟节点<br>\n path.getAllPrevSiblings () // 获取所有的前兄弟节点<br>\n path.getNextSibling () // 获取后一个兄弟节点<br>\n path.getAllNextSiblings () // 获取所有的后兄弟节点</p>\n</blockquote>\n<p>获取的为 path，其中 getAllPrevSiblings，getAllNextSiblings 返回 path 列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = &quot;老大&quot;,b= &quot;老二&quot;, c =&quot;老三&quot;,d=&quot;老四&quot;,e=&quot;老五&quot;;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> != <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取前一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getPrevSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的前兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllPrevSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;当前节点是&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取后一个兄弟节点&quot;</span>, path.<span class=\"title function_\">getNextSibling</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;获取所有的后兄弟节点&quot;</span>, path.<span class=\"title function_\">getAllNextSiblings</span>().<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取前一个兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span></span><br><span class=\"line\">获取所有的前兄弟节点 b = <span class=\"string\">&quot;老二&quot;</span>,a = <span class=\"string\">&quot;老大&quot;</span></span><br><span class=\"line\">当前节点是 c = <span class=\"string\">&quot;老三&quot;</span></span><br><span class=\"line\">获取后一个兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span></span><br><span class=\"line\">获取所有的后兄弟节点 d = <span class=\"string\">&quot;老四&quot;</span>,e = <span class=\"string\">&quot;老五&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"向上查找节点\"><a class=\"markdownIt-Anchor\" href=\"#向上查找节点\">#</a> 向上查找节点</h3>\n<blockquote>\n<p>path.findParent (callback) // 从父节点查找<br>\n path.find (callback) // 从当前节点查找</p>\n</blockquote>\n<p>find (findParent 从父节点) 从当前 path 开始向上遍历，直到满足回调函数条件为止，找不到则返回 <code>null</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; id &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  进入最内层的d</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id.<span class=\"property\">name</span> !== <span class=\"string\">&quot;c&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> find = path.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent = path.<span class=\"title function_\">findParent</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent1 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">let</span> findParent2 = path.<span class=\"title function_\">findParent</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"title function_\">isFunctionDeclaration</span>() &amp;&amp; p.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> == <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;find -&gt; &quot;</span>, find.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent -&gt; &quot;</span>, findParent.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent1 -&gt; &quot;</span>, findParent1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;findParent2 -&gt; &quot;</span>, findParent2);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">findParent -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent1 -&gt;  <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">b</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">findParent2 -&gt;  <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算表达式的值\"><a class=\"markdownIt-Anchor\" href=\"#计算表达式的值\">#</a> 计算表达式的值</h3>\n<blockquote>\n<p>path.evaluate()</p>\n</blockquote>\n<p>通过 evaluate 可以直接帮你把结果计算出来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`var a = 1+2;</span></span><br><span class=\"line\"><span class=\"string\">var b = !![];`</span>;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initPath = path.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; confident, value &#125; = initPath.evaluate();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!confident) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    initPath.<span class=\"title function_\">replaceWith</span>(types.<span class=\"title function_\">valueToNode</span>(value));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scopebinding-的用法介绍\"><a class=\"markdownIt-Anchor\" href=\"#scopebinding-的用法介绍\">#</a> scope&amp;binding 的用法介绍</h2>\n<blockquote>\n<p>资料来源 -&gt; <a href=\"https://evilrecluse.top/post/7389a59f/#%E4%BD%9C%E7%94%A8%E5%9F%9FScope-%E4%B8%8E-%E8%A2%AB%E7%BB%91%E5%AE%9A%E9%87%8FBinding\">作用域 Scope - 与 - 被绑定量 Binding</a></p>\n</blockquote>\n<h3 id=\"作用域-scope\"><a class=\"markdownIt-Anchor\" href=\"#作用域-scope\">#</a> 作用域 Scope</h3>\n<p><code>@Babel</code>  解析出来的语法树节点对象会包含作用域信息，这个信息会作为节点 <code>Node</code>  对象的一个属性保存<br>\n这个属性本身是一个 <code>Scope</code>  对象，其定义位于 <code>node_modules/@babel/traverse/lib/scope/index.js</code>  中</p>\n<blockquote>\n<p>例：查看基本的 作用域与绑定 信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function squire(i)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    return i * i * i;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function i()</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var i = 123;</span></span><br><span class=\"line\"><span class=\"string\">    i += 2;</span></span><br><span class=\"line\"><span class=\"string\">    return 123;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n\\n这里是函数 &quot;</span>, path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;()&quot;</span>);</span><br><span class=\"line\">    path.<span class=\"property\">scope</span>.<span class=\"title function_\">dump</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>执行  <code>Scope.dump()</code> ，会得到自底向上的 作用域与变量信息<br>\n得到结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里是函数  squire()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: true, references: 3, violations: 0, kind: &#x27;param&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">这里是函数  i()</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"># FunctionDeclaration</span><br><span class=\"line\">- i &#123; constant: false, references: 0, violations: 1, kind: &#x27;var&#x27; &#125;</span><br><span class=\"line\"># Program</span><br><span class=\"line\">- squire &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">- i &#123; constant: true, references: 0, violations: 0, kind: &#x27;hoisted&#x27; &#125;</span><br><span class=\"line\">------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<p><strong>输出查看方法</strong></p>\n<ul>\n<li>每一个作用域都以 #标识输出</li>\n<li>每一个绑定都以 - 标识输出</li>\n<li>对于单次输出，都是自底向上的<br>\n先输出当前作用域，再输出父级作用域，再输出父级的父级作用域……</li>\n<li>对于单个绑定 Binding，会输出 4 种信息\n<ul>\n<li>constant 声明后，是否会被修改</li>\n<li>references 被引用次数</li>\n<li>violations 被重新定义的次数</li>\n<li>kind 函数声明类型。param 参数，hoisted 提升，var 变量， local 内部</li>\n</ul>\n</li>\n</ul>\n<p>后续会单独说明 Binding 对象，此处留个印象即可<br>\n<strong>描述</strong><br>\n此处从两个函数节点输出了其作用域的信息</p>\n<ul>\n<li>这两个函数都是定义在同一级下的，所以都会输出相同的父级作用域 Program 的信息</li>\n<li>你会发现，代码中有非常多个 i，有的是函数定义，有的是参数，有的是变量。仔细观察它们的不同之处<br>\n解释器就是通过 不同层级的作用域 与 绑定定义信息 来区分不同的名称的量的</li>\n</ul>\n<h3 id=\"绑定-binding\"><a class=\"markdownIt-Anchor\" href=\"#绑定-binding\">#</a> 绑定 Binding</h3>\n<p><code>Binding</code>  对象用于存储 绑定 的信息<br>\n这个对象会作为 <code>Scope</code>  对象的一个属性存在<br>\n同一个作用域可以包含多个 Binding<br>\n 你可以在  <code>@babel/traverse/lib/scope/binding.js</code>  中查看到它的定义</p>\n<blockquote>\n<p>显示 Binding 的信息</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">    a = a + 1;</span></span><br><span class=\"line\"><span class=\"string\">    return a;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">function b()&#123;</span></span><br><span class=\"line\"><span class=\"string\">    var b = 1;</span></span><br><span class=\"line\"><span class=\"string\">    var c = 2;</span></span><br><span class=\"line\"><span class=\"string\">    b = b - c;</span></span><br><span class=\"line\"><span class=\"string\">    return b;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;\\n此块节点源码：\\n&quot;</span>, path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;----------------------------------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bindings = path.<span class=\"property\">scope</span>.<span class=\"property\">bindings</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;作用域内 被绑定量 数量：&quot;</span>, <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(bindings).<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> binding_ <span class=\"keyword\">in</span> bindings) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;名字：&quot;</span>, binding_);</span><br><span class=\"line\">      binding_ = bindings[binding_];</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;类型：&quot;</span>, binding_.<span class=\"property\">kind</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;定义：&quot;</span>, binding_.<span class=\"property\">identifier</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被修改：&quot;</span>, binding_.<span class=\"property\">constant</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被修改信息信息记录&quot;</span>, binding_.<span class=\"property\">constantViolations</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;是否会被引用：&quot;</span>, binding_.<span class=\"property\">referenced</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用次数&quot;</span>, binding_.<span class=\"property\">references</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;被引用信息NodePath记录&quot;</span>, binding_.<span class=\"property\">referencePaths</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure>\n<p>会输出一大堆信息。其对应的意义已经写在代码中，可以自行查看</p>\n<h3 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>在解混淆中，作用域与绑定 主要用来处理边界的问题<br>\n即：某个量哪里引用了，在哪里定义</p>\n<blockquote>\n<p>例：删除所有定义了，却从未使用的变量</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/generator&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> jscode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">var a = 1;</span></span><br><span class=\"line\"><span class=\"string\">var b = 2;</span></span><br><span class=\"line\"><span class=\"string\">function squire()&#123;</span></span><br><span class=\"line\"><span class=\"string\">  var c = 3;</span></span><br><span class=\"line\"><span class=\"string\">  var d = 4;</span></span><br><span class=\"line\"><span class=\"string\">  return a * d;</span></span><br><span class=\"line\"><span class=\"string\">  var e = 5;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">var f = 6;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jscode);</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitor = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclarator</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func_name = path.<span class=\"property\">node</span>.<span class=\"property\">id</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> binding = path.<span class=\"property\">scope</span>.<span class=\"title function_\">getBinding</span>(func_name);</span><br><span class=\"line\">    <span class=\"comment\">// 如果变量没有被引用过，那么删除也没关系</span></span><br><span class=\"line\">    <span class=\"comment\">//   此处不能用有无修改过进行判断，因为没有被修改过并不意味着没用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (binding &amp;&amp; !binding.<span class=\"property\">referenced</span>) &#123;</span><br><span class=\"line\">      path.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, visitor);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(ast)[<span class=\"string\">&quot;code&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">squire</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用了 Scope.getBinding () 方法来获取 Binding 对象，判断其引用情况来对语法树进行修改</p>\n<h2 id=\"构建节点\"><a class=\"markdownIt-Anchor\" href=\"#构建节点\">#</a> 构建节点</h2>\n<h3 id=\"不推荐的方式需要了解\"><a class=\"markdownIt-Anchor\" href=\"#不推荐的方式需要了解\">#</a> 不推荐的方式（需要了解）</h3>\n<p>AST 在 js 看来就是一个 json 数据，说明可以构建 {} 的方式构建节点。<br>\n假设我们需要构造这段代码  <code>var a = 0;</code> <br>\n 先使用 <a href=\"https://astexplorer.net/\">ASTexplorer</a> 查看该代码的 AST。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105425701-0c9fd23d-f7d9-4084-8967-a1e126f706b2.png#averageHue=%23f4ee90&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=733&amp;id=u10a8356d&amp;originHeight=1100&amp;originWidth=742&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=80611&amp;status=done&amp;style=none&amp;taskId=u2af3218a-f664-46c3-8de0-667e18e21aa&amp;title=&amp;width=494.6666666666667\" alt=\"image.png\"><br>\njs 源代码 <code>var a = 0;</code>  的 JSON 数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declarations&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;id&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;init&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;start&quot;</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;end&quot;</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;raw&quot;</span>: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;var&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>敏锐的你发现每个节点都有 <code>start</code> 、 <code>end</code> 、 <code>type</code>  这几个属性和其余不同的属性，这些都是必要的吗？哪些是必要的。这时需要参考 <a href=\"https://babeljs.io/docs/babel-types\">https://babeljs.io/docs/babel-types</a> 查看哪些是必要节点。<br>\n以 <code>VariableDeclaration</code>  为例。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1686650451689-cc4f1c3d-2e3d-44b7-8890-a14bd33242f2.png#averageHue=%23f7edd0&amp;clientId=ub9e050d9-ff18-4&amp;from=paste&amp;height=546&amp;id=ue9b1d0b1&amp;originHeight=819&amp;originWidth=831&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=92253&amp;status=done&amp;style=none&amp;taskId=u3df98a2b-982e-49fc-b379-5650d45a88e&amp;title=&amp;width=554\" alt=\"image.png\"><br>\n 可以看到 <code>VariableDeclaration</code>  类型的节点有两个必要的节点（ <code>type</code>  对于任何节点都是必须的），其中 <code>kind</code>  的类型为 <code>string</code>  值为黄色框框框住的，而 <code>declarations</code>  的类型则为 VariableDeclarator 数组。<br>\n再参照其他类型节点的必要参数，简化得到下面的 ast 节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclaration&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;VariableDeclarator&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">id</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;Identifier&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">init</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;NumericLiteral&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;var&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"types-函数构造节点\"><a class=\"markdownIt-Anchor\" href=\"#types-函数构造节点\">#</a> types 函数构造节点</h3>\n<p>手搓 <code>ast</code>  节点虽然不难，但是复杂的节点构建起来很冗余， <code>types</code>  提供了构建 <code>node</code>  的 <code>function</code> ，使用它们来构造简洁高效。如图构造函数的参数及顺序。<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1687105795085-d60a2f32-1e90-4883-94ab-ad63cdc4a14a.png#averageHue=%23fbf9f0&amp;clientId=ue1ff4be4-68d2-4&amp;from=paste&amp;height=169&amp;id=uf299e3c9&amp;originHeight=253&amp;originWidth=787&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=28239&amp;status=done&amp;style=none&amp;taskId=uedb2be9d-d41e-4250-97bf-d6df8c61d9d&amp;title=&amp;width=524.6666666666666\" alt=\"image.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = types.<span class=\"title function_\">variableDeclaration</span>(<span class=\"string\">&quot;var&quot;</span>, [</span><br><span class=\"line\">  types.<span class=\"title function_\">variableDeclarator</span>(types.<span class=\"title function_\">identifier</span>(<span class=\"string\">&quot;a&quot;</span>), types.<span class=\"title function_\">numericLiteral</span>(<span class=\"number\">0</span>)),</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"template-快速构造节点推荐\"><a class=\"markdownIt-Anchor\" href=\"#template-快速构造节点推荐\">#</a> template 快速构造节点（推荐）</h3>\n<p>使用 <code>types.xxx</code>  来构建节点虽然简洁了不少，但还是觉着繁琐。那么使用 <code>template</code>  绝对会让你眼前一亮。<br>\n假设需要构建 <code>var a = 0,b = 1,c = 2;</code>  使用手搓或 <code>types.xxx</code>  都很繁琐，那么试试新姿势吧！别忘了导包哦！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/template&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable constant_\">VAR_NODE</span> = <span class=\"title function_\">template</span>(<span class=\"string\">`var A = 0,B = 1, C = 2`</span>);</span><br></pre></td></tr></table></figure>\n<p>这里定义了 <code>VAR_NODE</code>  变量，其中 <code>A</code> , <code>B</code> , <code>C</code>  类似于占位符 <code>VAR_NODE</code>  接收一个参数 <code>&#123;&#125;</code> , <code>&#123;&#125;</code>  的 <code>A</code> , <code>B</code> , <code>C</code>  这几个属性需要分别构造， <code>A</code> , <code>B</code> , <code>C</code>  等价于 <code>VariableDeclarator</code>  节点的 <code>id</code>  属性，也就是 <code>identifier</code>  节点，直接字符串也可以（标识符类型）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> astNode = <span class=\"title function_\">VAR_NODE</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">A</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">B</span>: <span class=\"string\">&quot;b&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">C</span>: <span class=\"string\">&quot;c&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generator</span>(astNode).<span class=\"property\">code</span>);</span><br></pre></td></tr></table></figure>\n<p>得到输出:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">  b = <span class=\"number\">1</span>,</span><br><span class=\"line\">  c = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特性介绍\"><a class=\"markdownIt-Anchor\" href=\"#特性介绍\">#</a> 特性介绍</h2>\n<h3 id=\"同时遍历多个类型\"><a class=\"markdownIt-Anchor\" href=\"#同时遍历多个类型\">#</a> 同时遍历多个类型</h3>\n<p>假设需要同时遍历多个类型，可以这样写插件，这样写一个方法处理两种类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">let a = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"string\">let b = 0;</span></span><br><span class=\"line\"><span class=\"string\">function d () &#123;</span></span><br><span class=\"line\"><span class=\"string\">  \tconsole.log(&#x27;hi&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(jsCode);</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;FunctionDeclaration|VariableDeclaration&quot;</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还可以这样写单独处理各自的类型的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">FunctionDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>() + <span class=\"string\">&quot;;&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title class_\">VariableDeclaration</span>(path) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"pathtraversestate\"><a class=\"markdownIt-Anchor\" href=\"#pathtraversestate\">#</a> path.traverse<state></h3>\n<blockquote>\n<p>注意： path.traverse !== traverse</p>\n</blockquote>\n<p>在  <code>path.traverse</code>  方法中， <code>state</code>  参数是一个对象，用于在遍历过程中保存和传递状态信息。你可以在访问器函数中使用  <code>state</code>  对象来存储和更新任何你需要的信息。<br>\n <code>state</code>  对象在遍历开始时由  <code>path.traverse</code>  方法创建并传递给每个访问器函数。你可以在访问器函数中修改  <code>state</code>  对象，以跟踪遍历过程中的状态。这些修改将在遍历过程中保留下来，并且在访问器函数之间共享。<br>\n以下是一个示例，展示了如何在  <code>path.traverse</code>  中使用  <code>state</code>  对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/traverse&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@babel/parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function a() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    function b() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        function c() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.<span class=\"title function_\">parse</span>(code);</span><br><span class=\"line\"><span class=\"keyword\">let</span> state = &#123; <span class=\"attr\">counter</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> visitors = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">enter</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在进入节点之前进行操作</span></span><br><span class=\"line\">      state.<span class=\"property\">counter</span>++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">exit</span>(<span class=\"params\">path, state</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在离开节点之后进行操作</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;遍历了&quot;</span>, state.<span class=\"property\">counter</span>, <span class=\"string\">&quot;个节点&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">traverse</span>(ast, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">BlockStatement</span>(path) &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">traverse</span>(visitors, state);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，我们创建了一个包含  <code>counter</code>  属性的  <code>state</code>  对象，并在  <code>enter</code>  和  <code>exit</code>  访问器中使用它来跟踪遍历的节点数量。在遍历开始时，我们将  <code>state</code>  对象作为第三个参数传递给  <code>path.traverse</code>  方法。然后，在每个访问器函数中，我们都可以使用和修改  <code>state</code>  对象。在  <code>enter</code>  访问器中，我们增加了  <code>counter</code>  的值；在  <code>exit</code>  访问器中，我们打印了遍历的节点数量。<br>\n通过使用  <code>state</code>  对象，你可以在遍历过程中跟踪和存储任何你需要的信息，并在访问器函数中进行相应的操作。</p>\n<blockquote>\n<p>注意 traverse 并没有 state 参数</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2023/png/26634545/1697874762901-eefdfac9-151e-4c07-9505-60de6509089a.png#averageHue=%233b4045&amp;clientId=uf5705079-0976-4&amp;from=paste&amp;height=375&amp;id=u7a4f70bc&amp;originHeight=562&amp;originWidth=502&amp;originalType=binary%E2%88%B6=1.5&amp;rotation=0&amp;showTitle=false&amp;size=55333&amp;status=done&amp;style=none&amp;taskId=ub8b35eda-7f71-401f-92d4-b7933928ffd&amp;title=&amp;width=334.6666666666667\" alt=\"image.png\"></p>\n<h3 id=\"babelgeneratoroptions\"><a class=\"markdownIt-Anchor\" href=\"#babelgeneratoroptions\">#</a> babel/generator<options></h3>\n<p><code>babel/generator</code>  的  <code>options</code>  参数包括以下几种：</p>\n<ul>\n<li><code>filename</code> : 字符串，指定正在生成的文件的路径。</li>\n<li><code>sourceMap</code> : 可选，是一个布尔值，指示是否生成 source map。</li>\n<li><code>sourceMapName</code> : 可选，是一个字符串或函数，指定生成的 source map 的名称。</li>\n<li><code>sourceFileName</code> : 可选，是一个字符串或函数，指定源文件的名称。</li>\n<li><code>sourceRoot</code> : 可选，是一个字符串或函数，指定源文件的根目录。</li>\n<li><code>moduleRoot</code> : 可选，是一个字符串或函数，指定模块的根目录。</li>\n<li><code>moduleId</code> : 可选，是一个字符串或函数，指定生成的模块的 ID。</li>\n<li><code>looseModules</code> : 可选，是一个布尔值，指示是否使用 loose 模块模式。</li>\n<li><code>esModules</code> : 可选，是一个布尔值，指示是否使用 ES6 模块。</li>\n<li><code>sourceType</code> : 可选，是一个字符串或函数，指定源代码的类型（例如 “script” 或 “module”）。</li>\n<li><code>requires</code> : 可选，是一个数组，包含需要生成的 require 语句。</li>\n<li><code>plugins</code> : 可选，是一个数组，包含要应用的插件。</li>\n<li><code>retainLines</code> : 可选，是一个布尔值，指示是否保留行号。</li>\n<li><code>comments</code> : 可选，是一个布尔值或函数，指示是否保留注释。</li>\n<li><code>compact</code> : 可选，“auto” 或 “true” 表示启用压缩；“false” 表示禁用压缩；“true” 表示在压缩时忽略一些不必要的空白符；“紊” 表示在压缩时保留所有空白符。</li>\n<li><code>minified</code> : 可选，是一个布尔值，指示是否启用最小化。</li>\n<li><code>uglify</code> : 可选，是一个布尔值或对象，指示是否启用 UglifyJS 风格的压缩。</li>\n<li><code>beautify: true</code>  可选，启用美化输出。</li>\n<li><code>asciiOnly</code> : 可选，一个布尔值，指示是否将 Unicode 字符转换为 ASCII 字符。</li>\n<li><code>quoteKeys</code> : 可选，一个布尔值，指示是否在对象字面量中保留键名。</li>\n</ul>\n",
            "tags": [
                "AST"
            ]
        }
    ]
}